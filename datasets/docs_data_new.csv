rule,question,answer
"Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa.",Can a variable defined in a parent scope be accessed in a child scope?,"Yes, a variable defined in a parent scope is available for use within child or descendant scopes."
"Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa.",Can a variable defined in a child scope be accessed in a parent scope?,"No, a variable defined in a child scope is not available for use within parent or ancestor scopes."
"Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa.",What happens if a variable is defined in both a parent and a child scope?,"In Blended, multiple declarations of a variable are not allowed. Attempting to do so will result in a syntax error."
"Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa.",Can a variable be redefined in a child scope?,"No, it cannot be redefined. In Blended, multiple declarations of a variable are not allowed. Attempting to do so will result in a syntax error."
"Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa.",What happens if a variable is defined in a parent scope and then redefined in a child scope?,"In Blended, multiple declarations of a variable are not allowed. Attempting to do so will result in a syntax error."
Multiple declarations of a variable or blended object are not allowed in Blended.,What happens if I try to declare the same variable twice in a Blended program?,"In Blended, multiple declarations of a variable are not allowed. Attempting to do so will result in a syntax error."
Multiple declarations of a variable or blended object are not allowed in Blended.,Can I declare the same blended object twice in a Blended program?,"In Blended, multiple declarations of a blended object are not allowed. Attempting to do so will result in a syntax error."
Multiple declarations of a variable or blended object are not allowed in Blended.,"What if I have a nested structure with variables or objects, and I want to declare them multiple times?","In Blended, multiple declarations of variables or objects within a nested structure are not allowed. Attempting to do so will result in a syntax error."
Names defined inside parent or ancestor scopes cannot be overwritten or modified within child or descendant scopes--they are read-only.,What happens if a variable is defined in a parent scope and then a child scope tries to redefine it?,The child scope will not be able to redefine the variable as multiple declarations are not allowed in Blended.
Names defined inside parent or ancestor scopes cannot be overwritten or modified within child or descendant scopes--they are read-only.,What if a variable is defined in a parent scope and then a child scope tries to modify it?,The child scope will not be able to modify the variable. It will be read-only and cannot be changed.
Names defined inside parent or ancestor scopes cannot be overwritten or modified within child or descendant scopes--they are read-only.,What is the nature of variable in child scope which is defined in parent scope?,"They are read-only variables and thus, cannot be modified or redefined. "
Names defined inside parent or ancestor scopes cannot be overwritten or modified within child or descendant scopes--they are read-only.,What if a variable is defined in a parent scope and then a grandchild scope tries to redefine it?,The grandchild scope will not be able to redefine the variable. It will be read-only and cannot be modified.
Names defined inside a scope are unavailable after the scope exits--they are local to that scope;,What happens if a variable is defined inside a function and then used outside of that function?,The variable is not available outside the function. It is local to the function and cannot be accessed outside of it.
Names defined inside a scope are unavailable after the scope exits--they are local to that scope;,Can a variable be defined inside a loop and then used outside of the loop?,The variable is not available outside the loop. It is local to the loop and cannot be accessed outside of it.
Names defined inside a scope are unavailable after the scope exits--they are local to that scope;,"What if a variable is defined inside a conditional block (if, else, elif) and then used outside of that block?",The variable is not available outside the conditional block. It is local to the block and cannot be accessed outside of it.
Names defined inside a scope are unavailable after the scope exits--they are local to that scope;,Can a variable be declared inside scope A and used in scope B?,"No, variable declared inside scope A can be used in scope A only and not in any other scope"
Names defined inside a scope are unavailable after the scope exits--they are local to that scope;,What if a variable is defined inside a class and then used outside of the class?,The variable is not available outside the class. It is local to the class and cannot be accessed outside of it.
"Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.",What are the external objects automatically accessible from inside a macro in Blended?,"Built-in functions, user functions, and macros defined inside the same scope."
"Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.",Can macros access variables defined outside their scope?,"No, macros can only access variables defined inside their scope or those explicitly passed as arguments."
"Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.",What happens if a macro tries to access a variable that is not defined in its scope or passed as an argument?,The macro will raise an error indicating that the variable is not defined.
"Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.",Can macros call other macros defined in the same scope?,"Yes, macros can call other macros defined in the same scope."
"Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.",What if a macro calls a macro that is not defined in the same scope?,The macro will raise an error indicating that the macro is not defined.
"Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments.",Can a macro in Blended import macros from other files?,"Yes, a macro in Blended can import macros from other files."
"Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments.",Can a macro in Blended access outside variables directly?,"No, a macro in Blended can only access outside variables directly if they are passed in as arguments."
"Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments.","If a macro imports another macro, can the imported macro access the outside variables of the importing macro?","No, the imported macro cannot access the outside variables of the importing macro directly. It can only access them if they are passed in as arguments."
"Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments.",Can a macro in Blended import macros from multiple files?,"Yes, a macro in Blended can import macros from multiple files."
"Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments.","If a macro imports another macro, can the imported macro access variables from the importing macro's parent scope?","No, the imported macro cannot access variables from the importing macro's parent scope directly. It can only access them if they are passed in as arguments."
Comments are same as Jinja comments - {# … #},What is the syntax for a comment in Blended?,Comments in Blended are denoted by {# … #}.
Comments are same as Jinja comments - {# … #},How do comments affect the execution of the code in Blended?,Comments do not affect the execution of the code in Blended. They are purely for documentation and readability.
Comments are same as Jinja comments - {# … #},Can comments be nested in Blended?,"Yes, comments can be nested in Blended. You can place one comment inside another."
Comments are same as Jinja comments - {# … #},Are comments case-sensitive in Blended?,"No, comments in Blended are not case-sensitive. They are treated as case-insensitive."
Comments are same as Jinja comments - {# … #},Can comments be used to disable code in Blended?,"Yes, comments in Blended can be used to disable code just like Jinja comments. "
We use the terms “segment” and “code segment” to refer to any Blended code found between two tags of the same statement. A code segment acts as a partial template that is rendered according to the prescribed behavior of the statement to which it belongs.,What is the difference between a segment and a code segment in Blended?,"A segment is any Blended code found between two tags of the same statement, while a code segment acts as a partial template that is rendered according to the prescribed behavior of the statement to which it belongs."
We use the terms “segment” and “code segment” to refer to any Blended code found between two tags of the same statement. A code segment acts as a partial template that is rendered according to the prescribed behavior of the statement to which it belongs.,How are segments and code segments used in Blended?,"Segments and code segments are used in Blended to create reusable templates and partials. Segments are used to define the structure of a template, while code segments are used to define the behavior of a template."
We use the terms “segment” and “code segment” to refer to any Blended code found between two tags of the same statement. A code segment acts as a partial template that is rendered according to the prescribed behavior of the statement to which it belongs.,What is the significance of the prescribed behavior of a statement in Blended?,The prescribed behavior of a statement in Blended determines how a code segment is rendered. This behavior is defined by the statement to which the code segment belongs.
We use the terms “segment” and “code segment” to refer to any Blended code found between two tags of the same statement. A code segment acts as a partial template that is rendered according to the prescribed behavior of the statement to which it belongs.,Can a code segment be used in multiple statements in Blended?,"Yes, a code segment can be used in multiple statements in Blended. However, the behavior of the code segment may vary depending on the statement to which it belongs."
We use the terms “segment” and “code segment” to refer to any Blended code found between two tags of the same statement. A code segment acts as a partial template that is rendered according to the prescribed behavior of the statement to which it belongs.,What happens if a code segment is not used in any statement in Blended?,"If a code segment is not used in any statement in Blended, it will not be rendered and will not have any effect on the output."
"Access to the data that statements operate upon is restricted by scope. Nine (9) types of scope are defined for Blended templates : Built-in, User-function, Render, Template, Macro, Block, Iterator, Loop, Else.",What are the nine types of scope defined in Blended templates?,"The nine types of scope defined in Blended templates are: Built-in, User-function, Render, Template, Macro, Block, Iterator, Loop, Else."
"Access to the data that statements operate upon is restricted by scope.  Nine (9) types of scope are defined for Blended templates - Built-in, User-function, Render, Template, Macro, Block, Iterator, Loop, Else.",How does the scope of Blended templates differ from Jinja/Twig?,"Blended templates have strict scoping rules, which differ from Jinja/Twig. In Blended, access to the data that statements operate upon is restricted by scope, and there are nine types of scope defined."
"Access to the data that statements operate upon is restricted by scope. Nine (9) types of scope are defined for Blended templates : Built-in, User-function, Render, Template, Macro, Block, Iterator, Loop, Else.",How does the scope affect access to data in Blended templates?,Access to the data that statements operate upon is restricted by scope in Blended templates. This means that data can only be accessed within the scope in which it is defined.
"Access to the data that statements operate upon is restricted by scope. Nine (9) types of scope are defined for Blended templates : Built-in, User-function, Render, Template, Macro, Block, Iterator, Loop, Else.",What is the difference between Built-in and User-function scopes?,"Built-in scope refers to the data and functions that are predefined in Blended templates, such as variables and functions that are available to all templates. User-function scope refers to the data and functions that are defined by the user in their templates."
"Access to the data that statements operate upon is restricted by scope. Nine (9) types of scope are defined for Blended templates : Built-in, User-function, Render, Template, Macro, Block, Iterator, Loop, Else.",What is the purpose of the Else scope in Blended templates?,The Else scope is used to define the code that should be executed if the condition in a conditional statement is not met.
“Built-in” scope: built-in functions provided by Blended,How do built-in functions differ from user-defined functions in Blended?,"Built-in functions are predefined and come with Blended, while user-defined functions are created by the user and can be used to perform specific tasks."
“Built-in” scope: built-in functions provided by Blended,Can built-in functions be modified or extended in Blended?,Built-in functions cannot be modified or extended in Blended. They are part of the language's core and are fixed.
“Built-in” scope: built-in functions provided by Blended,What are the benefits of using built-in functions in Blended?,"Using built-in functions in Blended can save time and effort, as they are optimized and tested for performance."
“User-function” scope: custom functions provided by the application,What are custom functions in Blended?,Custom functions in Blended are functions that are provided by the application and are not built into the language itself.
“User-function” scope: custom functions provided by the application,What is user function scope?,It includes all custom functions provided by user or application
“User-function” scope: custom functions provided by the application,How do custom functions differ from built-in functions in Blended?,"Custom functions are functions that are defined and implemented by the application, while built-in functions are functions that are part of the language's core functionality."
“User-function” scope: custom functions provided by the application,Can custom functions be used in any part of the Blended code?,"Custom functions can be used in any part of the Blended code, but they are not part of the language's built-in functionality."
“User-function” scope: custom functions provided by the application,What are the benefits of using custom functions in Blended?,"Using custom functions in Blended can help to make the code more modular, reusable, and maintainable."
“Render” scope: data provided by the application at the time that “render” is invoked on a template.,What happens if a template is rendered multiple times with different data?,"Each time the template is rendered, it will use the data provided at the time of the render invocation."
“Render” scope: data provided by the application at the time that “render” is invoked on a template.,What is included in Render scope?,It has data provided by application at time of 'render' invocation
“Render” scope: data provided by the application at the time that “render” is invoked on a template.,How does Blended handle data that is not provided at the time of rendering?,Blended will raise an error if a template attempts to access data that is not provided at the time of rendering.
"“Template” scope: names assigned in the template, outside any blocks",What are the names assigned in the template considered to be in the 'Template' scope?,I don't have information about this scope yet. 
"“Template” scope: names assigned in the template, outside any blocks",Can names assigned in the template be accessed within blocks?,I don't have information about this scope yet. 
"“Template” scope: names assigned in the template, outside any blocks",What happens if a name is assigned in the template and then used within a block?,I don't have information about this scope yet. 
"“Template” scope: names assigned in the template, outside any blocks",Are names assigned in the template accessible outside the template?,I don't have information about this scope yet. 
"“Template” scope: names assigned in the template, outside any blocks",Can names assigned in the template be used in other templates?,I don't have information about this scope yet. 
“Macro” scope: template code inside macro tags,What is the scope of a macro in Blended?,"In Blended, the scope of a macro is limited to the template code that is enclosed within the macro tags."
“Macro” scope: template code inside macro tags,Can a macro access variables defined outside its macro tags?,"No, a macro in Blended cannot access variables defined outside its macro tags. It operates within its own isolated scope."
“Macro” scope: template code inside macro tags,How does a macro handle variable scope within its own block?,A macro in Blended handles variable scope within its own block by creating a new scope for variables defined within the macro tags.
“Macro” scope: template code inside macro tags,Can a macro call another macro within its own block?,"Yes, a macro in Blended can call another macro within its own block, allowing for nested macro calls."
“Macro” scope: template code inside macro tags,What happens if a macro is defined within another macro?,"A macro defined within another macro is considered a nested macro and operates within its own scope, but it can access variables defined in the outer macro."
“Block” scope: template code inside block tags,Can variables defined in a block be accessed outside of the block?,"No, variables defined in a block are not accessible outside of that block. They are scoped to the block and are only available within the block's context."
“Block” scope: template code inside block tags,What happens if a variable is defined in multiple blocks?,"Since all blocks have their independent scope, this variable will be unique in each block."
“Block” scope: template code inside block tags,Can functions defined in a block be called outside of the block?,"No, functions defined in a block are not accessible outside of that block. They are scoped to the block and are only available within the block's context."
“Iterator” scope: iteration objects used by for...else block,What is the purpose of the 'Iterator' scope in Blended programming?,The 'Iterator' scope in Blended programming is used to manage iteration objects that are specifically used within the 'for...else' block. This ensures that the iterator is properly scoped and does not interfere with other parts of the code.
“Iterator” scope: iteration objects used by for...else block,How does the 'Iterator' scope differ from other scopes in Blended?,The 'Iterator' scope is distinct from other scopes in Blended because it is specifically designed to handle iteration objects within the 'for...else' block. This ensures that the iterator is properly managed and does not affect other parts of the code.
“Iterator” scope: iteration objects used by for...else block,Can the 'Iterator' scope be used in other parts of the code besides the 'for...else' block?,"No, the 'Iterator' scope is specifically designed to be used within the 'for...else' block. It is not intended to be used in other parts of the code."
“Iterator” scope: iteration objects used by for...else block,How can I ensure that the 'Iterator' scope is used correctly in my Blended code?,"To ensure that the 'Iterator' scope is used correctly in your Blended code, you should follow the rule that the 'Iterator' scope is specifically designed to be used within the 'for...else' block. This ensures that the iterator is properly managed and does not interfere with other parts of the code."
“Loop” scope: template code inside for section of the for...else block,What is the scope of the 'Loop' in Blended?,The 'Loop' scope in Blended refers to the template code that appears inside the `for` section of a `for...else` block.
“Loop” scope: template code inside for section of the for...else block,Can the 'Loop' scope be used in other parts of the template?,"No, the 'Loop' scope is limited to the `for` section of a `for...else` block and cannot be used in other parts of the template."
“Loop” scope: template code inside for section of the for...else block,What happens if a variable is defined in the 'Loop' scope and then used outside of it?,"If a variable is defined within the 'Loop' scope and then used outside of it, it will not be accessible outside of the loop. Linter will throw an error."
“Loop” scope: template code inside for section of the for...else block,What is the purpose of the 'else' block in a 'for...else' block in Blended?,The 'else' block in a 'for...else' block in Blended is used to execute code when the loop completes without finding any items to iterate over.
“Else” scope: template code inside the else section of a for...else block,What happens if there are no items in the list being iterated over in a for...else block?,"In Blended, if there are no items in the list being iterated over in a for...else block, the code inside the else section will be executed."
“Else” scope: template code inside the else section of a for...else block,Can the else section of a for...else block be empty?,"Yes, the else section of a for...else block can be empty. If there are no items in the list, the else section will not execute any code."
“Else” scope: template code inside the else section of a for...else block,What if the for loop is not executed due to a condition outside the loop?,"In Blended, if the for loop is not executed due to a condition outside the loop, the else section will not execute any code."
“Else” scope: template code inside the else section of a for...else block,Can the else section of a for...else block be used with other control structures like if...else?,"Yes, the else section of a for...else block can be used with other control structures like if...else. However, the else section of a for...else block will only execute if the for loop is not executed due to a condition outside the loop."
“Else” scope: template code inside the else section of a for...else block,What happens if the for loop is executed but the else section is not executed?,"In Blended, if the for loop is executed but the else section is not executed, it means that the for loop iterated over all items in the list and the else section was not triggered."
Pair lists may be introduced by applying the items filter to dictionary objects.,What is the purpose of the `items` filter in Blended?,The `items` filter in Blended is used to extract key-value pairs from a dictionary object and present them as a list of pairs.
Pair lists may be introduced by applying the items filter to dictionary objects.,How does the `items` filter work with dictionaries?,"The `items` filter takes a dictionary object as input and returns a list of tuples, where each tuple contains a key-value pair from the dictionary."
Pair lists may be introduced by applying the items filter to dictionary objects.,Can the `items` filter be used with other types of objects?,"No, the `items` filter is specifically designed to work with dictionary objects. It cannot be applied to other types of objects."
Pair lists may be introduced by applying the items filter to dictionary objects.,What happens if the input to the `items` filter is not a dictionary?,"If the input to the `items` filter is not a dictionary, it will result in an error or an unexpected output, as the filter is not designed to handle non-dictionary inputs."
Pair lists may be introduced by applying the items filter to dictionary objects.,Can the `items` filter be used in combination with other filters or modifiers?,"Yes, the `items` filter can be used in combination with other filters or modifiers to further process the list of key-value pairs."
Timestamps may be introduced by applying the datetime filter to properly formatted lists or to properly formatted strings.,What is the datetime filter in Blended?,The datetime filter in Blended is a built-in function that converts a properly formatted list or string into a timestamp.
Timestamps may be introduced by applying the datetime filter to properly formatted lists or to properly formatted strings.,How do I properly format a list to use the datetime filter?,"To properly format a list for use with the datetime filter, ensure that the list contains elements that can be converted into a timestamp, such as dates or times."
Timestamps may be introduced by applying the datetime filter to properly formatted lists or to properly formatted strings.,What is a properly formatted string for the datetime filter?,"A properly formatted string for the datetime filter should be in a format that can be parsed into a timestamp, such as 'YYYY-MM-DD HH:MM:SS' or '2023-10-05 14:30:00'."
Timestamps may be introduced by applying the datetime filter to properly formatted lists or to properly formatted strings.,"Can I use the datetime filter on a single element, or do I need a list?",The datetime filter in Blended requires a list of elements to convert into timestamps. You cannot use it on a single element.
Timestamps may be introduced by applying the datetime filter to properly formatted lists or to properly formatted strings.,What happens if the datetime filter encounters an element that cannot be converted into a timestamp?,"If the datetime filter encounters an element that cannot be converted into a timestamp, it will raise an error or return an invalid timestamp."
"Templates may be introduced through the use of the template filter, which compiles a string into a template object.",What is the purpose of the template filter in Blended?,"The template filter in Blended is used to compile a string into a template object, allowing for the introduction of templates within the language."
"Templates may be introduced through the use of the template filter, which compiles a string into a template object.",Can a template be created from a string in Blended?,"Yes, a template can be created from a string in Blended using the template filter."
"Templates may be introduced through the use of the template filter, which compiles a string into a template object.",What are the benefits of using the template filter in Blended?,"The template filter provides a way to compile strings into template objects, enabling the creation and manipulation of templates within the language, which can be useful for dynamic content generation and templating."
"Safe strings may be introduced by applying the safe filter, or as the output of any macro invocation.",What is the difference between a Safe string and a regular string in Blended?,"A Safe string is one that has been explicitly marked as safe for output, either by applying the safe filter or as the output of a macro invocation. Regular strings are not marked as safe and may contain potentially harmful content."
"Safe strings may be introduced by applying the safe filter, or as the output of any macro invocation.",Can I use the safe filter on a regular string to make it safe?,"Yes, you can use the safe filter on a regular string to make it safe. This is useful when you want to ensure that a string containing potentially harmful content is treated as safe for output."
"Safe strings may be introduced by applying the safe filter, or as the output of any macro invocation.",What happens if I apply the safe filter to a Safe string?,Applying the safe filter to a Safe string does not change its status. A Safe string remains Safe.
"Safe strings may be introduced by applying the safe filter, or as the output of any macro invocation.",Can I use macros to create Safe strings?,"Yes, you can use macros to create Safe strings. Macros can return Safe strings as their output, and these Safe strings can then be used in the same way as any other Safe string."
"Safe strings may be introduced by applying the safe filter, or as the output of any macro invocation.",What if I want to ensure that a string is safe before using it in a template?,"To ensure that a string is safe before using it in a template, you should apply the safe filter to it. This will mark the string as Safe, allowing it to be safely rendered in the template."
Escaped strings may be introduced by applying the escape filter (alias e) to string objects.,What is the purpose of the escape filter in Blended?,"The escape filter in Blended is used to introduce escaped strings into the code, which helps prevent XSS (Cross-Site Scripting) attacks by converting special characters into their HTML entity equivalents."
Escaped strings may be introduced by applying the escape filter (alias e) to string objects.,Can the escape filter be used on variables or only on strings?,The escape filter can be applied to both strings and variables. It is typically used on strings to ensure that any special characters are properly encoded.
Escaped strings may be introduced by applying the escape filter (alias e) to string objects.,Is it possible to use the escape filter on a list or array of strings?,"Yes, the escape filter can be applied to a list or array of strings. It will escape each string in the list individually."
Escaped strings may be introduced by applying the escape filter (alias e) to string objects.,What happens if I apply the escape filter to a string that is already escaped?,"If a string is already escaped, applying the escape filter again will not change its content. The string will remain in its escaped form."
Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.,Can a variable be accessed if it is defined in a parent scope?,"Yes, a variable can be accessed if it is defined in a parent scope."
Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.,Can a variable be accessed if it is defined in an ancestor scope?,"Yes, a variable can be accessed if it is defined in an ancestor scope."
Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.,Can a variable be accessed if it is defined in the current scope?,"Yes, a variable can be accessed if it is defined in the current scope."
Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.,Can a variable be accessed if it is defined in a nested scope?,"Yes, a variable can be accessed if it is defined in a nested scope."
Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.,Can a variable be accessed if it is defined in a sibling scope?,"No, a variable cannot be accessed if it is defined in a sibling scope."
"No data names used in any parent or ancestor scope may be modified or overridden within any child or descendant scope--they are read-only within the child or descendant scope. This means that names in use by the parent scope (or in any ancestor scope) may not be used as a target for set, as a macro name, as a name for a module imported using the import tag, or as an iteration item in the for tag. Only names declared within the current scope may be overwritten.",Can I use a variable declared in the parent scope within a child scope?,"Yes, you can use variables declared in the parent scope within a child scope."
"No data names used in any parent or ancestor scope may be modified or overridden within any child or descendant scope--they are read-only within the child or descendant scope. This means that names in use by the parent scope (or in any ancestor scope) may not be used as a target for set, as a macro name, as a name for a module imported using the import tag, or as an iteration item in the for tag. Only names declared within the current scope may be overwritten.",Can I define a macro with name of variable declared in the parent scope within a child scope?,It violates already learnt rule that multiple declarations are not allowed in Blended. 
"No data names used in any parent or ancestor scope may be modified or overridden within any child or descendant scope--they are read-only within the child or descendant scope. This means that names in use by the parent scope (or in any ancestor scope) may not be used as a target for set, as a macro name, as a name for a module imported using the import tag, or as an iteration item in the for tag. Only names declared within the current scope may be overwritten.",Can I use an iteration item in the for tag declared in the parent scope within a child scope?,"No, you cannot use iteration items declared in the parent scope within a child scope."
"No data names used in any parent or ancestor scope may be modified or overridden within any child or descendant scope--they are read-only within the child or descendant scope. This means that names in use by the parent scope (or in any ancestor scope) may not be used as a target for set, as a macro name, as a name for a module imported using the import tag, or as an iteration item in the for tag. Only names declared within the current scope may be overwritten.",Can I overwrite a variable declared in the parent scope within a child scope?,"No, you cannot overwrite variables declared in the parent scope within a child scope."
"Built-in function names are defined within the outermost scope, the “built-in” scope. By implication, no functions, variables, macros or imported modules may share a name with any built-in functions. Built-in functions are defined as part of the language specification itself.",What are the implications of the rule regarding built-in function names in Blended?,"Built-in function names are defined within the outermost scope, the “built-in” scope. No functions, variables, macros, or imported modules may share a name with any built-in functions. Built-in functions are defined as part of the language specification itself."
"Built-in function names are defined within the outermost scope, the “built-in” scope. By implication, no functions, variables, macros or imported modules may share a name with any built-in functions. Built-in functions are defined as part of the language specification itself.",Can I use a built-in function name as a variable or macro name in Blended?,"No, you cannot use a built-in function name as a variable or macro name in Blended. Built-in functions are defined within the outermost scope and are reserved for the language's built-in functionality."
"Built-in function names are defined within the outermost scope, the “built-in” scope. By implication, no functions, variables, macros or imported modules may share a name with any built-in functions. Built-in functions are defined as part of the language specification itself.",What happens if I try to define a function with the same name as a built-in function in Blended?,Attempting to define a function with the same name as a built-in function in Blended will result in a syntax error. The language specification explicitly prohibits this to maintain clarity and prevent conflicts with built-in functionality.
"Built-in function names are defined within the outermost scope, the “built-in” scope. By implication, no functions, variables, macros or imported modules may share a name with any built-in functions. Built-in functions are defined as part of the language specification itself.",Can I import built-in functions from other modules in Blended?,"No, you cannot import built-in functions from other modules in Blended. Built-in functions are part of the language specification and are not meant to be imported from external modules."
"Built-in function names are defined within the outermost scope, the “built-in” scope. By implication, no functions, variables, macros or imported modules may share a name with any built-in functions. Built-in functions are defined as part of the language specification itself.",What are the potential consequences of not following the rule regarding built-in function names in Blended?,"Not following the rule regarding built-in function names in Blended can lead to syntax errors, confusion, and potential security issues. It can also make it difficult to maintain and understand the codebase, as built-in functions are critical to the language's functionality."
"User-defined functions inhabit the second-level scope, the “user-function” scope, which is the child of the “built-in” scope. As follows from the rules above, no user-defined function may share the name of any built-in function, nor may any template-defined macro, variable or imported module share the name of any user-defined function. For purposes of Blended-Lint, user-defined functions are declared in a specifically-formatted JSON file that specifies each function’s name, argument data types, and possible return types.",What is the difference between the built-in scope and the user-function scope in Blended?,"The built-in scope contains all the functions, macros, variables, and modules that are predefined in Blended. The user-function scope is a child of the built-in scope and is where user-defined functions are declared."
"User-defined functions inhabit the second-level scope, the “user-function” scope, which is the child of the “built-in” scope. As follows from the rules above, no user-defined function may share the name of any built-in function, nor may any template-defined macro, variable or imported module share the name of any user-defined function. For purposes of Blended-Lint, user-defined functions are declared in a specifically-formatted JSON file that specifies each function’s name, argument data types, and possible return types.",Can a user-defined function have the same name as a built-in function in Blended?,"No, a user-defined function cannot have the same name as a built-in function in Blended."
"User-defined functions inhabit the second-level scope, the “user-function” scope, which is the child of the “built-in” scope. As follows from the rules above, no user-defined function may share the name of any built-in function, nor may any template-defined macro, variable or imported module share the name of any user-defined function. For purposes of Blended-Lint, user-defined functions are declared in a specifically-formatted JSON file that specifies each function’s name, argument data types, and possible return types.","Can a user-defined function have the same name as a template-defined macro, variable, or imported module in Blended?","No, a user-defined function cannot have the same name as a template-defined macro, variable, or imported module in Blended."
"User-defined functions inhabit the second-level scope, the “user-function” scope, which is the child of the “built-in” scope. As follows from the rules above, no user-defined function may share the name of any built-in function, nor may any template-defined macro, variable or imported module share the name of any user-defined function. For purposes of Blended-Lint, user-defined functions are declared in a specifically-formatted JSON file that specifies each function’s name, argument data types, and possible return types.",How is a user-defined function declared in Blended?,"A user-defined function is declared in a specifically-formatted JSON file that specifies each function’s name, argument data types, and possible return types."
"User-defined functions inhabit the second-level scope, the “user-function” scope, which is the child of the “built-in” scope. As follows from the rules above, no user-defined function may share the name of any built-in function, nor may any template-defined macro, variable or imported module share the name of any user-defined function. For purposes of Blended-Lint, user-defined functions are declared in a specifically-formatted JSON file that specifies each function’s name, argument data types, and possible return types.",What is the purpose of the JSON file used to declare user-defined functions in Blended?,"The JSON file used to declare user-defined functions in Blended specifies each function’s name, argument data types, and possible return types."
"“Application” scope is the child of the “user-function” scope, and is the parent of the template scope. As a result, it follows naturally that it is both immutable, and global within the template. Variables defined in the application scope are accessible inside all templates and tags, but no such variable may be modified or overwritten in any template by any tag.",What is the scope of the 'Application' scope in Blended?,The 'Application' scope is the child of the 'user-function' scope and is the parent of the template scope.
"“Application” scope is the child of the “user-function” scope, and is the parent of the template scope. As a result, it follows naturally that it is both immutable, and global within the template. Variables defined in the application scope are accessible inside all templates and tags, but no such variable may be modified or overwritten in any template by any tag.",Is the 'Application' scope immutable and global within the template?,"Yes, the 'Application' scope is both immutable and global within the template."
"“Application” scope is the child of the “user-function” scope, and is the parent of the template scope. As a result, it follows naturally that it is both immutable, and global within the template. Variables defined in the application scope are accessible inside all templates and tags, but no such variable may be modified or overwritten in any template by any tag.",What are the implications of the 'Application' scope being immutable and global?,"Variables defined in the 'Application' scope are accessible inside all templates and tags, but no such variable may be modified or overwritten in any template by any tag."
"“Application” scope is the child of the “user-function” scope, and is the parent of the template scope. As a result, it follows naturally that it is both immutable, and global within the template. Variables defined in the application scope are accessible inside all templates and tags, but no such variable may be modified or overwritten in any template by any tag.",Can variables defined in the 'Application' scope be accessed in nested templates?,"Yes, variables defined in the 'Application' scope are accessible in nested templates."
"“Application” scope is the child of the “user-function” scope, and is the parent of the template scope. As a result, it follows naturally that it is both immutable, and global within the template. Variables defined in the application scope are accessible inside all templates and tags, but no such variable may be modified or overwritten in any template by any tag.",What happens if a variable is defined in the 'Application' scope and then modified in a template?,A variable defined in the 'Application' scope cannot be modified or overwritten in any template by any tag.
"Any variable name that is referenced or accessed within the body of a template, but which has not been declared within the body of the template, should be assumed to have been introduced within the application scope. However, a JSON schema document may be provided to Blended-Lint which declares all of the application variables for a given template file. In the case that such a schema file is provided, any variable name that is referenced or accessed within the body of a template which has neither been declared within the body of the template nor declared within the JSON schema document shall be deemed an error (“variable undefined”), causing the file to be declared invalid.",What happens if a variable is referenced in the template but not declared within the template or the JSON schema?,The variable is deemed an error and the file is declared invalid.
"Any variable name that is referenced or accessed within the body of a template, but which has not been declared within the body of the template, should be assumed to have been introduced within the application scope. However, a JSON schema document may be provided to Blended-Lint which declares all of the application variables for a given template file. In the case that such a schema file is provided, any variable name that is referenced or accessed within the body of a template which has neither been declared within the body of the template nor declared within the JSON schema document shall be deemed an error (“variable undefined”), causing the file to be declared invalid.",Can a variable be declared within the template and then referenced later?,"Yes, as long as it is declared within the template or the JSON schema."
"Any variable name that is referenced or accessed within the body of a template, but which has not been declared within the body of the template, should be assumed to have been introduced within the application scope. However, a JSON schema document may be provided to Blended-Lint which declares all of the application variables for a given template file. In the case that such a schema file is provided, any variable name that is referenced or accessed within the body of a template which has neither been declared within the body of the template nor declared within the JSON schema document shall be deemed an error (“variable undefined”), causing the file to be declared invalid.",What if a variable is declared in the JSON schema but not referenced in the template?,"The variable is not considered an error, as it is declared in the JSON schema."
"Any variable name that is referenced or accessed within the body of a template, but which has not been declared within the body of the template, should be assumed to have been introduced within the application scope. However, a JSON schema document may be provided to Blended-Lint which declares all of the application variables for a given template file. In the case that such a schema file is provided, any variable name that is referenced or accessed within the body of a template which has neither been declared within the body of the template nor declared within the JSON schema document shall be deemed an error (“variable undefined”), causing the file to be declared invalid.",Can a variable be declared in the template and then referenced in the JSON schema?,"Yes, as long as it is declared within the template or the JSON schema."
"The “template” scope is the scope of all variables, macros and modules defined inside the root template, outside of all macro tags, block tags, and for...else statements.","What is the scope of variables, macros, and modules in a Blended template?","The scope of variables, macros, and modules in a Blended template is the root template, excluding all macro tags, block tags, and for...else statements."
"The “template” scope is the scope of all variables, macros and modules defined inside the root template, outside of all macro tags, block tags, and for...else statements.",Can variables defined in a macro be accessed outside of the macro?,"No, variables defined in a macro are not accessible outside of the macro."
"The “template” scope is the scope of all variables, macros and modules defined inside the root template, outside of all macro tags, block tags, and for...else statements.",How does the scope of a macro differ from the scope of a block tag?,"The scope of a macro is the root template, while the scope of a block tag is the block itself."
"The “template” scope is the scope of all variables, macros and modules defined inside the root template, outside of all macro tags, block tags, and for...else statements.",Can a for...else statement access variables defined in the root template?,"Yes, a for...else statement can access variables defined in the root template."
"The “template” scope is the scope of all variables, macros and modules defined inside the root template, outside of all macro tags, block tags, and for...else statements.",What happens if a variable is defined in a macro and then used in a block tag?,"The variable is not accessible in the block tag, as it is defined in the macro scope."
"Passing variable names as arguments is the only way for a macro to have access to any portion of the caller’s scope. The values are passed by reference, so while the values themselves are immutable, what values the argument names refer to may change within the “macro” scope. These variables are part of the “macro” scope.",What happens if a macro tries to modify a variable that is not passed as an argument?,The macro will not be able to modify the variable because it does not have access to the variable's value in the caller's scope.
"Passing variable names as arguments is the only way for a macro to have access to any portion of the caller’s scope. The values are passed by reference, so while the values themselves are immutable, what values the argument names refer to may change within the “macro” scope. These variables are part of the “macro” scope.",Can a macro access variables that are not defined in the caller's scope?,"No, a macro can only access variables that are explicitly passed as arguments."
"Passing variable names as arguments is the only way for a macro to have access to any portion of the caller’s scope. The values are passed by reference, so while the values themselves are immutable, what values the argument names refer to may change within the “macro” scope. These variables are part of the “macro” scope.",What happens if a macro tries to modify a variable that is passed as an argument but is not mutable?,The macro will not be able to modify the variable because it does not have access to the variable's value in the caller's scope.
"Passing variable names as arguments is the only way for a macro to have access to any portion of the caller’s scope. The values are passed by reference, so while the values themselves are immutable, what values the argument names refer to may change within the “macro” scope. These variables are part of the “macro” scope.",Can a macro access variables that are defined in the caller's scope but are not passed as arguments?,"No, a macro can only access variables that are explicitly passed as arguments."
"Macros can make recursive calls to themselves, but circular calls between and among macros is prohibited.",Can macros in Blended make recursive calls to themselves?,"Yes, macros in Blended can make recursive calls to themselves."
"Macros can make recursive calls to themselves, but circular calls between and among macros is prohibited.",Is it allowed for macros to call each other in a circular manner?,"No, circular calls between and among macros are prohibited."
"Macros can make recursive calls to themselves, but circular calls between and among macros is prohibited.",What happens if a macro calls itself in a way that creates a loop?,"Circular calls between macros are strictly prohibited, and attempting to do so will result in a compilation error."
"Macros can make recursive calls to themselves, but circular calls between and among macros is prohibited.",Can macros call each other directly without any restrictions?,"Yes, macros can call each other directly without any restrictions."
"Macros can make recursive calls to themselves, but circular calls between and among macros is prohibited.",What is the impact of a macro calling itself in a non-recursive manner?,A macro calling itself in a non-recursive manner is allowed and does not violate the rule.
"No macro may share the name of any other object defined before or after its definition in the same scope, or in any parent scope.",What happens if a macro in Blended shares the name of a variable defined in the same scope?,"The macro will not be defined, and we will get an error from the compiler"
"No macro may share the name of any other object defined before or after its definition in the same scope, or in any parent scope.",Can a macro in Blended share the name of a macro defined in a parent scope?,"The macro will not be defined, and we will get an error from the compiler"
"No macro may share the name of any other object defined before or after its definition in the same scope, or in any parent scope.",What if a macro in Blended shares the name of a function defined in the same scope?,"The macro will not be defined, and we will get an error from the compiler"
"No macro may share the name of any other object defined before or after its definition in the same scope, or in any parent scope.",Can a macro in Blended share the name of a class defined in the same scope?,"The macro will not be defined, and we will get an error from the compiler"
"No macro may share the name of any other object defined before or after its definition in the same scope, or in any parent scope.",What if a macro in Blended shares the name of a module defined in the same scope?,"The macro will not be defined, and we will get an error from the compiler"
"The macro statement may not appear inside an if...else statement, nor inside a for...else statement. Defining a macro using a macro tag inside of another macro tag, however, is permitted. Macro tags may only be used directly within the “template” scope, directly within the scope of a block statement, or within a “macro” scope.",Can a macro be defined inside a macro tag within another macro tag?,"Yes, defining a macro using a macro tag inside of another macro tag is permitted."
"The macro statement may not appear inside an if...else statement, nor inside a for...else statement. Defining a macro using a macro tag inside of another macro tag, however, is permitted. Macro tags may only be used directly within the “template” scope, directly within the scope of a block statement, or within a “macro” scope.",Can a macro be defined inside an if...else statement?,"No, the macro statement may not appear inside an if...else statement."
"The macro statement may not appear inside an if...else statement, nor inside a for...else statement. Defining a macro using a macro tag inside of another macro tag, however, is permitted. Macro tags may only be used directly within the “template” scope, directly within the scope of a block statement, or within a “macro” scope.",Can a macro be defined inside a for...else statement?,"No, the macro statement may not appear inside a for...else statement."
"The macro statement may not appear inside an if...else statement, nor inside a for...else statement. Defining a macro using a macro tag inside of another macro tag, however, is permitted. Macro tags may only be used directly within the “template” scope, directly within the scope of a block statement, or within a “macro” scope.",Can a macro be defined directly within the template scope?,"Yes, macro tags may only be used directly within the “template” scope."
"The macro statement may not appear inside an if...else statement, nor inside a for...else statement. Defining a macro using a macro tag inside of another macro tag, however, is permitted. Macro tags may only be used directly within the “template” scope, directly within the scope of a block statement, or within a “macro” scope.",Can a macro be defined directly within the scope of a block statement?,"Yes, macro tags may only be used directly within the scope of a block statement."
"“Block” scope describes the contents of block statements. Each separate block within a template has its own, independent scope, which does not have access or reference to any other block.",What happens if a variable is declared within a block in Blended?,A variable declared within a block is only accessible within that block. It does not affect or conflict with variables declared in other blocks.
"“Block” scope describes the contents of block statements. Each separate block within a template has its own, independent scope, which does not have access or reference to any other block.",Can a block access variables declared in a parent block?,"No, a block does not have access to variables declared in a parent block. Each block has its own independent scope."
"“Block” scope describes the contents of block statements. Each separate block within a template has its own, independent scope, which does not have access or reference to any other block.",What if a block contains a variable with the same name as a variable in a parent block?,The block's variable takes precedence over the parent block's variable. The parent block's variable is not accessible within the block.
"“Block” scope describes the contents of block statements. Each separate block within a template has its own, independent scope, which does not have access or reference to any other block.",Can a block modify a variable declared in a another block?,"No, a block cannot modify a variable declared in a another block. The block's scope is independent, and it does not have access to modify variables in the another block."
"The for...else statement effectively has three distinct scoping levels: the “iterator” scope, the “loop” scope, and the “else” scope. The for...else statement’s “iterator” scope persists for the duration of the tag’s execution, and contains the named item variables and the forloop variable. The for...else statement’s “loop” scope is a child scope encapsulated by the “iterator” scope. By this arrangement, the forloop variable and the named item variable(s) are prohibited from being modified inside the “loop” scope.",What is the scope of the 'iterator' in a Blended for...else statement?,The 'iterator' scope persists for the duration of the tag's execution and contains the named item variables and the forloop variable.
"The for...else statement effectively has three distinct scoping levels: the “iterator” scope, the “loop” scope, and the “else” scope. The for...else statement’s “iterator” scope persists for the duration of the tag’s execution, and contains the named item variables and the forloop variable. The for...else statement’s “loop” scope is a child scope encapsulated by the “iterator” scope. By this arrangement, the forloop variable and the named item variable(s) are prohibited from being modified inside the “loop” scope.",What is the scope of the 'loop' in a Blended for...else statement?,The 'loop' scope is a child scope encapsulated by the 'iterator' scope.
"The for...else statement effectively has three distinct scoping levels: the “iterator” scope, the “loop” scope, and the “else” scope. The for...else statement’s “iterator” scope persists for the duration of the tag’s execution, and contains the named item variables and the forloop variable. The for...else statement’s “loop” scope is a child scope encapsulated by the “iterator” scope. By this arrangement, the forloop variable and the named item variable(s) are prohibited from being modified inside the “loop” scope.",What are the restrictions on the 'loop' scope in a Blended for...else statement?,The forloop variable and the named item variable(s) are prohibited from being modified inside the 'loop' scope.
"The for...else statement effectively has three distinct scoping levels: the “iterator” scope, the “loop” scope, and the “else” scope. The for...else statement’s “iterator” scope persists for the duration of the tag’s execution, and contains the named item variables and the forloop variable. The for...else statement’s “loop” scope is a child scope encapsulated by the “iterator” scope. By this arrangement, the forloop variable and the named item variable(s) are prohibited from being modified inside the “loop” scope.",How does the 'iterator' scope differ from the 'loop' scope in a Blended for...else statement?,"The 'iterator' scope persists for the duration of the tag's execution, while the 'loop' scope is a child scope encapsulated by the 'iterator' scope."
"The for...else statement effectively has three distinct scoping levels: the “iterator” scope, the “loop” scope, and the “else” scope. The for...else statement’s “iterator” scope persists for the duration of the tag’s execution, and contains the named item variables and the forloop variable. The for...else statement’s “loop” scope is a child scope encapsulated by the “iterator” scope. By this arrangement, the forloop variable and the named item variable(s) are prohibited from being modified inside the “loop” scope.",What are the implications of the 'iterator' scope's persistence in a Blended for...else statement?,The 'iterator' scope's persistence allows for the named item variables and the forloop variable to be accessed and used throughout the tag's execution.
"The for...else statement’s “else” scope (which is coincident with the contents of the template segment that follows the else tag, termed the “else segment”) is a sibling of the “iterator” scope, and therefore only shares with it and the “loop” scope whatever variables are defined in the scope that contains the for...else statement itself. It does not have access to the forloop variable nor the named item variables from the “iterator” scope.",What is the scope of the 'else' segment in a Blended for...else statement?,The 'else' segment in a Blended for...else statement is a sibling of the 'iterator' scope and shares with it and the 'loop' scope whatever variables are defined in the scope that contains the for...else statement itself. It does not have access to the 'forloop' variable nor the named item variables from the 'iterator' scope.
"The for...else statement’s “else” scope (which is coincident with the contents of the template segment that follows the else tag, termed the “else segment”) is a sibling of the “iterator” scope, and therefore only shares with it and the “loop” scope whatever variables are defined in the scope that contains the for...else statement itself. It does not have access to the forloop variable nor the named item variables from the “iterator” scope.",Can the 'else' segment access variables defined in the 'iterator' scope?,"No, the 'else' segment does not have access to the variables defined in the 'iterator' scope."
"The for...else statement’s “else” scope (which is coincident with the contents of the template segment that follows the else tag, termed the “else segment”) is a sibling of the “iterator” scope, and therefore only shares with it and the “loop” scope whatever variables are defined in the scope that contains the for...else statement itself. It does not have access to the forloop variable nor the named item variables from the “iterator” scope.",Can the 'else' segment access the 'forloop' variable?,"No, the 'else' segment does not have access to the 'forloop' variable."
"The for...else statement’s “else” scope (which is coincident with the contents of the template segment that follows the else tag, termed the “else segment”) is a sibling of the “iterator” scope, and therefore only shares with it and the “loop” scope whatever variables are defined in the scope that contains the for...else statement itself. It does not have access to the forloop variable nor the named item variables from the “iterator” scope.",Can the 'else' segment access named item variables from the 'iterator' scope?,"No, the 'else' segment does not have access to named item variables from the 'iterator' scope."
"The for...else statement’s “else” scope (which is coincident with the contents of the template segment that follows the else tag, termed the “else segment”) is a sibling of the “iterator” scope, and therefore only shares with it and the “loop” scope whatever variables are defined in the scope that contains the for...else statement itself. It does not have access to the forloop variable nor the named item variables from the “iterator” scope.",What is the relationship between the 'else' segment and the 'iterator' scope in terms of variable access?,The 'else' segment is a sibling of the 'iterator' scope and shares with it and the 'loop' scope whatever variables are defined in the scope that contains the for...else statement itself. It does not have access to the 'forloop' variable nor the named item variables from the 'iterator' scope.
"However, a variable set inside an if...else statement may only be accessed after that statement if the variable is guaranteed to have already been set. If a variable is used after an if...else statement, that variable MUST have been (a) defined before entering the if...else statement, or (b) defined in both the if section and the else section of the if...else statement. If a variable is set only in the if section, or only in the else section, without being defined earlier on within the same scope, then it will not be available after the if...else statement.",What happens if a variable is set inside an if...else statement and then used outside of it?,The variable will not be available after the if...else statement unless it is defined before entering the if...else statement or defined in both the if section and the else section.
"However, a variable set inside an if...else statement may only be accessed after that statement if the variable is guaranteed to have already been set. If a variable is used after an if...else statement, that variable MUST have been (a) defined before entering the if...else statement, or (b) defined in both the if section and the else section of the if...else statement. If a variable is set only in the if section, or only in the else section, without being defined earlier on within the same scope, then it will not be available after the if...else statement.",Can a variable be set inside if section of if...else statement and then used in the else section without being defined before the if section?,"No, the variable will not be available after the if...else statement unless it is defined before entering the if...else statement or defined in both the if section and the else section."
"However, a variable set inside an if...else statement may only be accessed after that statement if the variable is guaranteed to have already been set. If a variable is used after an if...else statement, that variable MUST have been (a) defined before entering the if...else statement, or (b) defined in both the if section and the else section of the if...else statement. If a variable is set only in the if section, or only in the else section, without being defined earlier on within the same scope, then it will not be available after the if...else statement.",What if a variable is set inside an if section and else section of if else statement and used outside if else statement?,"Yes, it is valid since variable presence is guaranteed before usage. "
Blended is a variant of Jinja Templating language with strict scoping and type casting rules.,What are the strict scoping rules in Blended?,"In Blended, variables are scoped to the block in which they are defined. This means that variables declared within a block are not accessible outside of that block."
Blended is a variant of Jinja Templating language with strict scoping and type casting rules.,What is the difference between Blended and Jinja/Twig?,Blended is a variant of Jinja/Twig with strict scoping and type casting rules. This means that Blended has additional features and restrictions compared to Jinja/Twig.
Blended is a variant of Jinja Templating language with strict scoping and type casting rules.,Can variables be redefined in Blended?,"No, variables cannot be redefined in Blended. If a variable is declared within a block, it cannot be declared again within the same block."
Blended is a variant of Jinja Templating language with strict scoping and type casting rules.,What happens if a variable is used before it is defined in Blended?,"In Blended, using a variable before it is defined will result in a syntax error."
"In Jinja, values that are updated inside the for loop carry forward from iteration to iteration, but fall out of scope when the loop terminates. In Twig, values set inside the loop do not fall out of scope and persist after the for loop ends. Blended solves this problem by specifying specific scoping rules and enforcing them through the Blended-Lint program. These rules are constructed to ensure that a valid Blended template will execute in exactly the same way regardless of what Blended-compatible runtime is used, and to ensure that any template code that executes differently in the various Blended-compliant runtimes is rejected by Blended-Lint.",What is the purpose of the Blended-Lint program?,The Blended-Lint program is designed to enforce the specific scoping rules of Blended and ensure that any template code that executes differently in various Blended-compliant runtimes is rejected.
"In Jinja, values that are updated inside the for loop carry forward from iteration to iteration, but fall out of scope when the loop terminates. In Twig, values set inside the loop do not fall out of scope and persist after the for loop ends. Blended solves this problem by specifying specific scoping rules and enforcing them through the Blended-Lint program. These rules are constructed to ensure that a valid Blended template will execute in exactly the same way regardless of what Blended-compatible runtime is used, and to ensure that any template code that executes differently in the various Blended-compliant runtimes is rejected by Blended-Lint.",How does Blended-Lint ensure that a valid Blended template will execute in the same way regardless of the runtime?,Blended-Lint constructs rules to ensure that a valid Blended template will execute in exactly the same way regardless of what Blended-compatible runtime is used.
"In Jinja, values that are updated inside the for loop carry forward from iteration to iteration, but fall out of scope when the loop terminates. In Twig, values set inside the loop do not fall out of scope and persist after the for loop ends. Blended solves this problem by specifying specific scoping rules and enforcing them through the Blended-Lint program. These rules are constructed to ensure that a valid Blended template will execute in exactly the same way regardless of what Blended-compatible runtime is used, and to ensure that any template code that executes differently in the various Blended-compliant runtimes is rejected by Blended-Lint.",What happens to variables set inside a for loop in Twig?,"In Twig, variables set inside a for loop persist after the loop ends, unlike in Jinja where they fall out of scope when the loop terminates."
"For someone whose only objective is to write Blended-compatible templates for their website, knowing the below four points should be sufficient. Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments. Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa; Names defined inside parent or ancestor scopes cannot be overwritten or modified within child or descendant scopes--they are read-only; Names defined inside a scope are unavailable after the scope exits--they are local to that scope; Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.",Can a macro import macros from other files?,"Yes, a macro can import macros from other files."
"For someone whose only objective is to write Blended-compatible templates for their website, knowing the below four points should be sufficient. Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments. Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa; Names defined inside parent or ancestor scopes cannot be overwritten or modified within child or descendant scopes--they are read-only; Names defined inside a scope are unavailable after the scope exits--they are local to that scope; Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.",Can a macro access outside variables?,"No, a macro can only access outside variables as arguments."
"For someone whose only objective is to write Blended-compatible templates for their website, knowing the below four points should be sufficient. Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments. Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa; Names defined inside parent or ancestor scopes cannot be overwritten or modified within child or descendant scopes--they are read-only; Names defined inside a scope are unavailable after the scope exits--they are local to that scope; Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.",Can names defined inside parent or ancestor scopes be overwritten or modified within child or descendant scopes?,"No, names defined inside parent or ancestor scopes cannot be overwritten or modified within child or descendant scopes."
"For someone whose only objective is to write Blended-compatible templates for their website, knowing the below four points should be sufficient. Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments. Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa; Names defined inside parent or ancestor scopes cannot be overwritten or modified within child or descendant scopes--they are read-only; Names defined inside a scope are unavailable after the scope exits--they are local to that scope; Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.",Can names defined inside a scope be accessed after the scope exits?,"No, names defined inside a scope are unavailable after the scope exits."
"For someone whose only objective is to write Blended-compatible templates for their website, knowing the below four points should be sufficient. Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments. Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa; Names defined inside parent or ancestor scopes cannot be overwritten or modified within child or descendant scopes--they are read-only; Names defined inside a scope are unavailable after the scope exits--they are local to that scope; Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.","Can macros access built-in functions, user functions, and other macros defined inside the same scope?","Yes, the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope."
"As long as your template is accepted by Blended-Lint, it will be compatible.",What happens if a template is not accepted by Blended-Lint?,The template will not be compatible with Blended.
"All Blended code is comprised of static text that is (optionally) interspersed by tags. Tags are distinguished from static text through the use of three pairs of delimiters: “{%” and “%}”; “{{“ and “}}”; and “{#”, and “#}”.",What are the three pairs of delimiters used to distinguish tags from static text in Blended?,"The three pairs of delimiters used to distinguish tags from static text in Blended are {% and %}, {{ and }}, and {# and #}."
"All Blended code is comprised of static text that is (optionally) interspersed by tags. Tags are distinguished from static text through the use of three pairs of delimiters: “{%” and “%}”; “{{“ and “}}”; and “{#”, and “#}”.",Can static text be interspersed with tags in Blended?,"Yes, static text can be interspersed with tags in Blended."
"All Blended code is comprised of static text that is (optionally) interspersed by tags. Tags are distinguished from static text through the use of three pairs of delimiters: “{%” and “%}”; “{{“ and “}}”; and “{#”, and “#}”.",What is the purpose of using these delimiters in Blended?,"The purpose of using these delimiters in Blended is to clearly distinguish between static text and tags, allowing for the separation of logic and presentation in the code."
A tag that uses the delimiters “{%” and “%}” always begins its internal syntax with a name that identifies its purpose. This document refers to such tags as “named tags” or “named statement tags”;,What is the purpose of a named tag in Blended?,A named tag in Blended begins its internal syntax with a name that identifies its purpose.
A tag that uses the delimiters “{%” and “%}” always begins its internal syntax with a name that identifies its purpose. This document refers to such tags as “named tags” or “named statement tags”;,What are the delimiters used in Blended for named tags?,The delimiters used in Blended for named tags are {% and %}.
A tag that uses the delimiters “{%” and “%}” always begins its internal syntax with a name that identifies its purpose. This document refers to such tags as “named tags” or “named statement tags”;,What are named tags also known as in Blended?,Named tags are also known as named statement tags in Blended.
"Named tags are to be distinguished from “expression tags”, which use the “{{“ and “}}” delimiters, and “comment tags”, which use the “{#” and “#}” delimiters.",What is the difference between named tags and expression tags in Blended?,"Named tags are used to define variables or blocks of code, while expression tags are used to evaluate expressions and insert their results into the output."
"Named tags are to be distinguished from “expression tags”, which use the “{{“ and “}}” delimiters, and “comment tags”, which use the “{#” and “#}” delimiters.",What is the difference between named tags and comment tags in Blended?,"Named tags are used to define variables or blocks of code, while comment tags are used to add comments to the code that are not evaluated and do not appear in the output."
"Named tags are to be distinguished from “expression tags”, which use the “{{“ and “}}” delimiters, and “comment tags”, which use the “{#” and “#}” delimiters.",What are the delimiters used for named tags in Blended?,The delimiters used in Blended for named tags are {% and %}.
"Named tags are to be distinguished from “expression tags”, which use the “{{“ and “}}” delimiters, and “comment tags”, which use the “{#” and “#}” delimiters.",What are the delimiters used for expression tags in Blended?,Expression tags use the “{{” and “}}” delimiters.
"Named tags are to be distinguished from “expression tags”, which use the “{{“ and “}}” delimiters, and “comment tags”, which use the “{#” and “#}” delimiters.",What are the delimiters used for comment tags in Blended?,Comment tags use the “{#” and “#}” delimiters.
"“Statements” may consist of individual tags (for instance, the “set” statement), or they may be comprised of multiple tags (for instance, the “if” and “for” statements).",Can a statement in Blended consist of multiple tags?,"Yes, a statement in Blended may consist of multiple tags."
"“Statements” may consist of individual tags (for instance, the “set” statement), or they may be comprised of multiple tags (for instance, the “if” and “for” statements).",What are the individual tags that can be used in Blended?,"The individual tags that can be used in Blended include, but are not limited to, 'set', 'if', 'for',  'macro', 'block' etc."
"“Statements” may consist of individual tags (for instance, the “set” statement), or they may be comprised of multiple tags (for instance, the “if” and “for” statements).",Can a statement in Blended be nested within another statement?,"Yes, a statement in Blended can be nested within another statement, allowing for complex logic and structure."
"“Statements” may consist of individual tags (for instance, the “set” statement), or they may be comprised of multiple tags (for instance, the “if” and “for” statements).",What are the implications of using multiple tags in a statement in Blended?,"Using multiple tags in a statement in Blended allows for more complex logic and structure, enabling the creation of more dynamic and flexible templates."
"Statements are the control structures of Blended. They operate on the context and its data, each statement contributing to the final rendered output of a template.",What is the primary purpose of statements in Blended?,"Statements in Blended are the control structures that operate on the context and its data, contributing to the final rendered output of a template."
"Statements are the control structures of Blended. They operate on the context and its data, each statement contributing to the final rendered output of a template.",How do statements interact with the context in Blended?,"Statements in Blended interact with the context by accessing and modifying its data, which is essential for controlling the flow and content of the rendered output."
"When Blended code is parsed and compiled, the resultant template instance retains the ordered relationship of the static text to any statements contained within that text. If any named statement tag is immediately followed by a newline character, that character is removed from the template (with the exception of endverbatim tags).",What happens if a named statement tag is immediately followed by a newline character in a Blended template?,"The newline character is removed from the template, except for endverbatim tags."
"When Blended code is parsed and compiled, the resultant template instance retains the ordered relationship of the static text to any statements contained within that text. If any named statement tag is immediately followed by a newline character, that character is removed from the template (with the exception of endverbatim tags).",How does the rule affect the order of static text and statements in a Blended template?,The resultant template instance retains the ordered relationship of the static text to any statements contained within that text.
"When Blended code is parsed and compiled, the resultant template instance retains the ordered relationship of the static text to any statements contained within that text. If any named statement tag is immediately followed by a newline character, that character is removed from the template (with the exception of endverbatim tags).",How does the rule handle nested named statement tags in a Blended template?,"The rule does not specify how nested named statement tags should be handled, so they are treated as separate statements."
"Twelve (12) data types exist in Blended templates: strings, numbers, booleans, lists (array type), dictionaries (object type), functions, macros, modules, templates, pair lists, timestamps (datetime type), safe strings, and escaped strings.",What are the 12 data types in Blended templates?,"In Blended templates, the 12 data types are: strings, numbers, booleans, lists (array type), dictionaries (object type), functions, macros, modules, templates, pair lists, timestamps (datetime type), safe strings, and escaped strings."
"Twelve (12) data types exist in Blended templates: strings, numbers, booleans, lists (array type), dictionaries (object type), functions, macros, modules, templates, pair lists, timestamps (datetime type), safe strings, and escaped strings.",What is the difference between safe strings and escaped strings in Blended templates?,"Safe strings in Blended templates are those that are automatically escaped to prevent XSS (Cross-Site Scripting) attacks. Escaped strings, on the other hand, are those that are explicitly marked as safe and are not automatically escaped."
"Twelve (12) data types exist in Blended templates: strings, numbers, booleans, lists (array type), dictionaries (object type), functions, macros, modules, templates, pair lists, timestamps (datetime type), safe strings, and escaped strings.",What is the purpose of macros in Blended templates?,Macros in Blended templates are reusable blocks of code that can be called multiple times within a template. They are useful for creating complex logic and reducing redundancy.
"Strings, numbers, booleans, lists, and dictionaries (i.e. basic variable types) are added to a scope as literal values passed in as input to a tag, or by being part of the application-provided context. They can also be added to a scope as a transformation performed on other variable data via filters, or as the return values of functions, which may then be passed in as input to a tag.",Can variables be added to the scope as a transformation performed on other variable data via filters?,"Yes, variables can be added to the scope as a transformation performed on other variable data via filters."
"Strings, numbers, booleans, lists, and dictionaries (i.e. basic variable types) are added to a scope as literal values passed in as input to a tag, or by being part of the application-provided context. They can also be added to a scope as a transformation performed on other variable data via filters, or as the return values of functions, which may then be passed in as input to a tag.","Can variables be added to the scope as the return values of functions, which may then be passed in as input to a tag?","Yes, variables can be added to the scope as the return values of functions, which may then be passed in as input to a tag."
"Strings, numbers, booleans, lists, and dictionaries (i.e. basic variable types) are added to a scope as literal values passed in as input to a tag, or by being part of the application-provided context. They can also be added to a scope as a transformation performed on other variable data via filters, or as the return values of functions, which may then be passed in as input to a tag.","Can strings, numbers, booleans, lists, and dictionaries be added to the scope as literal values passed in as input to a tag?","Yes, strings, numbers, booleans, lists, and dictionaries can be added to the scope as literal values passed in as input to a tag."
"Strings, numbers, booleans, lists, and dictionaries (i.e. basic variable types) are added to a scope as literal values passed in as input to a tag, or by being part of the application-provided context. They can also be added to a scope as a transformation performed on other variable data via filters, or as the return values of functions, which may then be passed in as input to a tag.",Can variables be added to the scope as part of the application-provided context?,"Yes, variables can be added to the scope as part of the application-provided context."
"Pair lists, timestamps, templates, safe strings, and escaped strings (i.e. derived variable types) are added to a scope through transformations performed on core variable types via filters, or as the return values of functions, which may then be passed in as input to a tag.",What are the core variable types in Blended?,"The core variable types in Blended are not explicitly defined in the given rule. However, based on the rule, it seems that core variable types are the types that are not transformed or added to the scope through filters or functions."
"Pair lists, timestamps, templates, safe strings, and escaped strings (i.e. derived variable types) are added to a scope through transformations performed on core variable types via filters, or as the return values of functions, which may then be passed in as input to a tag.",What are the derived variable types in Blended?,"The derived variable types in Blended are Pair lists, timestamps, templates, safe strings, and escaped strings. These types are added to the scope through transformations performed on core variable types via filters, or as the return values of functions."
"Pair lists, timestamps, templates, safe strings, and escaped strings (i.e. derived variable types) are added to a scope through transformations performed on core variable types via filters, or as the return values of functions, which may then be passed in as input to a tag.",How are Pair lists added to the scope?,Pair lists are added to the scope through transformations performed on core variable types via filters.
"Pair lists, timestamps, templates, safe strings, and escaped strings (i.e. derived variable types) are added to a scope through transformations performed on core variable types via filters, or as the return values of functions, which may then be passed in as input to a tag.",How are timestamps added to the scope?,Timestamps are added to the scope through transformations performed on core variable types via filters.
"Pair lists, timestamps, templates, safe strings, and escaped strings (i.e. derived variable types) are added to a scope through transformations performed on core variable types via filters, or as the return values of functions, which may then be passed in as input to a tag.",How are templates added to the scope?,Templates are added to the scope through transformations performed on core variable types via filters.
"Functions are provided by the “environment” in the form of built-ins or user-functions, and cannot be overridden.",Can I define a function in my Blended code that has the same name as a built-in function?,"No, you cannot. In Blended, functions are provided by the environment and cannot be overridden."
"Functions are provided by the “environment” in the form of built-ins or user-functions, and cannot be overridden.",What happens if I try to define a function with the same name as a user-defined function?,"In Blended, functions are provided by the environment and cannot be overridden. Therefore, defining a function with the same name as a user-defined function will result in an error."
"Functions are provided by the “environment” in the form of built-ins or user-functions, and cannot be overridden.",Can I create a function that mimics the behavior of a built-in function without using the built-in function itself?,"Yes, you can create a function that mimics the behavior of a built-in function without using the built-in function itself. However, this is not recommended as it can lead to confusion and potential bugs."
"Functions are provided by the “environment” in the form of built-ins or user-functions, and cannot be overridden.",What if I want to extend the functionality of a built-in function in Blended?,"In Blended, functions are provided by the environment and cannot be overridden. Therefore, you cannot extend the functionality of a built-in function."
"Functions are provided by the “environment” in the form of built-ins or user-functions, and cannot be overridden.",Can I define a function that has the same name as a variable in my code?,"No, you cannot. In Blended, functions are provided by the environment and cannot be overridden. Therefore, defining a function with the same name as a variable will result in an error."
"Macros are added to a scope via the macro tag, or the from...import tag.",What is the purpose of the `macro` tag in Blended?,The `macro` tag is used to define a reusable block of code that can be called multiple times within the same scope.
"Macros are added to a scope via the macro tag, or the from...import tag.",How does the `from...import` tag work in Blended?,The `from...import` tag is used to import macros from other files or modules into the current scope.
"Macros are added to a scope via the macro tag, or the from...import tag.",Can macros be defined in a global scope in Blended?,"No, macros can only be defined within a specific scope, either by using the `macro` tag or the `from...import` tag."
"Macros are added to a scope via the macro tag, or the from...import tag.",Can macros be used to create loops or conditional statements in Blended?,"Yes, macros can be used to create loops or conditional statements by defining them with the appropriate logic."
Modules are added to a scope through the use of the import tag.,What is the purpose of the import tag in Blended?,"The import tag in Blended is used to add modules to a scope, allowing the modules to be used within the scope."
Modules are added to a scope through the use of the import tag.,Can a module be imported multiple times in the same scope?,"No, a module cannot be imported multiple times in the same scope. Each import adds the module to the scope once."
"Data is typically referenced and accessed by name. All data names occupy the same namespace. Any rules regarding names in general apply equally to variable names, function names, macro names and module names (i.e. to all data types). At any point in a file, the current namespace consists of the current scope (read-write), and all parent and ancestor scopes (read-only).",What happens if a variable is declared in a child scope and then accessed in a parent scope?,"In Blended, accessing a variable declared in a child scope from a parent scope is not allowed. This is because the current namespace consists of the current scope (read-write) and all parent and ancestor scopes (read-only)."
"Data is typically referenced and accessed by name. All data names occupy the same namespace. Any rules regarding names in general apply equally to variable names, function names, macro names and module names (i.e. to all data types). At any point in a file, the current namespace consists of the current scope (read-write), and all parent and ancestor scopes (read-only).",Can a function be defined within another function in Blended?,"Yes, functions can be defined within another function in Blended. However, the function defined within another function is only accessible within the scope of the parent function."
"Data is typically referenced and accessed by name. All data names occupy the same namespace. Any rules regarding names in general apply equally to variable names, function names, macro names and module names (i.e. to all data types). At any point in a file, the current namespace consists of the current scope (read-write), and all parent and ancestor scopes (read-only).",What happens if a macro is defined in a child scope and then accessed in a parent scope?,"In Blended, accessing a macro defined in a child scope from a parent scope is not allowed. This is because the current namespace consists of the current scope (read-write) and all parent and ancestor scopes (read-only)."
"Data is typically referenced and accessed by name. All data names occupy the same namespace. Any rules regarding names in general apply equally to variable names, function names, macro names and module names (i.e. to all data types). At any point in a file, the current namespace consists of the current scope (read-write), and all parent and ancestor scopes (read-only).",Does all data names occupy same namespace?,"Yes, all data names occupy same namespace"
"Data is typically referenced and accessed by name. All data names occupy the same namespace. Any rules regarding names in general apply equally to variable names, function names, macro names and module names (i.e. to all data types). At any point in a file, the current namespace consists of the current scope (read-write), and all parent and ancestor scopes (read-only).",What happens if a variable is declared in a child scope and then accessed in a sibling scope?,"In Blended, accessing a variable declared in a child scope from a sibling scope is not allowed. This is because the current namespace consists of the current scope (read-write) and all parent and ancestor scopes (read-only)."
"Tags, statements, segments and expressions are assessed top to bottom, left to right. Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.","What happens if a data name is referenced in a tag or expression that has not been defined within the current scope, within a parent scope, or within an ancestor scope?","The reference will result in an error or undefined behavior, as per the rule that data names must be defined within the current scope or within a parent or ancestor scope."
"Tags, statements, segments and expressions are assessed top to bottom, left to right. Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.","How does the rule handle nested scopes, such as when a function or block is defined within another function or block?","Nested scopes are supported, and data names defined within a nested scope are only accessible within that scope and its parent scopes. The rule does not allow access to data names from ancestor scopes unless explicitly passed as arguments."
"Tags, statements, segments and expressions are assessed top to bottom, left to right. Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.",What if a data name is defined in a parent scope and then redefined in a child scope with the same name?,Redefinition or Multiple declarations of data name is not allowed in Blended. 
"Tags, statements, segments and expressions are assessed top to bottom, left to right. Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.",How does the rule handle the use of variables and functions within tags or expressions?,Variables and functions defined within a tag or expression are only accessible within that tag or expression. They are not accessible outside of the tag or expression unless explicitly passed as arguments.
"Tags, statements, segments and expressions are assessed top to bottom, left to right. Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.",What if a data name is defined in a tag or expression and then used in another tag or expression within the same scope?,"The data name can be used in another tag or expression within the same scope, as long as it has been defined within that scope or within a parent or ancestor scope."
"“Block” scope works slightly differently in root templates (i.e. templates that do not extend any other template) and child and descendant templates (i.e. templates that contain the extends tag). In root templates, instances of the “block” scope will always be always evaluated by Blended-Lint as children of the “template” scope that contains it.",What is the difference between block scope in root templates and child templates in Blended?,"In root templates, instances of the block scope are always evaluated as children of the template scope that contains it. In child templates, block scope instances are evaluated as children of the block scope of the template that extends it."
"“Block” scope works slightly differently in root templates (i.e. templates that do not extend any other template) and child and descendant templates (i.e. templates that contain the extends tag). In root templates, instances of the “block” scope will always be always evaluated by Blended-Lint as children of the “template” scope that contains it.",How does the order of evaluation of block scope instances in Blended happens?,"The order of evaluation of block scope instances in Blended is determined by the order in which they are defined in the template. In root templates, the order is determined by the order of the block scope instances in the template. In child templates, the order is determined by the order of the block scope instances in the template that extends it."
"In child and descendant templates, a “block” scope instance will typically be evaluated twice by Blended-Lint. First, it will be evaluated on a stand-alone basis, as a child of the “render” scope. Second, it will be evaluated as a child of the root template’s “template” scope, in the same position as and in replacement of the block statement that shares its name.",What is the purpose of the double evaluation of a block scope in Blended?,The double evaluation of a block scope in Blended is to ensure that the block is evaluated in two different contexts: once as a child of the render scope and once as a child of the root template's template scope. This allows for more flexible and dynamic template rendering.
"In child and descendant templates, a “block” scope instance will typically be evaluated twice by Blended-Lint. First, it will be evaluated on a stand-alone basis, as a child of the “render” scope. Second, it will be evaluated as a child of the root template’s “template” scope, in the same position as and in replacement of the block statement that shares its name.",How does the double evaluation affect the scope of variables within a block?,"The double evaluation of a block scope in Blended does not affect the scope of variables within the block. Variables are scoped to the block itself, and their values are not shared between the two evaluations."
"In child and descendant templates, a “block” scope instance will typically be evaluated twice by Blended-Lint. First, it will be evaluated on a stand-alone basis, as a child of the “render” scope. Second, it will be evaluated as a child of the root template’s “template” scope, in the same position as and in replacement of the block statement that shares its name.",What happens if a block is not defined in the root template?,"If a block is not defined in the root template, it will not be evaluated in the second context. Instead, the block will be evaluated only once as a child of the render scope."
"However, it is permitted for a child template to define a block that is not found in the root or any ancestor; in such a case, only the first evaluation will be made.",Can a child template define a block that is not found in the root or any ancestor?,"Yes, it is permitted for a child template to define a block that is not found in the root or any ancestor."
"However, it is permitted for a child template to define a block that is not found in the root or any ancestor; in such a case, only the first evaluation will be made.","If a child template defines a block that is not found in the root or any ancestor, how many times will that block be evaluated?",Only the first evaluation will be made.
"Some block statement contents will be evaluated by Blended-Lint yet again if invoked by a parent tag inside a child block. If any “block” scope contains a parent tag, then the closest ancestor to contain a block statement with the same name is found, and that block is evaluated as a child of the original “block” scope at the position of the parent tag. If, however, no parent block statement is found, then the parent tag is ignored.",What happens if a parent tag inside a child block does not contain a block statement with the same name?,The parent tag is ignored.
"Some block statement contents will be evaluated by Blended-Lint yet again if invoked by a parent tag inside a child block. If any “block” scope contains a parent tag, then the closest ancestor to contain a block statement with the same name is found, and that block is evaluated as a child of the original “block” scope at the position of the parent tag. If, however, no parent block statement is found, then the parent tag is ignored.",How does the rule handle nested blocks with the same name?,The closest ancestor block with the same name is evaluated as a child of the original block scope.
"Some block statement contents will be evaluated by Blended-Lint yet again if invoked by a parent tag inside a child block. If any “block” scope contains a parent tag, then the closest ancestor to contain a block statement with the same name is found, and that block is evaluated as a child of the original “block” scope at the position of the parent tag. If, however, no parent block statement is found, then the parent tag is ignored.","What if a block statement is invoked by a parent tag inside a child block, and the parent block does not contain a block statement with the same name?",The parent tag is ignored.
"Some block statement contents will be evaluated by Blended-Lint yet again if invoked by a parent tag inside a child block. If any “block” scope contains a parent tag, then the closest ancestor to contain a block statement with the same name is found, and that block is evaluated as a child of the original “block” scope at the position of the parent tag. If, however, no parent block statement is found, then the parent tag is ignored.",Can a block statement be invoked by a parent tag inside a child block if the parent block contains a block statement with the same name?,"Yes, the closest ancestor block with the same name is evaluated as a child of the original block scope."
"Some block statement contents will be evaluated by Blended-Lint yet again if invoked by a parent tag inside a child block. If any “block” scope contains a parent tag, then the closest ancestor to contain a block statement with the same name is found, and that block is evaluated as a child of the original “block” scope at the position of the parent tag. If, however, no parent block statement is found, then the parent tag is ignored.","What if a block statement is invoked by a parent tag inside a child block, and the parent block contains multiple block statements with the same name?",The closest ancestor block with the same name is evaluated as a child of the original block scope.
"Nested blocks are treated in much the same way that parent blocks are. They are evaluated as direct children of the template scope at the position of the outer-most containing block. Then, the contents, as-evaluated, are inserted into the template at the position of the block block declaration. Nested blocks are not evaluated at the position of their containing block, and do not have access to any element of any other block scope, even the scope of a containing block.",What happens if a nested block is defined inside another nested block?,"The nested block is evaluated as a direct child of the template scope at the position of the outer-most containing block. Then, the contents, as-evaluated, are inserted into the template at the position of the block block declaration. Nested blocks are not evaluated at the position of their containing block, and do not have access to any element of any other block scope, even the scope of a containing block."
"Nested blocks are treated in much the same way that parent blocks are. They are evaluated as direct children of the template scope at the position of the outer-most containing block. Then, the contents, as-evaluated, are inserted into the template at the position of the block block declaration. Nested blocks are not evaluated at the position of their containing block, and do not have access to any element of any other block scope, even the scope of a containing block.",How does the scope of a nested block differ from that of a parent block?,"Nested blocks are not evaluated at the position of their containing block, and do not have access to any element of any other block scope, even the scope of a containing block."
"Nested blocks are treated in much the same way that parent blocks are. They are evaluated as direct children of the template scope at the position of the outer-most containing block. Then, the contents, as-evaluated, are inserted into the template at the position of the block block declaration. Nested blocks are not evaluated at the position of their containing block, and do not have access to any element of any other block scope, even the scope of a containing block.",Can a nested block access variables from its parent block?,"No, nested blocks do not have access to any element of any other block scope, even the scope of a containing block."
"Nested blocks are treated in much the same way that parent blocks are. They are evaluated as direct children of the template scope at the position of the outer-most containing block. Then, the contents, as-evaluated, are inserted into the template at the position of the block block declaration. Nested blocks are not evaluated at the position of their containing block, and do not have access to any element of any other block scope, even the scope of a containing block.",What happens if a nested block is defined inside a parent block?,"The nested block is evaluated as a direct child of the template scope at the position of the outer-most containing block. Then, the contents, as-evaluated, are inserted into the template at the position of the block block declaration. Nested blocks are not evaluated at the position of their containing block, and do not have access to any element of any other block scope, even the scope of a containing block."
"The order in which Blended-Lint evaluates blocks is important. First, all referenced templates are evaluated separately, including the root template. Then, the root template is evaluated, with each block being replaced by the block with the same name that is defined in the furthest descendant template.",What happens if a block is defined in multiple descendant templates?,The block is replaced by the block with the same name that is defined in the furthest descendant template.
"The order in which Blended-Lint evaluates blocks is important. First, all referenced templates are evaluated separately, including the root template. Then, the root template is evaluated, with each block being replaced by the block with the same name that is defined in the furthest descendant template.",How does Blended-Lint handle blocks defined in the root template?,"The root template is evaluated first, and each block is replaced by the block with the same name that is defined in the furthest descendant template."
"The order in which Blended-Lint evaluates blocks is important. First, all referenced templates are evaluated separately, including the root template. Then, the root template is evaluated, with each block being replaced by the block with the same name that is defined in the furthest descendant template.",What if a block is defined in a descendant template but not in the root template?,The block is not replaced by any block from the root template.
"The order in which Blended-Lint evaluates blocks is important. First, all referenced templates are evaluated separately, including the root template. Then, the root template is evaluated, with each block being replaced by the block with the same name that is defined in the furthest descendant template.",How does Blended-Lint handle blocks defined in the same template multiple times?,The block is replaced by the block with the same name that is defined in the furthest descendant template.
"The for...else statement’s loop scope (which is coincident with the contents of the template segment that follows the for tag, termed the “loop segment”) is assumed to be cleared upon each iteration; therefore, no value may be accessed at the top of a for statement’s loop segment that is set at the bottom of the loop segment.",What happens to variables set at the bottom of a for loop in Blended?,"Variables set at the bottom of a for loop in Blended are cleared upon each iteration, so they cannot be accessed at the top of the loop segment."
"The for...else statement’s loop scope (which is coincident with the contents of the template segment that follows the for tag, termed the “loop segment”) is assumed to be cleared upon each iteration; therefore, no value may be accessed at the top of a for statement’s loop segment that is set at the bottom of the loop segment.",Can I use a variable set at the bottom of a for loop in the loop segment?,"No, you cannot use a variable set at the bottom of a for loop in the loop segment because it is cleared upon each iteration."
"The for...else statement’s loop scope (which is coincident with the contents of the template segment that follows the for tag, termed the “loop segment”) is assumed to be cleared upon each iteration; therefore, no value may be accessed at the top of a for statement’s loop segment that is set at the bottom of the loop segment.",Can I use a variable set at the bottom of a for loop in the else block?,"Yes, you can use a variable set at the bottom of a for loop in the else block because the else block is executed after the loop, and the loop scope is cleared upon each iteration."
"The import tag adds a module to the current scope. The macros declared inside the imported file, and only those macros, are added as members of the module, accessible through dot notation. Because the imported template is independently evaluated by Blended-Lint prior to importation, it is ensured that all macros accessible via the module will be without conflict amongst themselves. All other contents of the imported template (including any variables set or macros or modules imported) are ignored and discarded upon import. Variable data (i.e. non-macro data) is not imported.",What happens if a macro in the imported file has the same name as a macro in the current scope?,"In Blended, if a macro in the imported file has the same name as a macro in the current scope, the macro in the imported file will overwrite the macro in the current scope."
"The import tag adds a module to the current scope. The macros declared inside the imported file, and only those macros, are added as members of the module, accessible through dot notation. Because the imported template is independently evaluated by Blended-Lint prior to importation, it is ensured that all macros accessible via the module will be without conflict amongst themselves. All other contents of the imported template (including any variables set or macros or modules imported) are ignored and discarded upon import. Variable data (i.e. non-macro data) is not imported.",Can I import a module multiple times in the same scope?,"No, in Blended, a module can only be imported once in the same scope. Importing a module multiple times will result in an error."
"The import tag adds a module to the current scope. The macros declared inside the imported file, and only those macros, are added as members of the module, accessible through dot notation. Because the imported template is independently evaluated by Blended-Lint prior to importation, it is ensured that all macros accessible via the module will be without conflict amongst themselves. All other contents of the imported template (including any variables set or macros or modules imported) are ignored and discarded upon import. Variable data (i.e. non-macro data) is not imported.",What happens if I import a module that contains a macro with the same name as a variable in the current scope?,"In Blended, if a macro in the imported file has the same name as a variable in the current scope, the macro will overwrite the variable."
"The import tag adds a module to the current scope. The macros declared inside the imported file, and only those macros, are added as members of the module, accessible through dot notation. Because the imported template is independently evaluated by Blended-Lint prior to importation, it is ensured that all macros accessible via the module will be without conflict amongst themselves. All other contents of the imported template (including any variables set or macros or modules imported) are ignored and discarded upon import. Variable data (i.e. non-macro data) is not imported.",Can I import a module that contains a variable with the same name as a macro in the current scope?,"Yes, in Blended, a module can contain a variable with the same name as a macro in the current scope. The variable will not overwrite the macro."
"The import tag adds a module to the current scope. The macros declared inside the imported file, and only those macros, are added as members of the module, accessible through dot notation. Because the imported template is independently evaluated by Blended-Lint prior to importation, it is ensured that all macros accessible via the module will be without conflict amongst themselves. All other contents of the imported template (including any variables set or macros or modules imported) are ignored and discarded upon import. Variable data (i.e. non-macro data) is not imported.",What happens if I import a module that contains a variable with the same name as a variable in the current scope?,"In Blended, if a variable in the imported file has the same name as a variable in the current scope, the variable in the imported file will overwrite the variable in the current scope."
"The from...import tag adds macro names to the current scope. Unlike the macro tag declaration, the macros added using from...import are not accessible from inside macros that are defined within the same scope. As mentioned above, if an import is required, a macro will need to contain the import instruction inside the “macro” scope itself.",What happens if a macro defined within the same scope imports a macro from another scope?,The macro from another scope is not accessible within the macro defined within the same scope.
"The from...import tag adds macro names to the current scope. Unlike the macro tag declaration, the macros added using from...import are not accessible from inside macros that are defined within the same scope. As mentioned above, if an import is required, a macro will need to contain the import instruction inside the “macro” scope itself.",Can a macro import a macro from a different file?,"Yes, a macro can import a macro from a different file, but the imported macro is not accessible within the macro that imports it."
"The from...import tag adds macro names to the current scope. Unlike the macro tag declaration, the macros added using from...import are not accessible from inside macros that are defined within the same scope. As mentioned above, if an import is required, a macro will need to contain the import instruction inside the “macro” scope itself.",What if a macro imports a macro that is also imported by another macro in the same scope?,The macro from the other scope is not accessible within the macro that imports it.
"The from...import tag adds macro names to the current scope. Unlike the macro tag declaration, the macros added using from...import are not accessible from inside macros that are defined within the same scope. As mentioned above, if an import is required, a macro will need to contain the import instruction inside the “macro” scope itself.",Can a macro import a macro that is defined in a different scope but not imported by any macro in the same scope?,"Yes, a macro can import a macro that is defined in a different scope but not imported by any macro in the same scope."
"The from...import tag adds macro names to the current scope. Unlike the macro tag declaration, the macros added using from...import are not accessible from inside macros that are defined within the same scope. As mentioned above, if an import is required, a macro will need to contain the import instruction inside the “macro” scope itself.",What if a macro imports a macro that is defined in the same scope but not imported by any macro in the same scope?,The macro from the same scope is not accessible within the macro that imports it.
"When any template file is imported--whether it is imported using the from...import tag or the import tag--that file is evaluated without having any reference to the current namespace that contains the tag. The imported file shares the “built-in” scope and the “user-function” scope of the master template, but it is provided with an empty “application” scope before it is evaluated.",What is the scope of the imported template file in Blended?,"The imported template file shares the 'built-in' scope and the 'user-function' scope of the master template, but it is provided with an empty 'application' scope before it is evaluated."
"When any template file is imported--whether it is imported using the from...import tag or the import tag--that file is evaluated without having any reference to the current namespace that contains the tag. The imported file shares the “built-in” scope and the “user-function” scope of the master template, but it is provided with an empty “application” scope before it is evaluated.",How does the imported template file interact with the current namespace?,The imported template file is evaluated without having any reference to the current namespace that contains the tag.
"When any template file is imported--whether it is imported using the from...import tag or the import tag--that file is evaluated without having any reference to the current namespace that contains the tag. The imported file shares the “built-in” scope and the “user-function” scope of the master template, but it is provided with an empty “application” scope before it is evaluated.",What is the purpose of the 'application' scope in the imported template file?,"The 'application' scope is provided to the imported template file before it is evaluated, but it is empty."
"When any template file is imported--whether it is imported using the from...import tag or the import tag--that file is evaluated without having any reference to the current namespace that contains the tag. The imported file shares the “built-in” scope and the “user-function” scope of the master template, but it is provided with an empty “application” scope before it is evaluated.",Can the imported template file access variables from the master template?,"No, the imported template file does not have access to variables from the master template."
"When any template file is imported--whether it is imported using the from...import tag or the import tag--that file is evaluated without having any reference to the current namespace that contains the tag. The imported file shares the “built-in” scope and the “user-function” scope of the master template, but it is provided with an empty “application” scope before it is evaluated.",How does the 'built-in' scope differ from the 'user-function' scope in the imported template file?,"The 'built-in' scope includes predefined functions and variables that are available to all templates, while the 'user-function' scope includes functions and variables that are defined in the master template."
The include tag makes no modification to any scope of the master template; it neither adds nor modifies any object. The include tag simply renders the referenced template in place.,What happens if I include a template that contains variables that are not defined in the master template?,"The included template will not render those variables, and they will not affect the scope of the master template."
The include tag makes no modification to any scope of the master template; it neither adds nor modifies any object. The include tag simply renders the referenced template in place.,Can I include a template that has a different scope than the master template?,"Yes, the included template will have its own scope, and it will not affect the scope of the master template."
The include tag makes no modification to any scope of the master template; it neither adds nor modifies any object. The include tag simply renders the referenced template in place.,What if I include a template that has a function that modifies a variable in the master template?,The included template will not modify the variable in the master template. The function will only affect the scope of the included template.
The include tag makes no modification to any scope of the master template; it neither adds nor modifies any object. The include tag simply renders the referenced template in place.,Can I include a template that has a loop that modifies a variable in the master template?,The included template will not modify the variable in the master template. The loop will only affect the scope of the included template.
The include tag makes no modification to any scope of the master template; it neither adds nor modifies any object. The include tag simply renders the referenced template in place.,What if I include a template that has a conditional statement that modifies a variable in the master template?,The included template will not modify the variable in the master template. The conditional statement will only affect the scope of the included template.
"An included template shares the “built-in” scope and the “user-function” scope of the template from which it has been referenced (i.e. the master template). The “application” scope of the included template varies depending on whether or not the only keyword is present inside the include tag. If the only keyword is present, then the “application” scope of the included template is populated only by the dictionary passed in using the with keyword (if present). If the only keyword is missing, then the “application” scope for the included template is populated by the master template’s entire namespace at the point of the include template’s evaluation, optionally updated and overwritten by the contents of the dictionary passed into the import tag using the with keyword. Below the level of the “application” scope (starting with the “template” scope), each imported template is to be analyzed as per the rules described herein, as if it were a standalone template.",What is the scope of the 'built-in' scope in Blended?,The 'built-in' scope includes all the built-in variables and functions available in Jinja/Twig.
"An included template shares the “built-in” scope and the “user-function” scope of the template from which it has been referenced (i.e. the master template). The “application” scope of the included template varies depending on whether or not the only keyword is present inside the include tag. If the only keyword is present, then the “application” scope of the included template is populated only by the dictionary passed in using the with keyword (if present). If the only keyword is missing, then the “application” scope for the included template is populated by the master template’s entire namespace at the point of the include template’s evaluation, optionally updated and overwritten by the contents of the dictionary passed into the import tag using the with keyword. Below the level of the “application” scope (starting with the “template” scope), each imported template is to be analyzed as per the rules described herein, as if it were a standalone template.",How does the 'user-function' scope work in Blended?,The 'user-function' scope includes all the user-defined functions and variables available in the template from which the included template was referenced.
"An included template shares the “built-in” scope and the “user-function” scope of the template from which it has been referenced (i.e. the master template). The “application” scope of the included template varies depending on whether or not the only keyword is present inside the include tag. If the only keyword is present, then the “application” scope of the included template is populated only by the dictionary passed in using the with keyword (if present). If the only keyword is missing, then the “application” scope for the included template is populated by the master template’s entire namespace at the point of the include template’s evaluation, optionally updated and overwritten by the contents of the dictionary passed into the import tag using the with keyword. Below the level of the “application” scope (starting with the “template” scope), each imported template is to be analyzed as per the rules described herein, as if it were a standalone template.",What is the 'application' scope in Blended?,"The 'application' scope is populated by the master template's entire namespace at the point of the include template's evaluation, optionally updated and overwritten by the contents of the dictionary passed into the import tag using the with keyword."
"An included template shares the “built-in” scope and the “user-function” scope of the template from which it has been referenced (i.e. the master template). The “application” scope of the included template varies depending on whether or not the only keyword is present inside the include tag. If the only keyword is present, then the “application” scope of the included template is populated only by the dictionary passed in using the with keyword (if present). If the only keyword is missing, then the “application” scope for the included template is populated by the master template’s entire namespace at the point of the include template’s evaluation, optionally updated and overwritten by the contents of the dictionary passed into the import tag using the with keyword. Below the level of the “application” scope (starting with the “template” scope), each imported template is to be analyzed as per the rules described herein, as if it were a standalone template.",What happens if the only keyword is present in the include tag?,"If the only keyword is present in the include tag, the 'application' scope of the included template is populated only by the dictionary passed in using the with keyword."
"An included template shares the “built-in” scope and the “user-function” scope of the template from which it has been referenced (i.e. the master template). The “application” scope of the included template varies depending on whether or not the only keyword is present inside the include tag. If the only keyword is present, then the “application” scope of the included template is populated only by the dictionary passed in using the with keyword (if present). If the only keyword is missing, then the “application” scope for the included template is populated by the master template’s entire namespace at the point of the include template’s evaluation, optionally updated and overwritten by the contents of the dictionary passed into the import tag using the with keyword. Below the level of the “application” scope (starting with the “template” scope), each imported template is to be analyzed as per the rules described herein, as if it were a standalone template.",What happens if the only keyword is missing in the include tag?,"If the only keyword is missing in the include tag, the 'application' scope for the included template is populated by the master template’s entire namespace at the point of the include template’s evaluation, optionally updated and overwritten by the contents of the dictionary passed into the import tag using the with keyword."
"No template containing block tags or an extends tag may be imported with the import tag or from...import tag, nor included with the include tag.",Can I import a template that contains block tags or an extends tag in Blended?,"No, you cannot import a template that contains block tags or an extends tag in Blended."
"No template containing block tags or an extends tag may be imported with the import tag or from...import tag, nor included with the include tag.",Can I import a template using the `from...import` tag in Blended?,"No, you cannot import a template using the `from...import` tag in Blended."
"No template containing block tags or an extends tag may be imported with the import tag or from...import tag, nor included with the include tag.",Can I include a template that contains block tags or an extends tag in Blended?,"No, you cannot include a template that contains block tags or an extends tag in Blended."
"No template containing block tags or an extends tag may be imported with the import tag or from...import tag, nor included with the include tag.",Can I import a template using the `import` tag in Blended?,"No, you cannot import a template using the `import` tag in Blended."
"No template containing block tags or an extends tag may be imported with the import tag or from...import tag, nor included with the include tag.",Can I include a template using the `include` tag in Blended?,"Yes, you can include a template using the `include` tag in Blended."
"The “block”, “super”, “_”, “on”, “off” and “forloop” variable names are treated as reserved keywords that may not be used as variable names, nor accessed within expressions (with the exception of the “forloop” dictionary being referenced inside the “loop” scope). Certain function names are also reserved. Specifically, “super” and “_” are reserved as function names and may not be used by user functions or macros. “True”, “true”, “False” and “false” are similarly reserved.",Can I use the keyword 'block' as a variable name in Blended?,"No, 'block' is a reserved keyword and cannot be used as a variable name."
"The “block”, “super”, “_”, “on”, “off” and “forloop” variable names are treated as reserved keywords that may not be used as variable names, nor accessed within expressions (with the exception of the “forloop” dictionary being referenced inside the “loop” scope). Certain function names are also reserved. Specifically, “super” and “_” are reserved as function names and may not be used by user functions or macros. “True”, “true”, “False” and “false” are similarly reserved.",Can I use the keyword 'super' as a function name in Blended?,"No, 'super' is a reserved function name and cannot be used by user functions or macros."
"The “block”, “super”, “_”, “on”, “off” and “forloop” variable names are treated as reserved keywords that may not be used as variable names, nor accessed within expressions (with the exception of the “forloop” dictionary being referenced inside the “loop” scope). Certain function names are also reserved. Specifically, “super” and “_” are reserved as function names and may not be used by user functions or macros. “True”, “true”, “False” and “false” are similarly reserved.",Can I use the keyword 'on' as a variable name in Blended?,"No, 'on' is a reserved keyword and cannot be used as a variable name."
"The “block”, “super”, “_”, “on”, “off” and “forloop” variable names are treated as reserved keywords that may not be used as variable names, nor accessed within expressions (with the exception of the “forloop” dictionary being referenced inside the “loop” scope). Certain function names are also reserved. Specifically, “super” and “_” are reserved as function names and may not be used by user functions or macros. “True”, “true”, “False” and “false” are similarly reserved.",Can I use the keyword 'off' as a variable name in Blended?,"No, 'off' is a reserved keyword and cannot be used as a variable name."
"The “block”, “super”, “_”, “on”, “off” and “forloop” variable names are treated as reserved keywords that may not be used as variable names, nor accessed within expressions (with the exception of the “forloop” dictionary being referenced inside the “loop” scope). Certain function names are also reserved. Specifically, “super” and “_” are reserved as function names and may not be used by user functions or macros. “True”, “true”, “False” and “false” are similarly reserved.",Can I use the keyword 'forloop' as a variable name in Blended?,"Yes, 'forloop' is a reserved keyword and can be used as a variable name, but it is only accessible within the scope of the 'loop' block."
"If schema and user-function definition files are not provided, then two things are assumed by the lint: (1) any variable that is accessed by a tag or expression that has not previously been set is assumed to belong to the application scope; and (2) any function/macro that is called that has not previously been imported via from...import or declared via macro is assumed to be a function belonging to the user-function scope.",What happens if a variable is accessed in a tag or expression without being set anywhere in the file?,The variable is assumed to belong to the application scope.
"If schema and user-function definition files are not provided, then two things are assumed by the lint: (1) any variable that is accessed by a tag or expression that has not previously been set is assumed to belong to the application scope; and (2) any function/macro that is called that has not previously been imported via from...import or declared via macro is assumed to be a function belonging to the user-function scope.","If a function is called in a tag or expression without being imported or declared, what happens?",The function is assumed to be a function belonging to the user-function scope.
"If schema and user-function definition files are not provided, then two things are assumed by the lint: (1) any variable that is accessed by a tag or expression that has not previously been set is assumed to belong to the application scope; and (2) any function/macro that is called that has not previously been imported via from...import or declared via macro is assumed to be a function belonging to the user-function scope.",What if a variable is accessed in a tag or expression that is set in a user-function scope?,The variable is still assumed to belong to the application scope.
"If schema and user-function definition files are not provided, then two things are assumed by the lint: (1) any variable that is accessed by a tag or expression that has not previously been set is assumed to belong to the application scope; and (2) any function/macro that is called that has not previously been imported via from...import or declared via macro is assumed to be a function belonging to the user-function scope.",What if a function is called in a tag or expression that is declared in a user-function scope?,The function is still assumed to be a function belonging to the user-function scope.
"If schema and user-function definition files are not provided, then two things are assumed by the lint: (1) any variable that is accessed by a tag or expression that has not previously been set is assumed to belong to the application scope; and (2) any function/macro that is called that has not previously been imported via from...import or declared via macro is assumed to be a function belonging to the user-function scope.",What if a variable is accessed in a tag or expression that is set in the application scope but not in the user-function scope?,The variable is still assumed to belong to the application scope.
"With regards to any template inserted via the include tag: FIRST, an isolated semantic analysis is performed on the included template; then, SECOND, semantic analysis is performed on the master template, whereupon reaching the include tag it is determined whether or not the included template’s application scope expectation is satisfied by the values being passed into that template by the master template.",What happens if the included template's scope expectation is not satisfied by the values passed into the master template?,"The included template will not be applied, and the master template will continue to execute as if the include tag were not present."
"With regards to any template inserted via the include tag: FIRST, an isolated semantic analysis is performed on the included template; then, SECOND, semantic analysis is performed on the master template, whereupon reaching the include tag it is determined whether or not the included template’s application scope expectation is satisfied by the values being passed into that template by the master template.",What is the flow of analysis when a template is included?,"With regards to any template inserted via the include tag: FIRST, an isolated semantic analysis is performed on the included template; then, SECOND, semantic analysis is performed on the master template, whereupon reaching the include tag it is determined whether or not the included template’s application scope expectation is satisfied by the values being passed into that template by the master template."
"With regards to any template inserted via the include tag: FIRST, an isolated semantic analysis is performed on the included template; then, SECOND, semantic analysis is performed on the master template, whereupon reaching the include tag it is determined whether or not the included template’s application scope expectation is satisfied by the values being passed into that template by the master template.",Can the master template pass variables to the included template that are not defined in the included template?,"Yes, the master template can pass variables to the included template, but these variables must be defined in the included template's scope or be passed as arguments to the include tag."
"With regards to any template inserted via the include tag: FIRST, an isolated semantic analysis is performed on the included template; then, SECOND, semantic analysis is performed on the master template, whereupon reaching the include tag it is determined whether or not the included template’s application scope expectation is satisfied by the values being passed into that template by the master template.",What happens if the included template is not found or cannot be loaded?,"The master template will not apply the included template, and the error will be reported, preventing the master template from continuing to execute."
"An included template’s application scope expectation is defined by that file’s schema-definition and user-function-definition files if they exist; if they don’t exist, it is defined as all of the “application” and “user-function” scoped values consumed and required by that template in its execution. If the only keyword IS USED in the include tag, then the included template’s application scope expectation is only compared to whatever values are supplied using the include tag’s with argument, to determine if they are sufficient. However, if the only keyword IS NOT USED in the include tag, the contents of the current scope, plus whatever values are supplied using the include tag’s with argument, are compared to the included template’s application scope expectation.",What happens if a template does not have a schema-definition or user-function-definition file?,"If a template does not have a schema-definition or user-function-definition file, its application scope expectation is defined as all of the 'application' and 'user-function' scoped values consumed and required by that template in its execution."
"An included template’s application scope expectation is defined by that file’s schema-definition and user-function-definition files if they exist; if they don’t exist, it is defined as all of the “application” and “user-function” scoped values consumed and required by that template in its execution. If the only keyword IS USED in the include tag, then the included template’s application scope expectation is only compared to whatever values are supplied using the include tag’s with argument, to determine if they are sufficient. However, if the only keyword IS NOT USED in the include tag, the contents of the current scope, plus whatever values are supplied using the include tag’s with argument, are compared to the included template’s application scope expectation.",How does the inclusion of a template with only the 'IS USED' keyword affect the scope comparison?,"If the only keyword used in the include tag is 'IS USED', the included template's application scope expectation is only compared to whatever values are supplied using the include tag's 'with' argument, to determine if they are sufficient."
"An included template’s application scope expectation is defined by that file’s schema-definition and user-function-definition files if they exist; if they don’t exist, it is defined as all of the “application” and “user-function” scoped values consumed and required by that template in its execution. If the only keyword IS USED in the include tag, then the included template’s application scope expectation is only compared to whatever values are supplied using the include tag’s with argument, to determine if they are sufficient. However, if the only keyword IS NOT USED in the include tag, the contents of the current scope, plus whatever values are supplied using the include tag’s with argument, are compared to the included template’s application scope expectation.",What happens if the only keyword is NOT used in the include tag?,"If the only keyword is NOT used in the include tag, the contents of the current scope, plus whatever values are supplied using the include tag's 'with' argument, are compared to the included template's application scope expectation."
"An included template’s application scope expectation is defined by that file’s schema-definition and user-function-definition files if they exist; if they don’t exist, it is defined as all of the “application” and “user-function” scoped values consumed and required by that template in its execution. If the only keyword IS USED in the include tag, then the included template’s application scope expectation is only compared to whatever values are supplied using the include tag’s with argument, to determine if they are sufficient. However, if the only keyword IS NOT USED in the include tag, the contents of the current scope, plus whatever values are supplied using the include tag’s with argument, are compared to the included template’s application scope expectation.",What if a template has both a schema-definition and a user-function-definition file?,"If a template has both a schema-definition and a user-function-definition file, its application scope expectation is defined by those files."
"An included template’s application scope expectation is defined by that file’s schema-definition and user-function-definition files if they exist; if they don’t exist, it is defined as all of the “application” and “user-function” scoped values consumed and required by that template in its execution. If the only keyword IS USED in the include tag, then the included template’s application scope expectation is only compared to whatever values are supplied using the include tag’s with argument, to determine if they are sufficient. However, if the only keyword IS NOT USED in the include tag, the contents of the current scope, plus whatever values are supplied using the include tag’s with argument, are compared to the included template’s application scope expectation.",How does the inclusion of a template with a 'with' argument affect the scope comparison?,"The inclusion of a template with a 'with' argument allows the user to provide specific values for the template's scope, which are then compared to the template's application scope expectation."
If no schema-definition or user-function-definition files are provided for the master template--and by implication if the application scope is to be dynamically calculated for the master template--then the application scope expectation of the included template is accreted to the application scope of the master template.,What happens if a master template does not have a schema-definition or user-function-definition file?,The application scope expectation of the included template is accreted to the application scope of the master template.
If no schema-definition or user-function-definition files are provided for the master template--and by implication if the application scope is to be dynamically calculated for the master template--then the application scope expectation of the included template is accreted to the application scope of the master template.,How does this rule affect the dynamic calculation of the application scope for the master template?,"If the application scope is to be dynamically calculated for the master template, then the rule applies."
If no schema-definition or user-function-definition files are provided for the master template--and by implication if the application scope is to be dynamically calculated for the master template--then the application scope expectation of the included template is accreted to the application scope of the master template.,What if the master template has both schema-definition and user-function-definition files?,The rule does not apply in this case.
If no schema-definition or user-function-definition files are provided for the master template--and by implication if the application scope is to be dynamically calculated for the master template--then the application scope expectation of the included template is accreted to the application scope of the master template.,Can the application scope of the included template be modified by the master template?,"No, the application scope of the included template is accreted to the application scope of the master template."
If no schema-definition or user-function-definition files are provided for the master template--and by implication if the application scope is to be dynamically calculated for the master template--then the application scope expectation of the included template is accreted to the application scope of the master template.,What if the included template does not have a schema-definition or user-function-definition file?,The application scope expectation of the included template is accreted to the application scope of the master template.