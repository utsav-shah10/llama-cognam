"dependency":
-   "bases":
        "base": |
            <html>
            <body>
            {% block content %}<p>Parent Content</p>{% endblock %}
            </body>
            </html>
        "block_scope": |
            <!DOCTYPE html>
            <html>
                <head>
                    {% block head %}
                        <link rel="stylesheet" href="style.css" />
                        <title>{% block title %}{% endblock %} - My Webpage</title>
                    {% endblock %}
                </head>
                <body>
                    <div id="content">{% block content %}{% endblock %}</div>
                    <div id="footer">
                        {% block footer %}
                            &copy; Copyright 2011 by <a href="http://domain.invalid/">you</a>.
                        {% endblock %}
                    </div>
                </body>
            </html>
        "block_scope2": |
            {% block one %}{% endblock %}
            {% block two %}{% endblock %}
        "block_scoping2": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {% set value=45 %}
            {{ value }}
            {% endblock %}

            {% block second %}
            --second block--
            {% set value=25 %}
            {{value}}
            {% endblock %}

            {% block third %}
            --third block--
            {% set value=35 %}
            {{value}}
            {% endblock %}
        "block_scoping3": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {{ value }}
            {{ variable }}
            {% endblock %}

            {% block second %}
            --second block--
            {% set variable=25 %}
            {% endblock %}

            {% block third %}
            --third block--
            {% set value=35 %}
            {{value}}
            {% set variable=45%}
            {% endblock %}
        "block_scoping3_01": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {{ value }}
            {{ variable }}
            {% endblock %}
        "block_scoping3_02": |
            {% set variable=25 %}
            {% block second %}
            --second block--
            {% endblock %}
        "block_scoping3_03": |
            {% set value=35 %}
            {% block third %}
            --third block--
            {{value}}
            {% endblock %}
        "block_scoping_new": |
            {% set value = "base" %}
            {% block container %}{% endblock %}
        "block_scoping_test": |
            {% set variable=100 %}

            {% block first %}
            {{ variable }}
            {% endblock %}

            {% block second %}
            {% set variable=25 %}
            {% endblock %}

            {% block third %}
            {% set variable=45%}
            {% endblock %}
        "block_scoping_test_01": |
            {% set variable=100 %}

            {% block first %}
            {{ variable }}
            {% endblock %}
        "block_scoping_test_02": |
            {% set variable=100 %}

            {% block second %}
            {% endblock %}
        "block_scoping_test_03": |
            {% set variable=100 %}

            {% block third %}
            {% endblock %}
        "check": |
            <html>
            <body>


            {% block first %}
            {% endblock %}


            </body>
            </html>
        "check_child_scope": |
            <html>
            <body>
            {% block content %}
            {% set greeting = 'Hello !' %}
            {{ greeting }} this is the parent
            {% endblock %}
            </body>
            </html>
        "extend_using_nestedBlock": |
            <html>
            <head>
            {% block content %}
            {{ "This is Root's content" }}
            {% endblock %}
            </head>
            <body>
            {% block inner %}
            {{ "This is from Root's inner" }}
            {% endblock %}
            </body>
            </html>
        "inner": |
            <html>
            {% block content %}
            <body>
            {% block inner%}{% endblock %}
            </body>
            {% endblock %}
            </html>
        "macro": |
            {% macro parent_macro() %}<p>Parent Macro</p>{% endmacro %}
            {% block content %}{% endblock %}
        "main_base": |
            {% block container %}
            base container base
            {% block outer %}
            base outer base
            {% block inner1 %}
            base inner base
            {% endblock %}
            {% endblock %}
            {% endblock %}
        "mid_base1": |
            {% extends "bases/main_base.html" %}
            {% block outer %}
            block outer mid1
            {% block inner2 %}
            block inner2 mid1
            {% parent %}
            {% endblock %}
            {% endblock %}
        "mid_base2": |
            {% extends "bases/main_base.html" %}
            {% block inner1 %}
            block inner1 mid2
            {% endblock %}
        "multiple": |
            {% extends bases.base|template %}
            {% block content %}
            <p>This is content from the template "multiple.html"</p>
            {% endblock %}
        "out": |+
            {% block first_block %}
            {% endblock %}
            {% block second_block %}
            {% set value=200 %}
            {% endblock %}
            {% block third_block %}
            {{ value}}
            {% endblock %}
            {% block variable_block %}
            Hello {{ var }}
            {% endblock %}

        "parent": |
            {% set val=45 %}
            {% block variable_block %}
            {{ val }}
            {% endblock %}
            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent2": |
            {% set val=45 %}
            {% block variable_block %}
            {{ val }}
            {% endblock %}

            {% block new_block %}
            this is parent block
            {% endblock %}
        "parent3": |
            {% set val=45 %}
            {% block variable_block %}
            {% print val %}
            {% endblock %}
            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent4": |
            {% set val=45 %}
            {% block variable_block %}
            {% print val %}
            {% endblock %}

            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent_autoescape2": |
            {% autoescape false %}
            <html>
            {% block test %}{% set parenthtml = "<h1>Parent</h1>" %}{{ parenthtml }}{% endblock %}
            </html>
            {% endautoescape %}
        "parent_template": |
            {% block k %}
            {% set var = 'parent' %}
            {% endblock %}
        "parent_template2": |
            {% set val = 'parent' %}{% block k %}{% set val = 'inner' %}{% endblock %}{{ val }}
        "path": |-
            bases/base.html
        "path2": |
            bases/base.html
        "root": |
            {% set value=15 %}
            {% block new_block %}
            {{ var }}
            {% endblock %}
        "super": |
            {% block variable_block %}
            {{ var }}
            parent block
            {% endblock %}
        "test_bases_eof": "{% block content %}{% endblock %}\r\n"
        "value_set": |
            {% set value = 20 %}
            {% block test %}
            {{ value }}
            {% endblock %}
    "includes":
        "chain": |
            {% include includes.with|template with { "argument" : argument, "value" : 42 } only %}
        "child": |
            {{ upper('string was in lower') }}
        "child2": |
            {% set value = 25 %}
            Included Template
        "colormacro": |4

            {% macro avgcolor(color1, color2) -%}
                {%- set color1 = rgbcolor(color1) -%}
                {%- set color2 = rgbcolor(color2) -%}
                {%- set coloravg = [
                    mean([color1[0], color2[0]]),
                    mean([color1[1], color2[1]]),
                    mean([color1[2], color2[2]])
                ] -%}
                {{ hexcolor(coloravg) }}
            {%- endmacro %}

            {% macro lighten(color, fraction) -%}
                {%- set color = rgbcolor(color) -%}
                {%- set add_white = 255 * fraction -%}
                {%- set new_r = color[0] + add_white -%}
                {%- set new_g = color[1] + add_white -%}
                {%- set new_b = color[2] + add_white -%}
                {%- if new_r > 255 %}{% set new_r = 255 %}{% endif -%}
                {%- if new_g > 255 %}{% set new_g = 255 %}{% endif -%}
                {%- if new_b > 255 %}{% set new_b = 255 %}{% endif -%}
                {{ hexcolor([new_r, new_g, new_b]) }}
            {%- endmacro %}

            {% macro darken(color, fraction) -%}
                {%- set color = rgbcolor(color) -%}
                {%- set darkcolor = [
                    color[0] - (color[0] * fraction),
                    color[1] - (color[1] * fraction),
                    color[2] - (color[2] * fraction),
                ] -%}
                {{ hexcolor(darkcolor) }}
            {%- endmacro %}
        "eof_test": |+
            This included file contains a extra new line at the EOF given by user apart from hidden newline character.

        "eof_test10": |
            this is a new file
            this is a new file
        "eof_test11": |-
            this is a new file
        "eof_test2": |
            This included file contains hidden newline character only at the EOF.
        "eof_test3": "This included file contains a tab given by user apart from a\
            \ hidden newline character at the EOF.\t\n"
        "eof_test4": "This included file contains a Carriage return and newline as\
            \ used in windows os ('\\r\\n') at the EOF.\r\n"
        "eof_test5": "This included file contains a Carriage return as used in Mac\
            \ os ('\\r') at the EOF.\r"
        "eof_test6": "This included file contains multiple Carriage return as used\
            \ in Mac os ('\\r\\r') at the EOF.\r\r"
        "eof_test7": |-
            this included file is created by echo command of linux.
        "eof_test8": |
            this included file is contains comment tags at the EOF.{# #}
        "eof_test9": |
            This included file contains newline character at the EOF.
        "example_file": |-
            path file is created by echo command of linux
        "example_file2": |
            path file is created by Text Editor tool
        "faker": |
            FAKER!
        "forautoescape": |
            <h1>autoescape</h1>
        "has_hello": |
            {% macro hello() %}
            Hello included!
            {% endmacro %}
        "has_macro": |
            {% macro from_inside(var) %}{{var}}{% endmacro %}
            {% print from_inside(42) %}
        "include_path": |-
            include/example_file.html
        "include_path2": |
            include/example_file2.html
        "macro_call": |+
            {% print hello("hello world") %}

        "macro_call2": |
            {% macro test() %}
               "hello this included file macro"
            {% endmacro %}
        "macro_within_macro": |
            {% macro test() %}
            {% print hello() %}
            "this is included macro"
            {% endmacro %}
            {% print test() %}
        "macro_within_macro2": |
            {% macro test() %}
            {% print hello() %}
            "this is included macro"
            {% endmacro %}
        "macro_within_macro3": |
            {% print hello() %}
            {% macro test() %}
            "this is included macro"
            {% endmacro %}
            {% print test() %}
        "module": "{% macro macro1() %}\r\nmacro1 imported!\r\n{% endmacro %}\r\n\
            {% macro macro2() %}\r\nmacro2 imported!\r\n{% endmacro %}\r\n"
        "name_snippet": |+
            {% set greeting = "< in-built filter e is used >" %}
            {{ greeting|e }}
            {% print round(10.6) %}

            {% macro hello() %}
            "this is user functions"
            {% endmacro %}
            {% print hello() %}

        "new_macro_call": |+
            {{ hello("hello world") }}

        "new_macro_within_macro2": |
            {% macro test() %}
            {{ hello() }}
            "this is included macro"
            {% endmacro %}
        "newline_test": |
            This is included File.
        "newline_test2": |
            This is included File.

            {% set var = "Hello World!" %}
            {% print var %} After include Tag new Line goes Here--->
        "scope": |
            {% set defined_outside = "inside" %}
            {% set defined_inside = "inside" %}
        "scope2": |
            {% set value = 24 %}
            {{ variable }}
        "scope_test": |
            These parens contain a variable from external scope: ({{ variable }})
        "string": |
            This text is loaded as a string.
        "template": |
            {% set var = 22 %}
        "value_call": |
            {{ value }}
        "variable": |
            This text is included via the context as a variable.
        "with": |
            There are two values that are added to the context: {{ argument }}, {{ value }}.
"overview": "The {% extends %} tag is the key here. It tells the template engine that\
    \ this template \u201Cextends\u201D another template. When the template system\
    \ evaluates this template, it first locates the parent. The extends tag should\
    \ be the first tag in the template. "
"tests":
-   "data": |
        {}
    "desc": |-
        Templates should be able to extend other templates found in the filesystem; blocks in child templates replace the content of blocks in parent templates.
    "expected": |+
        <html>
        <body>
        <p>Custom Content</p>
        </body>
        </html>

    "name": |-
        test_01_00_extends_file.test
    "template": |
        {% extends "bases/base.html" %}
        {% block content %}
        <p>Custom Content</p>
        {% endblock %}
    "testname": |-
        extends file
-   "data": |
        {}
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem; blocks in child templates replace the content of blocks in parent templates.
    "expected": |+
        <html>
        <body>
        <p>Custom Content</p>
        </body>
        </html>

    "name": |
        test_01_01_extends_object.test
    "template": |
        {% extends bases.base|template %}
        {% block content %}
        <p>Custom Content</p>
        {% endblock %}
    "testname": |
        extends object
-   "data": |
        {}
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem; blocks in child templates replace the content of blocks in parent templates.But inside Child Template if we explicitly passed parent tag then first content of Base Template is processed then child template continue to proceed.
    "expected": "<html>\n<body>\n<p>Parent Content</p> \n<p>Custom Content</p>\n</body>\n\
        </html>\n\n"
    "name": |
        test_01_02_extends_parent.test
    "template": "{% extends bases.base|template %}\n{% block content %}\n{% parent\
        \ %} \n<p>Custom Content</p>\n{% endblock %}\n"
    "testname": |
        extends parent
-   "data": |
        {}
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem; blocks in child templates replace the content of blocks in parent templates.But inside Child Template if we explicitly passed parent tag then first content of Base Template is processed then child template continue to proceed.
    "expected": |+
        <html>
        <body>
        <p>Custom Inner Content</p>
        </body>
        </html>

    "name": |
        test_01_03_extends_inner_block.test
    "template": |
        {% extends bases.inner|template %}
        {% block inner %}
        <p>Custom Inner Content</p>
        {% endblock %}
    "testname": |-
        extends inner block
-   "data": |
        {}
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem and that extended template should be able to extend another template found in filesystem ; blocks in child templates replace the content of blocks in parent templates.
    "expected": |+
        <html>
        <body>
        <p>This is content from the template "multiple.html"</p>
        <p>Custom Content</p>
        </body>
        </html>

    "name": |
        test_01_04_extends_multiple.test
    "template": |
        {% extends bases.multiple|template %}
        {% block content %}
        {% parent %}
        <p>Custom Content</p>
        {% endblock %}
    "testname": |-
        extends multiple
-   "data": |
        { "value": "{% block content %}{% endblock %}\n" }
    "desc": "The {% extends %} tag is the key here. It tells the template engine that\
        \ this template \u201Cextends\u201D another template. When the template system\
        \ evaluates this template, it first locates the parent. The extends tag should\
        \ be the first tag in the template."
    "expected": |
        <html>{% block content %}{% endblock %}
        </html>
    "name": |-
        test_41_01_extends_test_for_eof_characters.test
    "template": |
        {% extends "<html>{{value}}</html>"|template %}
    "testname": |-
        extends for eof char type1
-   "data": |
        { "value": "<html>{% block content %}{% endblock %}</html>\n" }
    "desc": "The {% extends %} tag is the key here. It tells the template engine that\
        \ this template \u201Cextends\u201D another template. When the template system\
        \ evaluates this template, it first locates the parent. The extends tag should\
        \ be the first tag in the template."
    "expected": |+
        <html>{% block content %}{% endblock %}</html>

    "name": |-
        test_41_02_extends_test_for_eof_characters.test
    "template": |
        {% extends "{{value}}"|template %}
    "testname": |-
        extends for eof char type2
-   "data": |
        {}
    "desc": "The {% extends %} tag is the key here. It tells the template engine that\
        \ this template \u201Cextends\u201D another template. When the template system\
        \ evaluates this template, it first locates the parent. The extends tag should\
        \ be the first tag in the template."
    "expected": |+
        My Content

    "name": |-
        test_41_03_extends_test_for_eof_characters_carriage_return.test
    "template": |
        {% extends bases.test_bases_eof|template %}
        {% block content %}
        My Content
        {% endblock %}
    "testname": |-
        extends for eof char type3
-   "data": |
        {}
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem and that extended template should be able to extend another template found in filesystem.It can be multilevel :not only you can extends a template from the base template but you can also derive a template from the derived template.
    "expected": |+
        <html>
        <body>
        <p>"Path.html" created by Echo command of linux</p>
        </body>
        </html>

    "name": |-
        test_41_04_extend_multiple_test.test
    "template": |+
        {% extends bases.path %}
        {% block content %}
        <p>"Path.html" created by Echo command of linux</p>
        {% endblock %}

    "testname": "extend multiple "
-   "data": |
        {}
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem and that extended template should be able to extend another template found in filesystem.It can be multilevel :not only you can extends a template from the base template but you can also derive a template from the derived template.
    "expected": |+
        <html>
        <body>
        <p>"Path.html" created by Echo command of linux</p>
        </body>
        </html>

    "name": |-
        test_41_04_extend_multiple_test.test
    "template": |+
        {% extends bases.path %}
        {% block content %}
        <p>"Path.html" created by Echo command of linux</p>
        {% endblock %}

    "testname": |-
        extend multiple test1
-   "data": |
        {"path":"bases/base.html"}
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem and that extended template should be able to extend another template found in filesystem.It can be multilevel :not only you can extends a template from the base template but you can also derive a template from the derived template.
    "expected": |+
        <html>
        <body>
        <p>path passed from context</p>
        </body>
        </html>

    "name": |-
        test_41_05_extend_multiple_test.test
    "template": |+
        {% extends path %}
        {% block content %}
        <p>path passed from context</p>
        {% endblock %}

    "testname": |-
        extend multiple test2
-   "data": |
        {}
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem and that extended template should be able to extend another template found in filesystem.It can be multilevel :not only you can extends a template from the base template but you can also derive a template from the derived template.
    "expected": |+
        <html>
        <body>
        <p>This is content from the template "multiple.html"</p>
        </body>
        </html>

    "name": |-
        test_41_06_extend_multiple_test.test
    "template": |+
        {% extends bases.multiple|template %}

    "testname": |-
        extend multiple test3
-   "data": |
        { "path" : "bases/base.html"}
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem and that extended template should be able to extend another template found in filesystem.It can be multilevel :not only you can extends a template from the base template but you can also derive a template from the derived template.
    "expected": |+
        <html>
        <body>
        <p>Parent Content</p></body>
        </html>

    "name": |-
        test_41_07_extend_path_test.test
    "template": |+
        {% extends path %}

    "testname": |-
        extend path test
-   "data": |
        {"template" : "<html>{% block content %}{% endblock %}</html>\n" }
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem and that extended template should be able to extend another template found in filesystem.It can be multilevel :not only you can extends a template from the base template but you can also derive a template from the derived template.
    "expected": |+
        <html>My Content</html>

    "name": |-
        test_41_11_extends_inline_test.test
    "template": |+
        {% extends template|template %}
        {% block content %}My Content{% endblock %}

    "testname": |-
        extends inline test1
-   "data": |
        {"template" : "<html>{% block content %}{% endblock %}</html>\n" }
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem and that extended template should be able to extend another template found in filesystem.It can be multilevel :not only you can extends a template from the base template but you can also derive a template from the derived template.
    "expected": |+
        <html>My Content</html>

    "name": |-
        test_41_12_extends_inline_test.test
    "template": |+
        {% extends template|template %}
        {% block content %}My Content{% endblock %}

    "testname": |-
        extends inline test2
-   "data": |
        {"parent" : "{% block test %}Parent{% endblock %}" }
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem and that extended template should be able to extend another template found in filesystem.It can be multilevel :not only you can extends a template from the base template but you can also derive a template from the derived template.
    "expected": |
        Parent Child
    "name": |-
        test_41_13_extends_inline_test.test
    "template": |+
        {% extends parent|template %}
        {% block test %}{% parent %} Child{% endblock %}

    "testname": |-
        extends inline test3
-   "data": "{\"templates\" : {\n                \"one\" : \"{% block test %}Base\
        \ One{% endblock %}\",\n                \"two\" : \"{% block test %}Base Two{%\
        \ endblock %}\"\n            },\n \"page\" : {\n            \"content\" :\
        \ \"Page Content\",\n            \"template\" : \"one\"\n          } \n}\n\
        \n"
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem and that extended template should be able to extend another template found in filesystem.It can be multilevel :not only you can extends a template from the base template but you can also derive a template from the derived template.
    "expected": |
        Base One Page Content
    "name": |-
        test_41_15_extends_inline_test.test
    "template": |
        {% extends templates[page.template]|template %}
        {% block test %}{% parent %} {{ page.content }}{% endblock %}
    "testname": |-
        extends inline test5
-   "data": |
        {}
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem and that extended template should be able to extend another template found in filesystem.It can be multilevel :not only you can extends a template from the base template but you can also derive a template from the derived template.
    "expected": |+
        <html>
        <body>
        Hello ! this is the parent
        Hi ! this is the child
        </body>
        </html>
        
    "name": |-
        test_41_16_extends_child_scope_check.test
    "template": |
        {% extends "bases/check_child_scope.html" %}
        {% block content %}
        {% set greeting = "Hi !" %}
        {% parent %}
        {{ greeting }} this is the child
        {% endblock %}
    "testname": |-
        parent - child scope leakage
-   "data": |
        {}
    "desc": |-
        Templates should be able to extend other templates found in the object of filesystem and that extended template should be able to extend another template found in filesystem.It can be multilevel :not only you can extends a template from the base template but you can also derive a template from the derived template.
    "expected": |+
        <html>
        <head>
        This is child's nested inner
        Child's content
        </head>
        <body>
        This is child's nested inner
        </body>
        </html>

    "name": |-
        test_41_17_extend_nested_block_extension.test
    "template": |
        {% extends "bases/extend_using_nestedBlock.html" %}
        {% block content %}
        {% block inner %}
        {{ "This is child's nested inner" }}
        {% endblock %}
        {{ "Child's content" }}
        {% endblock %}
    "testname": |-
        block extention as nested block
