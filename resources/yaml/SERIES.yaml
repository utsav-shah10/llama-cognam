"overview": |-
    series([start, ]stop[, step])
    Return a list containing an arithmetic progression of integers. range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0. When step is given, it specifies the increment (or decrement). For example, range(4) and range(0, 4, 1) return [0, 1, 2, 3]. The end point is omitted! These are exactly the valid indices for a list of 4 elements.
"tests":
-   "data": |
        {}
    "desc": |-
        series([start, ]stop[, step])
        Return a list containing an arithmetic progression of integers. range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0. When step is given, it specifies the increment (or decrement). For example, range(4) and range(0, 4, 1) return [0, 1, 2, 3]. The end point is omitted! These are exactly the valid indices for a list of 4 elements.
    "expected": |+
        cold
        hot
        cold
        hot
        cold
        hot
        cold
        hot
        cold
        hot

    "name": |-
        test_62_00_series_test.test
    "template": |
        {% for i in series(0,10) %}
        {{ cycle(['cold','hot'], i) }}
        {% endfor %}
    "testname": |-
        series case1
-   "data": |
        {}
    "desc": |-
        series([start, ]stop[, step])
        Return a list containing an arithmetic progression of integers. range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0. When step is given, it specifies the increment (or decrement). For example, range(4) and range(0, 4, 1) return [0, 1, 2, 3]. The end point is omitted! These are exactly the valid indices for a list of 4 elements.
    "expected": |+
        cold
        cold
        cold
        cold
        cold
        cold
        cold
        cold
        cold
        cold

    "name": |-
        test_62_01_series_test.test
    "template": |
        {% for i in series(0,10,2) %}
        {{ cycle(['cold','hot'], i) }}
        {% endfor %}
    "testname": |-
        series case2
-   "data": |
        {}
    "desc": |-
        series([start, ]stop[, step])
        Return a list containing an arithmetic progression of integers. range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0. When step is given, it specifies the increment (or decrement). For example, range(4) and range(0, 4, 1) return [0, 1, 2, 3]. The end point is omitted! These are exactly the valid indices for a list of 4 elements.
    "expected": |+
        0
        2
        4
        6
        8
        10
        12
        14
        16
        18

    "name": |-
        test_62_02_series_test.test
    "template": |
        {% for i in series(0,10,2) %}
        {{ i }}
        {% endfor %}
    "testname": |-
        series case3
-   "data": |
        {}
    "desc": |-
        series([start, ]stop[, step])
        Return a list containing an arithmetic progression of integers. range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0. When step is given, it specifies the increment (or decrement). For example, range(4) and range(0, 4, 1) return [0, 1, 2, 3]. The end point is omitted! These are exactly the valid indices for a list of 4 elements.
    "expected": |+
        10
        9
        8
        7
        6

    "name": |-
        test_62_03_series_test.test
    "template": |
        {% for i in series(10,5,-1) %}
        {{ i }}
        {% endfor %}
    "testname": |-
        series case4
-   "data": |
        {}
    "desc": |-
        series([start, ]stop[, step])
        Return a list containing an arithmetic progression of integers. range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0. When step is given, it specifies the increment (or decrement). For example, range(4) and range(0, 4, 1) return [0, 1, 2, 3]. The end point is omitted! These are exactly the valid indices for a list of 4 elements.
    "expected": |+
        10
        8
        6
        4
        2

    "name": |-
        test_62_04_series_test.test
    "template": |
        {% for i in series(10,5,-2) %}
        {{ i }}
        {% endfor %}
    "testname": |-
        series case5
-   "data": |
        {}
    "desc": |-
        series([start, ]stop[, step])
        Return a list containing an arithmetic progression of integers. range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0. When step is given, it specifies the increment (or decrement). For example, range(4) and range(0, 4, 1) return [0, 1, 2, 3]. The end point is omitted! These are exactly the valid indices for a list of 4 elements.
    "expected": |+
        -1
        -3
        -5
        -7
        -9

    "name": |-
        test_62_05_series_test.test
    "template": |
        {% for i in series(-1,5,-2) %}
        {{ i }}
        {% endfor %}
    "testname": |-
        series case6
