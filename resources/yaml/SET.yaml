"dependency":
-   "bases":
        "base": |
            <html>
            <body>
            {% block content %}<p>Parent Content</p>{% endblock %}
            </body>
            </html>
        "block_scope": |
            <!DOCTYPE html>
            <html>
                <head>
                    {% block head %}
                        <link rel="stylesheet" href="style.css" />
                        <title>{% block title %}{% endblock %} - My Webpage</title>
                    {% endblock %}
                </head>
                <body>
                    <div id="content">{% block content %}{% endblock %}</div>
                    <div id="footer">
                        {% block footer %}
                            &copy; Copyright 2011 by <a href="http://domain.invalid/">you</a>.
                        {% endblock %}
                    </div>
                </body>
            </html>
        "block_scope2": |
            {% block one %}{% endblock %}
            {% block two %}{% endblock %}
        "block_scoping2": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {% set value=45 %}
            {{ value }}
            {% endblock %}

            {% block second %}
            --second block--
            {% set value=25 %}
            {{value}}
            {% endblock %}

            {% block third %}
            --third block--
            {% set value=35 %}
            {{value}}
            {% endblock %}
        "block_scoping3": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {{ value }}
            {{ variable }}
            {% endblock %}

            {% block second %}
            --second block--
            {% set variable=25 %}
            {% endblock %}

            {% block third %}
            --third block--
            {% set value=35 %}
            {{value}}
            {% set variable=45%}
            {% endblock %}
        "block_scoping3_01": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {{ value }}
            {{ variable }}
            {% endblock %}
        "block_scoping3_02": |
            {% set variable=25 %}
            {% block second %}
            --second block--
            {% endblock %}
        "block_scoping3_03": |
            {% set value=35 %}
            {% block third %}
            --third block--
            {{value}}
            {% endblock %}
        "block_scoping_new": |
            {% set value = "base" %}
            {% block container %}{% endblock %}
        "block_scoping_test": |
            {% set variable=100 %}

            {% block first %}
            {{ variable }}
            {% endblock %}

            {% block second %}
            {% set variable=25 %}
            {% endblock %}

            {% block third %}
            {% set variable=45%}
            {% endblock %}
        "block_scoping_test_01": |
            {% set variable=100 %}

            {% block first %}
            {{ variable }}
            {% endblock %}
        "block_scoping_test_02": |
            {% set variable=100 %}

            {% block second %}
            {% endblock %}
        "block_scoping_test_03": |
            {% set variable=100 %}

            {% block third %}
            {% endblock %}
        "check": |
            <html>
            <body>


            {% block first %}
            {% endblock %}


            </body>
            </html>
        "check_child_scope": |
            <html>
            <body>
            {% block content %}
            {% set greeting = 'Hello !' %}
            {{ greeting }} this is the parent
            {% endblock %}
            </body>
            </html>
        "extend_using_nestedBlock": |
            <html>
            <head>
            {% block content %}
            {{ "This is Root's content" }}
            {% endblock %}
            </head>
            <body>
            {% block inner %}
            {{ "This is from Root's inner" }}
            {% endblock %}
            </body>
            </html>
        "inner": |
            <html>
            {% block content %}
            <body>
            {% block inner%}{% endblock %}
            </body>
            {% endblock %}
            </html>
        "macro": |
            {% macro parent_macro() %}<p>Parent Macro</p>{% endmacro %}
            {% block content %}{% endblock %}
        "main_base": |
            {% block container %}
            base container base
            {% block outer %}
            base outer base
            {% block inner1 %}
            base inner base
            {% endblock %}
            {% endblock %}
            {% endblock %}
        "mid_base1": |
            {% extends "bases/main_base.html" %}
            {% block outer %}
            block outer mid1
            {% block inner2 %}
            block inner2 mid1
            {% parent %}
            {% endblock %}
            {% endblock %}
        "mid_base2": |
            {% extends "bases/main_base.html" %}
            {% block inner1 %}
            block inner1 mid2
            {% endblock %}
        "multiple": |
            {% extends bases.base|template %}
            {% block content %}
            <p>This is content from the template "multiple.html"</p>
            {% endblock %}
        "out": |+
            {% block first_block %}
            {% endblock %}
            {% block second_block %}
            {% set value=200 %}
            {% endblock %}
            {% block third_block %}
            {{ value}}
            {% endblock %}
            {% block variable_block %}
            Hello {{ var }}
            {% endblock %}

        "parent": |
            {% set val=45 %}
            {% block variable_block %}
            {{ val }}
            {% endblock %}
            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent2": |
            {% set val=45 %}
            {% block variable_block %}
            {{ val }}
            {% endblock %}

            {% block new_block %}
            this is parent block
            {% endblock %}
        "parent3": |
            {% set val=45 %}
            {% block variable_block %}
            {% print val %}
            {% endblock %}
            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent4": |
            {% set val=45 %}
            {% block variable_block %}
            {% print val %}
            {% endblock %}

            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent_autoescape2": |
            {% autoescape false %}
            <html>
            {% block test %}{% set parenthtml = "<h1>Parent</h1>" %}{{ parenthtml }}{% endblock %}
            </html>
            {% endautoescape %}
        "parent_template": |
            {% block k %}
            {% set var = 'parent' %}
            {% endblock %}
        "parent_template2": |
            {% set val = 'parent' %}{% block k %}{% set val = 'inner' %}{% endblock %}{{ val }}
        "path": |-
            bases/base.html
        "path2": |
            bases/base.html
        "root": |
            {% set value=15 %}
            {% block new_block %}
            {{ var }}
            {% endblock %}
        "super": |
            {% block variable_block %}
            {{ var }}
            parent block
            {% endblock %}
        "test_bases_eof": "{% block content %}{% endblock %}\r\n"
        "value_set": |
            {% set value = 20 %}
            {% block test %}
            {{ value }}
            {% endblock %}
    "includes":
        "chain": |
            {% include includes.with|template with { "argument" : argument, "value" : 42 } only %}
        "child": |
            {{ upper('string was in lower') }}
        "child2": |
            {% set value = 25 %}
            Included Template
        "colormacro": |4

            {% macro avgcolor(color1, color2) -%}
                {%- set color1 = rgbcolor(color1) -%}
                {%- set color2 = rgbcolor(color2) -%}
                {%- set coloravg = [
                    mean([color1[0], color2[0]]),
                    mean([color1[1], color2[1]]),
                    mean([color1[2], color2[2]])
                ] -%}
                {{ hexcolor(coloravg) }}
            {%- endmacro %}

            {% macro lighten(color, fraction) -%}
                {%- set color = rgbcolor(color) -%}
                {%- set add_white = 255 * fraction -%}
                {%- set new_r = color[0] + add_white -%}
                {%- set new_g = color[1] + add_white -%}
                {%- set new_b = color[2] + add_white -%}
                {%- if new_r > 255 %}{% set new_r = 255 %}{% endif -%}
                {%- if new_g > 255 %}{% set new_g = 255 %}{% endif -%}
                {%- if new_b > 255 %}{% set new_b = 255 %}{% endif -%}
                {{ hexcolor([new_r, new_g, new_b]) }}
            {%- endmacro %}

            {% macro darken(color, fraction) -%}
                {%- set color = rgbcolor(color) -%}
                {%- set darkcolor = [
                    color[0] - (color[0] * fraction),
                    color[1] - (color[1] * fraction),
                    color[2] - (color[2] * fraction),
                ] -%}
                {{ hexcolor(darkcolor) }}
            {%- endmacro %}
        "eof_test": |+
            This included file contains a extra new line at the EOF given by user apart from hidden newline character.

        "eof_test10": |
            this is a new file
            this is a new file
        "eof_test11": |-
            this is a new file
        "eof_test2": |
            This included file contains hidden newline character only at the EOF.
        "eof_test3": "This included file contains a tab given by user apart from a\
            \ hidden newline character at the EOF.\t\n"
        "eof_test4": "This included file contains a Carriage return and newline as\
            \ used in windows os ('\\r\\n') at the EOF.\r\n"
        "eof_test5": "This included file contains a Carriage return as used in Mac\
            \ os ('\\r') at the EOF.\r"
        "eof_test6": "This included file contains multiple Carriage return as used\
            \ in Mac os ('\\r\\r') at the EOF.\r\r"
        "eof_test7": |-
            this included file is created by echo command of linux.
        "eof_test8": |
            this included file is contains comment tags at the EOF.{# #}
        "eof_test9": |
            This included file contains newline character at the EOF.
        "example_file": |-
            path file is created by echo command of linux
        "example_file2": |
            path file is created by Text Editor tool
        "faker": |
            FAKER!
        "forautoescape": |
            <h1>autoescape</h1>
        "has_hello": |
            {% macro hello() %}
            Hello included!
            {% endmacro %}
        "has_macro": |
            {% macro from_inside(var) %}{{var}}{% endmacro %}
            {% print from_inside(42) %}
        "include_path": |-
            include/example_file.html
        "include_path2": |
            include/example_file2.html
        "macro_call": |+
            {% print hello("hello world") %}

        "macro_call2": |
            {% macro test() %}
               "hello this included file macro"
            {% endmacro %}
        "macro_within_macro": |
            {% macro test() %}
            {% print hello() %}
            "this is included macro"
            {% endmacro %}
            {% print test() %}
        "macro_within_macro2": |
            {% macro test() %}
            {% print hello() %}
            "this is included macro"
            {% endmacro %}
        "macro_within_macro3": |
            {% print hello() %}
            {% macro test() %}
            "this is included macro"
            {% endmacro %}
            {% print test() %}
        "module": "{% macro macro1() %}\r\nmacro1 imported!\r\n{% endmacro %}\r\n\
            {% macro macro2() %}\r\nmacro2 imported!\r\n{% endmacro %}\r\n"
        "name_snippet": |+
            {% set greeting = "< in-built filter e is used >" %}
            {{ greeting|e }}
            {% print round(10.6) %}

            {% macro hello() %}
            "this is user functions"
            {% endmacro %}
            {% print hello() %}

        "new_macro_call": |+
            {{ hello("hello world") }}

        "new_macro_within_macro2": |
            {% macro test() %}
            {{ hello() }}
            "this is included macro"
            {% endmacro %}
        "newline_test": |
            This is included File.
        "newline_test2": |
            This is included File.

            {% set var = "Hello World!" %}
            {% print var %} After include Tag new Line goes Here--->
        "scope": |
            {% set defined_outside = "inside" %}
            {% set defined_inside = "inside" %}
        "scope2": |
            {% set value = 24 %}
            {{ variable }}
        "scope_test": |
            These parens contain a variable from external scope: ({{ variable }})
        "string": |
            This text is loaded as a string.
        "template": |
            {% set var = 22 %}
        "value_call": |
            {{ value }}
        "variable": |
            This text is included via the context as a variable.
        "with": |
            There are two values that are added to the context: {{ argument }}, {{ value }}.
"overview": |-
    With set tag you can  assign values to variables. Assignments use the set tag and can have multiple targets.It may contain expression which first evaluated and then assigned to variable.
"tests":
-   "data": "{ \"pi\" : 3.141592653589793 ,\n  \"e\" : 2.718281828459045 ,\n  \"pi_str\"\
        \ : \"3.141592653589793\" , \n  \"e_str\" : \"2.718281828459045\" ,\n  \"\
        variable\" : \"value\" }\n"
    "desc": |4-
         Inside code blocks i.e.( {% set %} ) you can also assign values to variables. Assignments use the set tag and can have multiple targets.
    "expected": |+
        42
        string value
        value

    "name": |-
        test_05_00_set_basic.test
    "template": |
        {% set number = 42 %}
        {{ number }}
        {% set string = "string value" %}
        {{ string }}
        {% set local = variable %}
        {{ local }}
    "testname": |-
        set basic
-   "data": "{ \"pi\" : 3.141592653589793 ,\n  \"e\" : 2.718281828459045 ,\n  \"pi_str\"\
        \ : \"3.141592653589793\" , \n  \"e_str\" : \"2.718281828459045\" ,\n  \"\
        variable\" : \"value\" }\n"
    "desc": |4-
         Inside code blocks i.e.( {% set %} ) you can also assign values to variables. Assignments use the set tag and can have multiple targets.It may contain expression which first evaluated and then assigned to variable.
    "expected": |+
        28
        string value
        value

    "name": |-
        test_05_01_set_expression.test
    "template": |
        {% set number = round(pi * 3 ** 2) %}
        {{ number }}
        {% set string = "string value" %}
        {{ string }}
        {% set local = variable %}
        {{ local }}
    "testname": |-
        set expression
-   "data": "{ \"pi\" : 3.141592653589793 ,\n  \"e\" : 2.718281828459045 ,\n  \"pi_str\"\
        \ : \"3.141592653589793\" , \n  \"e_str\" : \"2.718281828459045\" ,\n  \"\
        variable\" : \"value\" ,\n  \"argument\" : \"parameter\" }\n"
    "desc": |4-
         Inside code blocks i.e.( {% set %} ) you can also assign values to variables. Assignments use the set tag and can have multiple targets.It may contain Macro which first evaluated and then assigned to variable.
    "expected": |+
        parameter

    "name": |-
        test_05_03_set_macro.test
    "template": |
        {% macro argument_test(argument) %}{{ argument }}{% endmacro %}
        {% set local = argument_test(argument) %}
        {{ local }}
    "testname": |-
        set macro
-   "data": "{\n  \"listA\": [1,2,3,\"a\",\"b\",\"c\"],\n  \"listB\": [\"x\",\"y\"\
        ,\"z\",9,8,7,1,\"a\"] \n}\n"
    "desc": "These binary operations have as an input a list and either another list\
        \ or an object. The resulting type depends on the type of the operation. All\
        \ lists and objects must relate to the same entity.                      \
        \                                                                    Union\
        \  :The result is a combination of the elements of both parameters avoiding\
        \ duplicates.                                              Intersect :The\
        \ result is a list containing elements that appear in both parameters. \n\
        Subtract  :The result is the first parameter with the element(s) of the second\
        \ parameter removed."
    "expected": |+
        [2, 3, 'b', 'c', 'x', 'y', 'z', 9, 8, 7]
        [2, 3, 'b', 'c', 'x', 'y', 'z', 9, 8, 7]

    "name": |-
        test_61_00_basic_set_operations_test.test
    "template": |
        {{ complement(union(listA, listB), intersection(listA, listB))|string }}
        {{ difference(listA, listB)|string }}
    "testname": |-
        set operations case1
-   "data": "{\n  \"listA\": [1,2,3,\"a\",\"b\",\"c\",3,2,1,\"c\",\"b\",\"a\"],\n\
        \  \"listB\": [\"x\",\"y\",\"z\",9,8,7,7,8,9,\"z\",\"y\",\"x\"] \n}\n"
    "desc": "These binary operations have as an input a list and either another list\
        \ or an object. The resulting type depends on the type of the operation. All\
        \ lists and objects must relate to the same entity.                      \
        \                                                                    Union\
        \  :The result is a combination of the elements of both parameters avoiding\
        \ duplicates.                                              Intersect :The\
        \ result is a list containing elements that appear in both parameters. \n\
        Subtract  :The result is the first parameter with the element(s) of the second\
        \ parameter removed. "
    "expected": |+
        [1, 2, 3, 'a', 'b', 'c', 'x', 'y', 'z', 9, 8, 7]
        []
        [1, 2, 3, 'a', 'b', 'c']
        [[1, 'x'], [1, 'y'], [1, 'z'], [1, 9], [1, 8], [1, 7], [2, 'x'], [2, 'y'], [2, 'z'], [2, 9], [2, 8], [2, 7], [3, 'x'], [3, 'y'], [3, 'z'], [3, 9], [3, 8], [3, 7], ['a', 'x'], ['a', 'y'], ['a', 'z'], ['a', 9], ['a', 8], ['a', 7], ['b', 'x'], ['b', 'y'], ['b', 'z'], ['b', 9], ['b', 8], ['b', 7], ['c', 'x'], ['c', 'y'], ['c', 'z'], ['c', 9], ['c', 8], ['c', 7]]
        [1, 2, 3, 'a', 'b', 'c', 'x', 'y', 'z', 9, 8, 7]

    "name": |-
        test_61_02_basic_set_operations_test.test
    "template": |
        {{ union(listA, listB)|string }}
        {{ intersection(listA, listB)|string }}
        {{ complement(listA, listB)|string }}
        {{ product(listA,listB)|string }}
        {{ difference(listA,listB)|string }}
    "testname": |-
        set operations case2
-   "data": "{\n  \"listA\": [ [1,2,3], { \"two\" : 2, \"one\": 1 }, { \"a\":1, \"\
        b\":2, \"c\":3 }, \"string\", 22 ],\n  \"listB\": [ [1,2,3], { \"two\" : 2,\
        \ \"one\": 1 }, { \"a\":1, \"c\":3 }, true, null ] \n}\n"
    "desc": "These binary operations have as an input a list and either another list\
        \ or an object. The resulting type depends on the type of the operation. All\
        \ lists and objects must relate to the same entity.                      \
        \                                                                    Union\
        \  :The result is a combination of the elements of both parameters avoiding\
        \ duplicates.                                              Intersect :The\
        \ result is a list containing elements that appear in both parameters. \n\
        Subtract  :The result is the first parameter with the element(s) of the second\
        \ parameter removed. "
    "expected": |+
        union:

        [1, 2, 3]
        {'one': 1, 'two': 2}
        {'a': 1, 'b': 2, 'c': 3}
        string
        22
        {'a': 1, 'c': 3}
        true
        null
        -----------------------

        intersection:

        [1, 2, 3]
        {'one': 1, 'two': 2}
        -----------------------

        complement:

        {'a': 1, 'b': 2, 'c': 3}
        string
        22
        -----------------------

        differnce:

        {'a': 1, 'b': 2, 'c': 3}
        string
        22
        {'a': 1, 'c': 3}
        true
        null
        -----------------------

    "name": |-
        test_61_03_basic_set_operations_test.test
    "template": |
        {% set var_1 = union(listA, listB) %}
        {% set var_2 = intersection(listA, listB) %}
        {% set var_3 = complement(listA, listB) %}
        {% set var_4 = difference(listA,listB) %}
        union:

        {{ var_1.0|string }}
        {{ var_1.1|string }}
        {{ var_1.2|string }}
        {{ var_1.3|string }}
        {{ var_1.4|string }}
        {{ var_1.5|string }}
        {{ var_1.6|string }}
        {{ var_1.7|string }}
        -----------------------

        intersection:

        {{ var_2.0|string }}
        {{ var_2.1|string }}
        -----------------------

        complement:

        {{ var_3.0|string }}
        {{ var_3.1|string }}
        {{ var_3.2|string }}
        -----------------------

        differnce:

        {{ var_4.0|string }}
        {{ var_4.1|string }}
        {{ var_4.2|string }}
        {{ var_4.3|string }}
        {{ var_4.4|string }}
        {{ var_4.5|string }}
        -----------------------
    "testname": |-
        set operations case3
-   "data": "{\n  \"listA\": [ [1,2,3], { \"two\" : 2, \"one\": 1 }, { \"a\":1, \"\
        b\":2, \"c\":3 }, \"string\", 22 ],\n  \"listB\": [ [1,2,3], { \"two\" : 2,\
        \ \"one\": 1 }, { \"a\":1, \"c\":3 }, true, null ] \n}\n"
    "desc": "These binary operations have as an input a list and either another list\
        \ or an object. The resulting type depends on the type of the operation. All\
        \ lists and objects must relate to the same entity.                      \
        \                                                                    Union\
        \  :The result is a combination of the elements of both parameters avoiding\
        \ duplicates.                                              Intersect :The\
        \ result is a list containing elements that appear in both parameters. \n\
        Subtract  :The result is the first parameter with the element(s) of the second\
        \ parameter removed. "
    "expected": |+
        [[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], {'one': 1, 'two': 2}], [[1, 2, 3], {'a': 1, 'c': 3}], [[1, 2, 3], true], [[1, 2, 3], null], [{'one': 1, 'two': 2}, [1, 2, 3]], [{'one': 1, 'two': 2}, {'one': 1, 'two': 2}], [{'one': 1, 'two': 2}, {'a': 1, 'c': 3}], [{'one': 1, 'two': 2}, true], [{'one': 1, 'two': 2}, null], [{'a': 1, 'b': 2, 'c': 3}, [1, 2, 3]], [{'a': 1, 'b': 2, 'c': 3}, {'one': 1, 'two': 2}], [{'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'c': 3}], [{'a': 1, 'b': 2, 'c': 3}, true], [{'a': 1, 'b': 2, 'c': 3}, null], ['string', [1, 2, 3]], ['string', {'one': 1, 'two': 2}], ['string', {'a': 1, 'c': 3}], ['string', true], ['string', null], [22, [1, 2, 3]], [22, {'one': 1, 'two': 2}], [22, {'a': 1, 'c': 3}], [22, true], [22, null]]

    "name": |-
        test_61_04_basic_set_operations_product_test.test
    "template": |
        {{ product(listA,listB)|string }}
    "testname": |-
        set operations case4
-   "data": |
        {}
    "desc": |4-
         Inside code blocks i.e.( {% set %} ) you can also assign values to variables. We can set value outside of block  can use this value in block.
    "expected": |+
        15

    "name": |-
        test_16_00_set_value_outside_block.test
    "template": |
        {% set value=15 %}
        {% block new_block %}
        {{ value }}
        {% endblock %}
    "testname": |-
        set value case1
-   "data": |
        {}
    "desc": |4-
         Inside code blocks i.e.( {% set %} ) you can also assign values to variables. We can set value outside of block of parent template can use this value in block of child template.
    "expected": |
        15
    "name": |-
        test_16_01_set_outside_block_read_in_child_inside_block.test
    "template": |
        {% extends bases.root|template %}
        {% block new_block %}
        {% print value%}
        {% endblock %}
    "testname": |-
        set value case2
-   "data": |
        {}
    "desc": |4-
         Inside code blocks i.e.( {% set %} ) you can also assign values to variables. We can set value outside of block of parent template can use this value in block of child template.
    "expected": |+
        child variable block


        this is parent block

    "name": |-
        test_16_04_set_value_parent_template_read_before_parent_tag.test
    "template": |
        {% extends bases.parent|template %}
        {% block variable_block %}
        child variable block
        {% endblock %}
        {% block new_block %}
        {{ var }}
        {% parent %}
        {% endblock %}
    "testname": |-
        set value case3
-   "data": |
        {}
    "desc": |4-
         Inside code blocks i.e.( {% set %} ) you can also assign values to variables. We can set value outside of block of parent template can use this value in block of child template.
    "expected": |4+

        this is parent block


    "name": |-
        test_16_05_set_value_parent_template_read_after_parent_tag.test
    "template": |+
        {% extends bases.parent|template %}
        {% block variable_block %}
        {% endblock %}
        {% block new_block %}
        {% parent %}
        {{ var }}
        {% endblock %}

    "testname": |-
        set value case4
-   "data": |
        {}
    "desc": |4-
         Inside code blocks i.e.( {% set %} ) you can also assign values to variables. We can set value outside of block of parent template can use this value in block of child template.
    "expected": |+
        45

        child implementation of parent

        this is parent block

    "name": |-
        test_16_07_set_value_ousite_parent_use_child_block_parent_tag.test
    "template": |+
        {% extends bases.parent|template %}
        {% block variable_block %}
        {% parent %}

        child implementation of parent
        {% endblock %}

    "testname": |-
        set value case5
