Rule,question,answer
"Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa.",Can a variable defined in a parent scope be accessed in a child scope?,"Yes, a variable defined in a parent scope is available for use within child or descendant scopes."
"Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa.",Can a variable defined in a child scope be accessed in a parent scope?,"No, a variable defined in a child scope is not available for use within parent or ancestor scopes."
"Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa.",What happens if a variable is defined in both a parent and a child scope?,"In Blended, multiple declarations of a variable are not allowed. Attempting to do so will result in a syntax error."
"Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa.",Can a variable be redefined in a child scope?,"No, it cannot be redefined. In Blended, multiple declarations of a variable are not allowed. Attempting to do so will result in a syntax error."
"Names defined inside parent or ancestor scopes are available for use within child or descendant scopes, but not vice-versa.",What happens if a variable is defined in a parent scope and then redefined in a child scope?,"In Blended, multiple declarations of a variable are not allowed. Attempting to do so will result in a syntax error."
Multiple declarations of a variable or blended object are not allowed in Blended.,What happens if I try to declare the same variable twice in a Blended program?,"In Blended, multiple declarations of a variable are not allowed. Attempting to do so will result in a syntax error."
Multiple declarations of a variable or blended object are not allowed in Blended.,Can I declare the same blended object twice in a Blended program?,"In Blended, multiple declarations of a blended object are not allowed. Attempting to do so will result in a syntax error."
Multiple declarations of a variable or blended object are not allowed in Blended.,"What if I have a nested structure with variables or objects, and I want to declare them multiple times?","In Blended, multiple declarations of variables or objects within a nested structure are not allowed. Attempting to do so will result in a syntax error."
Names defined inside parent or ancestor scopes cannot be overwritten or modified within child or descendant scopes--they are read-only.,What happens if a variable is defined in a parent scope and then a child scope tries to redefine it?,The child scope will not be able to redefine the variable as multiple declarations are not allowed in Blended.
Names defined inside parent or ancestor scopes cannot be overwritten or modified within child or descendant scopes--they are read-only.,What if a variable is defined in a parent scope and then a child scope tries to modify it?,The child scope will not be able to modify the variable. It will be read-only and cannot be changed.
Names defined inside parent or ancestor scopes cannot be overwritten or modified within child or descendant scopes--they are read-only.,What is the nature of variable in child scope which is defined in parent scope?,"They are read-only variables and thus, cannot be modified or redefined. "
Names defined inside parent or ancestor scopes cannot be overwritten or modified within child or descendant scopes--they are read-only.,What if a variable is defined in a parent scope and then a grandchild scope tries to redefine it?,The grandchild scope will not be able to redefine the variable. It will be read-only and cannot be modified.
Names defined inside a scope are unavailable after the scope exits--they are local to that scope;,What happens if a variable is defined inside a function and then used outside of that function?,The variable is not available outside the function. It is local to the function and cannot be accessed outside of it.
Names defined inside a scope are unavailable after the scope exits--they are local to that scope;,Can a variable be defined inside a loop and then used outside of the loop?,The variable is not available outside the loop. It is local to the loop and cannot be accessed outside of it.
Names defined inside a scope are unavailable after the scope exits--they are local to that scope;,"What if a variable is defined inside a conditional block (if, else, elif) and then used outside of that block?",The variable is not available outside the conditional block. It is local to the block and cannot be accessed outside of it.
Names defined inside a scope are unavailable after the scope exits--they are local to that scope;,Can a variable be declared inside scope A and used in scope B?,"No, variable declared inside scope A can be used in scope A only and not in any other scope"
Names defined inside a scope are unavailable after the scope exits--they are local to that scope;,What if a variable is defined inside a class and then used outside of the class?,The variable is not available outside the class. It is local to the class and cannot be accessed outside of it.
"Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.",What are the external objects automatically accessible from inside a macro in Blended?,"Built-in functions, user functions, and macros defined inside the same scope."
"Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.",Can macros access variables defined outside their scope?,"No, macros can only access variables defined inside their scope or those explicitly passed as arguments."
"Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.",What happens if a macro tries to access a variable that is not defined in its scope or passed as an argument?,The macro will raise an error indicating that the variable is not defined.
"Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.",Can macros call other macros defined in the same scope?,"Yes, macros can call other macros defined in the same scope."
"Macros are different: the only external objects automatically accessible from inside a macro are built-in functions, user functions, and whatever other macros were defined inside the same scope.",What if a macro calls a macro that is not defined in the same scope?,The macro will raise an error indicating that the macro is not defined.
"Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments.",Can a macro in Blended import macros from other files?,"Yes, a macro in Blended can import macros from other files."
"Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments.",Can a macro in Blended access outside variables directly?,"No, a macro in Blended can only access outside variables directly if they are passed in as arguments."
"Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments.","If a macro imports another macro, can the imported macro access the outside variables of the importing macro?","No, the imported macro cannot access the outside variables of the importing macro directly. It can only access them if they are passed in as arguments."
"Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments.",Can a macro in Blended import macros from multiple files?,"Yes, a macro in Blended can import macros from multiple files."
"Inside a macro, you can also import macros from other files, but the only way that a macro can get access to outside variables is for them to be passed in as arguments.","If a macro imports another macro, can the imported macro access variables from the importing macro's parent scope?","No, the imported macro cannot access variables from the importing macro's parent scope directly. It can only access them if they are passed in as arguments."
Comments are same as Jinja comments - {# … #},What is the syntax for a comment in Blended?,Comments in Blended are denoted by {# … #}.
Comments are same as Jinja comments - {# … #},How do comments affect the execution of the code in Blended?,Comments do not affect the execution of the code in Blended. They are purely for documentation and readability.
Comments are same as Jinja comments - {# … #},Can comments be nested in Blended?,"Yes, comments can be nested in Blended. You can place one comment inside another."
Comments are same as Jinja comments - {# … #},Are comments case-sensitive in Blended?,"No, comments in Blended are not case-sensitive. They are treated as case-insensitive."
Comments are same as Jinja comments - {# … #},Can comments be used to disable code in Blended?,"Yes, comments in Blended can be used to disable code just like Jinja comments. "
We use the terms “segment” and “code segment” to refer to any Blended code found between two tags of the same statement. A code segment acts as a partial template that is rendered according to the prescribed behavior of the statement to which it belongs.,What is the difference between a segment and a code segment in Blended?,"A segment is any Blended code found between two tags of the same statement, while a code segment acts as a partial template that is rendered according to the prescribed behavior of the statement to which it belongs."
We use the terms “segment” and “code segment” to refer to any Blended code found between two tags of the same statement. A code segment acts as a partial template that is rendered according to the prescribed behavior of the statement to which it belongs.,How are segments and code segments used in Blended?,"Segments and code segments are used in Blended to create reusable templates and partials. Segments are used to define the structure of a template, while code segments are used to define the behavior of a template."
We use the terms “segment” and “code segment” to refer to any Blended code found between two tags of the same statement. A code segment acts as a partial template that is rendered according to the prescribed behavior of the statement to which it belongs.,What is the significance of the prescribed behavior of a statement in Blended?,The prescribed behavior of a statement in Blended determines how a code segment is rendered. This behavior is defined by the statement to which the code segment belongs.
We use the terms “segment” and “code segment” to refer to any Blended code found between two tags of the same statement. A code segment acts as a partial template that is rendered according to the prescribed behavior of the statement to which it belongs.,Can a code segment be used in multiple statements in Blended?,"Yes, a code segment can be used in multiple statements in Blended. However, the behavior of the code segment may vary depending on the statement to which it belongs."
We use the terms “segment” and “code segment” to refer to any Blended code found between two tags of the same statement. A code segment acts as a partial template that is rendered according to the prescribed behavior of the statement to which it belongs.,What happens if a code segment is not used in any statement in Blended?,"If a code segment is not used in any statement in Blended, it will not be rendered and will not have any effect on the output."
"Access to the data that statements operate upon is restricted by scope. Nine (9) types of scope are defined for Blended templates : Built-in, User-function, Render, Template, Macro, Block, Iterator, Loop, Else.",What are the nine types of scope defined in Blended templates?,"The nine types of scope defined in Blended templates are: Built-in, User-function, Render, Template, Macro, Block, Iterator, Loop, Else."
"Access to the data that statements operate upon is restricted by scope. Nine (9) types of scope are defined for Blended templates : Built-in, User-function, Render, Template, Macro, Block, Iterator, Loop, Else.",How does the scope affect access to data in Blended templates?,Access to the data that statements operate upon is restricted by scope in Blended templates. This means that data can only be accessed within the scope in which it is defined.
"Access to the data that statements operate upon is restricted by scope. Nine (9) types of scope are defined for Blended templates : Built-in, User-function, Render, Template, Macro, Block, Iterator, Loop, Else.",What is the difference between Built-in and User-function scopes?,"Built-in scope refers to the data and functions that are predefined in Blended templates, such as variables and functions that are available to all templates. User-function scope refers to the data and functions that are defined by the user in their templates."
"Access to the data that statements operate upon is restricted by scope. Nine (9) types of scope are defined for Blended templates : Built-in, User-function, Render, Template, Macro, Block, Iterator, Loop, Else.",What is the purpose of the Else scope in Blended templates?,The Else scope is used to define the code that should be executed if the condition in a conditional statement is not met.
“Built-in” scope: built-in functions provided by Blended,How do built-in functions differ from user-defined functions in Blended?,"Built-in functions are predefined and come with Blended, while user-defined functions are created by the user and can be used to perform specific tasks."
“Built-in” scope: built-in functions provided by Blended,Can built-in functions be modified or extended in Blended?,Built-in functions cannot be modified or extended in Blended. They are part of the language's core and are fixed.
“Built-in” scope: built-in functions provided by Blended,What are the benefits of using built-in functions in Blended?,"Using built-in functions in Blended can save time and effort, as they are optimized and tested for performance."
“User-function” scope: custom functions provided by the application,What are custom functions in Blended?,Custom functions in Blended are functions that are provided by the application and are not built into the language itself.
“User-function” scope: custom functions provided by the application,What is user function scope?,It includes all custom functions provided by user or application
“User-function” scope: custom functions provided by the application,How do custom functions differ from built-in functions in Blended?,"Custom functions are functions that are defined and implemented by the application, while built-in functions are functions that are part of the language's core functionality."
“User-function” scope: custom functions provided by the application,Can custom functions be used in any part of the Blended code?,"Custom functions can be used in any part of the Blended code, but they are not part of the language's built-in functionality."
“User-function” scope: custom functions provided by the application,What are the benefits of using custom functions in Blended?,"Using custom functions in Blended can help to make the code more modular, reusable, and maintainable."
“Render” scope: data provided by the application at the time that “render” is invoked on a template.,What happens if a template is rendered multiple times with different data?,"Each time the template is rendered, it will use the data provided at the time of the render invocation."
“Render” scope: data provided by the application at the time that “render” is invoked on a template.,What is included in Render scope?,It has data provided by application at time of 'render' invocation
“Render” scope: data provided by the application at the time that “render” is invoked on a template.,How does Blended handle data that is not provided at the time of rendering?,Blended will raise an error if a template attempts to access data that is not provided at the time of rendering.
"“Template” scope: names assigned in the template, outside any blocks",What are the names assigned in the template considered to be in the 'Template' scope?,I don't have information about this scope yet. 
"“Template” scope: names assigned in the template, outside any blocks",Can names assigned in the template be accessed within blocks?,I don't have information about this scope yet. 
"“Template” scope: names assigned in the template, outside any blocks",What happens if a name is assigned in the template and then used within a block?,I don't have information about this scope yet. 
"“Template” scope: names assigned in the template, outside any blocks",Are names assigned in the template accessible outside the template?,I don't have information about this scope yet. 
"“Template” scope: names assigned in the template, outside any blocks",Can names assigned in the template be used in other templates?,I don't have information about this scope yet. 
“Macro” scope: template code inside macro tags,What is the scope of a macro in Blended?,"In Blended, the scope of a macro is limited to the template code that is enclosed within the macro tags."
“Macro” scope: template code inside macro tags,Can a macro access variables defined outside its macro tags?,"No, a macro in Blended cannot access variables defined outside its macro tags. It operates within its own isolated scope."
“Macro” scope: template code inside macro tags,How does a macro handle variable scope within its own block?,A macro in Blended handles variable scope within its own block by creating a new scope for variables defined within the macro tags.
“Macro” scope: template code inside macro tags,Can a macro call another macro within its own block?,"Yes, a macro in Blended can call another macro within its own block, allowing for nested macro calls."
“Macro” scope: template code inside macro tags,What happens if a macro is defined within another macro?,"A macro defined within another macro is considered a nested macro and operates within its own scope, but it can access variables defined in the outer macro."
“Block” scope: template code inside block tags,Can variables defined in a block be accessed outside of the block?,"No, variables defined in a block are not accessible outside of that block. They are scoped to the block and are only available within the block's context."
“Block” scope: template code inside block tags,What happens if a variable is defined in multiple blocks?,"Since all blocks have their independent scope, this variable will be unique in each block."
“Block” scope: template code inside block tags,Can functions defined in a block be called outside of the block?,"No, functions defined in a block are not accessible outside of that block. They are scoped to the block and are only available within the block's context."
“Iterator” scope: iteration objects used by for...else block,What is the purpose of the 'Iterator' scope in Blended programming?,The 'Iterator' scope in Blended programming is used to manage iteration objects that are specifically used within the 'for...else' block. This ensures that the iterator is properly scoped and does not interfere with other parts of the code.
“Iterator” scope: iteration objects used by for...else block,How does the 'Iterator' scope differ from other scopes in Blended?,The 'Iterator' scope is distinct from other scopes in Blended because it is specifically designed to handle iteration objects within the 'for...else' block. This ensures that the iterator is properly managed and does not affect other parts of the code.
“Iterator” scope: iteration objects used by for...else block,Can the 'Iterator' scope be used in other parts of the code besides the 'for...else' block?,"No, the 'Iterator' scope is specifically designed to be used within the 'for...else' block. It is not intended to be used in other parts of the code."
“Iterator” scope: iteration objects used by for...else block,How can I ensure that the 'Iterator' scope is used correctly in my Blended code?,"To ensure that the 'Iterator' scope is used correctly in your Blended code, you should follow the rule that the 'Iterator' scope is specifically designed to be used within the 'for...else' block. This ensures that the iterator is properly managed and does not interfere with other parts of the code."
“Loop” scope: template code inside for section of the for...else block,What is the scope of the 'Loop' in Blended?,The 'Loop' scope in Blended refers to the template code that appears inside the `for` section of a `for...else` block.
“Loop” scope: template code inside for section of the for...else block,Can the 'Loop' scope be used in other parts of the template?,"No, the 'Loop' scope is limited to the `for` section of a `for...else` block and cannot be used in other parts of the template."
“Loop” scope: template code inside for section of the for...else block,What happens if a variable is defined in the 'Loop' scope and then used outside of it?,"If a variable is defined within the 'Loop' scope and then used outside of it, it will not be accessible outside of the loop. Linter will throw an error."
“Loop” scope: template code inside for section of the for...else block,What is the purpose of the 'else' block in a 'for...else' block in Blended?,The 'else' block in a 'for...else' block in Blended is used to execute code when the loop completes without finding any items to iterate over.
“Else” scope: template code inside the else section of a for...else block,What happens if there are no items in the list being iterated over in a for...else block?,"In Blended, if there are no items in the list being iterated over in a for...else block, the code inside the else section will be executed."
“Else” scope: template code inside the else section of a for...else block,Can the else section of a for...else block be empty?,"Yes, the else section of a for...else block can be empty. If there are no items in the list, the else section will not execute any code."
“Else” scope: template code inside the else section of a for...else block,What if the for loop is not executed due to a condition outside the loop?,"In Blended, if the for loop is not executed due to a condition outside the loop, the else section will not execute any code."
“Else” scope: template code inside the else section of a for...else block,Can the else section of a for...else block be used with other control structures like if...else?,"Yes, the else section of a for...else block can be used with other control structures like if...else. However, the else section of a for...else block will only execute if the for loop is not executed due to a condition outside the loop."
“Else” scope: template code inside the else section of a for...else block,What happens if the for loop is executed but the else section is not executed?,"In Blended, if the for loop is executed but the else section is not executed, it means that the for loop iterated over all items in the list and the else section was not triggered."
Pair lists may be introduced by applying the items filter to dictionary objects.,What is the purpose of the `items` filter in Blended?,The `items` filter in Blended is used to extract key-value pairs from a dictionary object and present them as a list of pairs.
Pair lists may be introduced by applying the items filter to dictionary objects.,How does the `items` filter work with dictionaries?,"The `items` filter takes a dictionary object as input and returns a list of tuples, where each tuple contains a key-value pair from the dictionary."
Pair lists may be introduced by applying the items filter to dictionary objects.,Can the `items` filter be used with other types of objects?,"No, the `items` filter is specifically designed to work with dictionary objects. It cannot be applied to other types of objects."
Pair lists may be introduced by applying the items filter to dictionary objects.,What happens if the input to the `items` filter is not a dictionary?,"If the input to the `items` filter is not a dictionary, it will result in an error or an unexpected output, as the filter is not designed to handle non-dictionary inputs."
Pair lists may be introduced by applying the items filter to dictionary objects.,Can the `items` filter be used in combination with other filters or modifiers?,"Yes, the `items` filter can be used in combination with other filters or modifiers to further process the list of key-value pairs."
Timestamps may be introduced by applying the datetime filter to properly formatted lists or to properly formatted strings.,What is the datetime filter in Blended?,The datetime filter in Blended is a built-in function that converts a properly formatted list or string into a timestamp.
Timestamps may be introduced by applying the datetime filter to properly formatted lists or to properly formatted strings.,How do I properly format a list to use the datetime filter?,"To properly format a list for use with the datetime filter, ensure that the list contains elements that can be converted into a timestamp, such as dates or times."
Timestamps may be introduced by applying the datetime filter to properly formatted lists or to properly formatted strings.,What is a properly formatted string for the datetime filter?,"A properly formatted string for the datetime filter should be in a format that can be parsed into a timestamp, such as 'YYYY-MM-DD HH:MM:SS' or '2023-10-05 14:30:00'."
Timestamps may be introduced by applying the datetime filter to properly formatted lists or to properly formatted strings.,"Can I use the datetime filter on a single element, or do I need a list?",The datetime filter in Blended requires a list of elements to convert into timestamps. You cannot use it on a single element.
Timestamps may be introduced by applying the datetime filter to properly formatted lists or to properly formatted strings.,What happens if the datetime filter encounters an element that cannot be converted into a timestamp?,"If the datetime filter encounters an element that cannot be converted into a timestamp, it will raise an error or return an invalid timestamp."
"Templates may be introduced through the use of the template filter, which compiles a string into a template object.",What is the purpose of the template filter in Blended?,"The template filter in Blended is used to compile a string into a template object, allowing for the introduction of templates within the language."
"Templates may be introduced through the use of the template filter, which compiles a string into a template object.",Can a template be created from a string in Blended?,"Yes, a template can be created from a string in Blended using the template filter."
"Templates may be introduced through the use of the template filter, which compiles a string into a template object.",What are the benefits of using the template filter in Blended?,"The template filter provides a way to compile strings into template objects, enabling the creation and manipulation of templates within the language, which can be useful for dynamic content generation and templating."
"Safe strings may be introduced by applying the safe filter, or as the output of any macro invocation.",What is the difference between a Safe string and a regular string in Blended?,"A Safe string is one that has been explicitly marked as safe for output, either by applying the safe filter or as the output of a macro invocation. Regular strings are not marked as safe and may contain potentially harmful content."
"Safe strings may be introduced by applying the safe filter, or as the output of any macro invocation.",Can I use the safe filter on a regular string to make it safe?,"Yes, you can use the safe filter on a regular string to make it safe. This is useful when you want to ensure that a string containing potentially harmful content is treated as safe for output."
"Safe strings may be introduced by applying the safe filter, or as the output of any macro invocation.",What happens if I apply the safe filter to a Safe string?,Applying the safe filter to a Safe string does not change its status. A Safe string remains Safe.
"Safe strings may be introduced by applying the safe filter, or as the output of any macro invocation.",Can I use macros to create Safe strings?,"Yes, you can use macros to create Safe strings. Macros can return Safe strings as their output, and these Safe strings can then be used in the same way as any other Safe string."
"Safe strings may be introduced by applying the safe filter, or as the output of any macro invocation.",What if I want to ensure that a string is safe before using it in a template?,"To ensure that a string is safe before using it in a template, you should apply the safe filter to it. This will mark the string as Safe, allowing it to be safely rendered in the template."
Escaped strings may be introduced by applying the escape filter (alias e) to string objects.,What is the purpose of the escape filter in Blended?,"The escape filter in Blended is used to introduce escaped strings into the code, which helps prevent XSS (Cross-Site Scripting) attacks by converting special characters into their HTML entity equivalents."
Escaped strings may be introduced by applying the escape filter (alias e) to string objects.,Can the escape filter be used on variables or only on strings?,The escape filter can be applied to both strings and variables. It is typically used on strings to ensure that any special characters are properly encoded.
Escaped strings may be introduced by applying the escape filter (alias e) to string objects.,Is it possible to use the escape filter on a list or array of strings?,"Yes, the escape filter can be applied to a list or array of strings. It will escape each string in the list individually."
Escaped strings may be introduced by applying the escape filter (alias e) to string objects.,What happens if I apply the escape filter to a string that is already escaped?,"If a string is already escaped, applying the escape filter again will not change its content. The string will remain in its escaped form."
Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.,Can a variable be accessed if it is defined in a parent scope?,"Yes, a variable can be accessed if it is defined in a parent scope."
Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.,Can a variable be accessed if it is defined in an ancestor scope?,"Yes, a variable can be accessed if it is defined in an ancestor scope."
Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.,Can a variable be accessed if it is defined in the current scope?,"Yes, a variable can be accessed if it is defined in the current scope."
Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.,Can a variable be accessed if it is defined in a nested scope?,"Yes, a variable can be accessed if it is defined in a nested scope."
Data names may be referenced or accessed by a tag or expression if and only if it has previously been defined within the current scope or within a parent or ancestor scope.,Can a variable be accessed if it is defined in a sibling scope?,"No, a variable cannot be accessed if it is defined in a sibling scope."
"No data names used in any parent or ancestor scope may be modified or overridden within any child or descendant scope--they are read-only within the child or descendant scope. This means that names in use by the parent scope (or in any ancestor scope) may not be used as a target for set, as a macro name, as a name for a module imported using the import tag, or as an iteration item in the for tag. Only names declared within the current scope may be overwritten.",Can I use a variable declared in the parent scope within a child scope?,"Yes, you can use variables declared in the parent scope within a child scope."
"No data names used in any parent or ancestor scope may be modified or overridden within any child or descendant scope--they are read-only within the child or descendant scope. This means that names in use by the parent scope (or in any ancestor scope) may not be used as a target for set, as a macro name, as a name for a module imported using the import tag, or as an iteration item in the for tag. Only names declared within the current scope may be overwritten.",Can I define a macro with name of variable declared in the parent scope within a child scope?,It violates already learnt rule that multiple declarations are not allowed in Blended. 
"No data names used in any parent or ancestor scope may be modified or overridden within any child or descendant scope--they are read-only within the child or descendant scope. This means that names in use by the parent scope (or in any ancestor scope) may not be used as a target for set, as a macro name, as a name for a module imported using the import tag, or as an iteration item in the for tag. Only names declared within the current scope may be overwritten.",Can I use an iteration item in the for tag declared in the parent scope within a child scope?,"No, you cannot use iteration items declared in the parent scope within a child scope."
"No data names used in any parent or ancestor scope may be modified or overridden within any child or descendant scope--they are read-only within the child or descendant scope. This means that names in use by the parent scope (or in any ancestor scope) may not be used as a target for set, as a macro name, as a name for a module imported using the import tag, or as an iteration item in the for tag. Only names declared within the current scope may be overwritten.",Can I overwrite a variable declared in the parent scope within a child scope?,"No, you cannot overwrite variables declared in the parent scope within a child scope."
"Built-in function names are defined within the outermost scope, the “built-in” scope. By implication, no functions, variables, macros or imported modules may share a name with any built-in functions. Built-in functions are defined as part of the language specification itself.",What are the implications of the rule regarding built-in function names in Blended?,"Built-in function names are defined within the outermost scope, the “built-in” scope. No functions, variables, macros, or imported modules may share a name with any built-in functions. Built-in functions are defined as part of the language specification itself."
"Built-in function names are defined within the outermost scope, the “built-in” scope. By implication, no functions, variables, macros or imported modules may share a name with any built-in functions. Built-in functions are defined as part of the language specification itself.",Can I use a built-in function name as a variable or macro name in Blended?,"No, you cannot use a built-in function name as a variable or macro name in Blended. Built-in functions are defined within the outermost scope and are reserved for the language's built-in functionality."
"Built-in function names are defined within the outermost scope, the “built-in” scope. By implication, no functions, variables, macros or imported modules may share a name with any built-in functions. Built-in functions are defined as part of the language specification itself.",What happens if I try to define a function with the same name as a built-in function in Blended?,Attempting to define a function with the same name as a built-in function in Blended will result in a syntax error. The language specification explicitly prohibits this to maintain clarity and prevent conflicts with built-in functionality.
"Built-in function names are defined within the outermost scope, the “built-in” scope. By implication, no functions, variables, macros or imported modules may share a name with any built-in functions. Built-in functions are defined as part of the language specification itself.",Can I import built-in functions from other modules in Blended?,"No, you cannot import built-in functions from other modules in Blended. Built-in functions are part of the language specification and are not meant to be imported from external modules."
"Built-in function names are defined within the outermost scope, the “built-in” scope. By implication, no functions, variables, macros or imported modules may share a name with any built-in functions. Built-in functions are defined as part of the language specification itself.",What are the potential consequences of not following the rule regarding built-in function names in Blended?,"Not following the rule regarding built-in function names in Blended can lead to syntax errors, confusion, and potential security issues. It can also make it difficult to maintain and understand the codebase, as built-in functions are critical to the language's functionality."
"User-defined functions inhabit the second-level scope, the “user-function” scope, which is the child of the “built-in” scope. As follows from the rules above, no user-defined function may share the name of any built-in function, nor may any template-defined macro, variable or imported module share the name of any user-defined function. For purposes of Blended-Lint, user-defined functions are declared in a specifically-formatted JSON file that specifies each function’s name, argument data types, and possible return types.",What is the difference between the built-in scope and the user-function scope in Blended?,"The built-in scope contains all the functions, macros, variables, and modules that are predefined in Blended. The user-function scope is a child of the built-in scope and is where user-defined functions are declared."
"User-defined functions inhabit the second-level scope, the “user-function” scope, which is the child of the “built-in” scope. As follows from the rules above, no user-defined function may share the name of any built-in function, nor may any template-defined macro, variable or imported module share the name of any user-defined function. For purposes of Blended-Lint, user-defined functions are declared in a specifically-formatted JSON file that specifies each function’s name, argument data types, and possible return types.",Can a user-defined function have the same name as a built-in function in Blended?,"No, a user-defined function cannot have the same name as a built-in function in Blended."
"User-defined functions inhabit the second-level scope, the “user-function” scope, which is the child of the “built-in” scope. As follows from the rules above, no user-defined function may share the name of any built-in function, nor may any template-defined macro, variable or imported module share the name of any user-defined function. For purposes of Blended-Lint, user-defined functions are declared in a specifically-formatted JSON file that specifies each function’s name, argument data types, and possible return types.","Can a user-defined function have the same name as a template-defined macro, variable, or imported module in Blended?","No, a user-defined function cannot have the same name as a template-defined macro, variable, or imported module in Blended."
"User-defined functions inhabit the second-level scope, the “user-function” scope, which is the child of the “built-in” scope. As follows from the rules above, no user-defined function may share the name of any built-in function, nor may any template-defined macro, variable or imported module share the name of any user-defined function. For purposes of Blended-Lint, user-defined functions are declared in a specifically-formatted JSON file that specifies each function’s name, argument data types, and possible return types.",How is a user-defined function declared in Blended?,"A user-defined function is declared in a specifically-formatted JSON file that specifies each function’s name, argument data types, and possible return types."
"User-defined functions inhabit the second-level scope, the “user-function” scope, which is the child of the “built-in” scope. As follows from the rules above, no user-defined function may share the name of any built-in function, nor may any template-defined macro, variable or imported module share the name of any user-defined function. For purposes of Blended-Lint, user-defined functions are declared in a specifically-formatted JSON file that specifies each function’s name, argument data types, and possible return types.",What is the purpose of the JSON file used to declare user-defined functions in Blended?,"The JSON file used to declare user-defined functions in Blended specifies each function’s name, argument data types, and possible return types."
"“Application” scope is the child of the “user-function” scope, and is the parent of the template scope. As a result, it follows naturally that it is both immutable, and global within the template. Variables defined in the application scope are accessible inside all templates and tags, but no such variable may be modified or overwritten in any template by any tag.",What is the scope of the 'Application' scope in Blended?,The 'Application' scope is the child of the 'user-function' scope and is the parent of the template scope.
"“Application” scope is the child of the “user-function” scope, and is the parent of the template scope. As a result, it follows naturally that it is both immutable, and global within the template. Variables defined in the application scope are accessible inside all templates and tags, but no such variable may be modified or overwritten in any template by any tag.",Is the 'Application' scope immutable and global within the template?,"Yes, the 'Application' scope is both immutable and global within the template."
"“Application” scope is the child of the “user-function” scope, and is the parent of the template scope. As a result, it follows naturally that it is both immutable, and global within the template. Variables defined in the application scope are accessible inside all templates and tags, but no such variable may be modified or overwritten in any template by any tag.",What are the implications of the 'Application' scope being immutable and global?,"Variables defined in the 'Application' scope are accessible inside all templates and tags, but no such variable may be modified or overwritten in any template by any tag."
"“Application” scope is the child of the “user-function” scope, and is the parent of the template scope. As a result, it follows naturally that it is both immutable, and global within the template. Variables defined in the application scope are accessible inside all templates and tags, but no such variable may be modified or overwritten in any template by any tag.",Can variables defined in the 'Application' scope be accessed in nested templates?,"Yes, variables defined in the 'Application' scope are accessible in nested templates."
"“Application” scope is the child of the “user-function” scope, and is the parent of the template scope. As a result, it follows naturally that it is both immutable, and global within the template. Variables defined in the application scope are accessible inside all templates and tags, but no such variable may be modified or overwritten in any template by any tag.",What happens if a variable is defined in the 'Application' scope and then modified in a template?,A variable defined in the 'Application' scope cannot be modified or overwritten in any template by any tag.
"Any variable name that is referenced or accessed within the body of a template, but which has not been declared within the body of the template, should be assumed to have been introduced within the application scope. However, a JSON schema document may be provided to Blended-Lint which declares all of the application variables for a given template file. In the case that such a schema file is provided, any variable name that is referenced or accessed within the body of a template which has neither been declared within the body of the template nor declared within the JSON schema document shall be deemed an error (“variable undefined”), causing the file to be declared invalid.",What happens if a variable is referenced in the template but not declared within the template or the JSON schema?,The variable is deemed an error and the file is declared invalid.
"Any variable name that is referenced or accessed within the body of a template, but which has not been declared within the body of the template, should be assumed to have been introduced within the application scope. However, a JSON schema document may be provided to Blended-Lint which declares all of the application variables for a given template file. In the case that such a schema file is provided, any variable name that is referenced or accessed within the body of a template which has neither been declared within the body of the template nor declared within the JSON schema document shall be deemed an error (“variable undefined”), causing the file to be declared invalid.",Can a variable be declared within the template and then referenced later?,"Yes, as long as it is declared within the template or the JSON schema."
"Any variable name that is referenced or accessed within the body of a template, but which has not been declared within the body of the template, should be assumed to have been introduced within the application scope. However, a JSON schema document may be provided to Blended-Lint which declares all of the application variables for a given template file. In the case that such a schema file is provided, any variable name that is referenced or accessed within the body of a template which has neither been declared within the body of the template nor declared within the JSON schema document shall be deemed an error (“variable undefined”), causing the file to be declared invalid.",What if a variable is declared in the JSON schema but not referenced in the template?,"The variable is not considered an error, as it is declared in the JSON schema."
"Any variable name that is referenced or accessed within the body of a template, but which has not been declared within the body of the template, should be assumed to have been introduced within the application scope. However, a JSON schema document may be provided to Blended-Lint which declares all of the application variables for a given template file. In the case that such a schema file is provided, any variable name that is referenced or accessed within the body of a template which has neither been declared within the body of the template nor declared within the JSON schema document shall be deemed an error (“variable undefined”), causing the file to be declared invalid.",Can a variable be declared in the template and then referenced in the JSON schema?,"Yes, as long as it is declared within the template or the JSON schema."
"The “template” scope is the scope of all variables, macros and modules defined inside the root template, outside of all macro tags, block tags, and for...else statements.","What is the scope of variables, macros, and modules in a Blended template?","The scope of variables, macros, and modules in a Blended template is the root template, excluding all macro tags, block tags, and for...else statements."
"The “template” scope is the scope of all variables, macros and modules defined inside the root template, outside of all macro tags, block tags, and for...else statements.",Can variables defined in a macro be accessed outside of the macro?,"No, variables defined in a macro are not accessible outside of the macro."
"The “template” scope is the scope of all variables, macros and modules defined inside the root template, outside of all macro tags, block tags, and for...else statements.",How does the scope of a macro differ from the scope of a block tag?,"The scope of a macro is the root template, while the scope of a block tag is the block itself."
"The “template” scope is the scope of all variables, macros and modules defined inside the root template, outside of all macro tags, block tags, and for...else statements.",Can a for...else statement access variables defined in the root template?,"Yes, a for...else statement can access variables defined in the root template."
"The “template” scope is the scope of all variables, macros and modules defined inside the root template, outside of all macro tags, block tags, and for...else statements.",What happens if a variable is defined in a macro and then used in a block tag?,"The variable is not accessible in the block tag, as it is defined in the macro scope."
"Passing variable names as arguments is the only way for a macro to have access to any portion of the caller’s scope. The values are passed by reference, so while the values themselves are immutable, what values the argument names refer to may change within the “macro” scope. These variables are part of the “macro” scope.",What happens if a macro tries to modify a variable that is not passed as an argument?,The macro will not be able to modify the variable because it does not have access to the variable's value in the caller's scope.
"Passing variable names as arguments is the only way for a macro to have access to any portion of the caller’s scope. The values are passed by reference, so while the values themselves are immutable, what values the argument names refer to may change within the “macro” scope. These variables are part of the “macro” scope.",Can a macro access variables that are not defined in the caller's scope?,"No, a macro can only access variables that are explicitly passed as arguments."
"Passing variable names as arguments is the only way for a macro to have access to any portion of the caller’s scope. The values are passed by reference, so while the values themselves are immutable, what values the argument names refer to may change within the “macro” scope. These variables are part of the “macro” scope.",What happens if a macro tries to modify a variable that is passed as an argument but is not mutable?,The macro will not be able to modify the variable because it does not have access to the variable's value in the caller's scope.
"Passing variable names as arguments is the only way for a macro to have access to any portion of the caller’s scope. The values are passed by reference, so while the values themselves are immutable, what values the argument names refer to may change within the “macro” scope. These variables are part of the “macro” scope.",Can a macro access variables that are defined in the caller's scope but are not passed as arguments?,"No, a macro can only access variables that are explicitly passed as arguments."
"Macros can make recursive calls to themselves, but circular calls between and among macros is prohibited.",Can macros in Blended make recursive calls to themselves?,"Yes, macros in Blended can make recursive calls to themselves."
"Macros can make recursive calls to themselves, but circular calls between and among macros is prohibited.",Is it allowed for macros to call each other in a circular manner?,"No, circular calls between and among macros are prohibited."
"Macros can make recursive calls to themselves, but circular calls between and among macros is prohibited.",What happens if a macro calls itself in a way that creates a loop?,"Circular calls between macros are strictly prohibited, and attempting to do so will result in a compilation error."
"Macros can make recursive calls to themselves, but circular calls between and among macros is prohibited.",Can macros call each other directly without any restrictions?,"Yes, macros can call each other directly without any restrictions."
"Macros can make recursive calls to themselves, but circular calls between and among macros is prohibited.",What is the impact of a macro calling itself in a non-recursive manner?,A macro calling itself in a non-recursive manner is allowed and does not violate the rule.
"No macro may share the name of any other object defined before or after its definition in the same scope, or in any parent scope.",What happens if a macro in Blended shares the name of a variable defined in the same scope?,"The macro will not be defined, and we will get an error from the compiler"
"No macro may share the name of any other object defined before or after its definition in the same scope, or in any parent scope.",Can a macro in Blended share the name of a macro defined in a parent scope?,"The macro will not be defined, and we will get an error from the compiler"
"No macro may share the name of any other object defined before or after its definition in the same scope, or in any parent scope.",What if a macro in Blended shares the name of a function defined in the same scope?,"The macro will not be defined, and we will get an error from the compiler"
"No macro may share the name of any other object defined before or after its definition in the same scope, or in any parent scope.",Can a macro in Blended share the name of a class defined in the same scope?,"The macro will not be defined, and we will get an error from the compiler"
"No macro may share the name of any other object defined before or after its definition in the same scope, or in any parent scope.",What if a macro in Blended shares the name of a module defined in the same scope?,"The macro will not be defined, and we will get an error from the compiler"
"The macro statement may not appear inside an if...else statement, nor inside a for...else statement. Defining a macro using a macro tag inside of another macro tag, however, is permitted. Macro tags may only be used directly within the “template” scope, directly within the scope of a block statement, or within a “macro” scope.",Can a macro be defined inside a macro tag within another macro tag?,"Yes, defining a macro using a macro tag inside of another macro tag is permitted."
"The macro statement may not appear inside an if...else statement, nor inside a for...else statement. Defining a macro using a macro tag inside of another macro tag, however, is permitted. Macro tags may only be used directly within the “template” scope, directly within the scope of a block statement, or within a “macro” scope.",Can a macro be defined inside an if...else statement?,"No, the macro statement may not appear inside an if...else statement."
"The macro statement may not appear inside an if...else statement, nor inside a for...else statement. Defining a macro using a macro tag inside of another macro tag, however, is permitted. Macro tags may only be used directly within the “template” scope, directly within the scope of a block statement, or within a “macro” scope.",Can a macro be defined inside a for...else statement?,"No, the macro statement may not appear inside a for...else statement."
"The macro statement may not appear inside an if...else statement, nor inside a for...else statement. Defining a macro using a macro tag inside of another macro tag, however, is permitted. Macro tags may only be used directly within the “template” scope, directly within the scope of a block statement, or within a “macro” scope.",Can a macro be defined directly within the template scope?,"Yes, macro tags may only be used directly within the “template” scope."
"The macro statement may not appear inside an if...else statement, nor inside a for...else statement. Defining a macro using a macro tag inside of another macro tag, however, is permitted. Macro tags may only be used directly within the “template” scope, directly within the scope of a block statement, or within a “macro” scope.",Can a macro be defined directly within the scope of a block statement?,"Yes, macro tags may only be used directly within the scope of a block statement."
"“Block” scope describes the contents of block statements. Each separate block within a template has its own, independent scope, which does not have access or reference to any other block.",What happens if a variable is declared within a block in Blended?,A variable declared within a block is only accessible within that block. It does not affect or conflict with variables declared in other blocks.
"“Block” scope describes the contents of block statements. Each separate block within a template has its own, independent scope, which does not have access or reference to any other block.",Can a block access variables declared in a parent block?,"No, a block does not have access to variables declared in a parent block. Each block has its own independent scope."
"“Block” scope describes the contents of block statements. Each separate block within a template has its own, independent scope, which does not have access or reference to any other block.",What if a block contains a variable with the same name as a variable in a parent block?,The block's variable takes precedence over the parent block's variable. The parent block's variable is not accessible within the block.
"“Block” scope describes the contents of block statements. Each separate block within a template has its own, independent scope, which does not have access or reference to any other block.",Can a block modify a variable declared in a another block?,"No, a block cannot modify a variable declared in a another block. The block's scope is independent, and it does not have access to modify variables in the another block."
"The for...else statement effectively has three distinct scoping levels: the “iterator” scope, the “loop” scope, and the “else” scope. The for...else statement’s “iterator” scope persists for the duration of the tag’s execution, and contains the named item variables and the forloop variable. The for...else statement’s “loop” scope is a child scope encapsulated by the “iterator” scope. By this arrangement, the forloop variable and the named item variable(s) are prohibited from being modified inside the “loop” scope.",What is the scope of the 'iterator' in a Blended for...else statement?,The 'iterator' scope persists for the duration of the tag's execution and contains the named item variables and the forloop variable.
"The for...else statement effectively has three distinct scoping levels: the “iterator” scope, the “loop” scope, and the “else” scope. The for...else statement’s “iterator” scope persists for the duration of the tag’s execution, and contains the named item variables and the forloop variable. The for...else statement’s “loop” scope is a child scope encapsulated by the “iterator” scope. By this arrangement, the forloop variable and the named item variable(s) are prohibited from being modified inside the “loop” scope.",What is the scope of the 'loop' in a Blended for...else statement?,The 'loop' scope is a child scope encapsulated by the 'iterator' scope.
"The for...else statement effectively has three distinct scoping levels: the “iterator” scope, the “loop” scope, and the “else” scope. The for...else statement’s “iterator” scope persists for the duration of the tag’s execution, and contains the named item variables and the forloop variable. The for...else statement’s “loop” scope is a child scope encapsulated by the “iterator” scope. By this arrangement, the forloop variable and the named item variable(s) are prohibited from being modified inside the “loop” scope.",What are the restrictions on the 'loop' scope in a Blended for...else statement?,The forloop variable and the named item variable(s) are prohibited from being modified inside the 'loop' scope.
"The for...else statement effectively has three distinct scoping levels: the “iterator” scope, the “loop” scope, and the “else” scope. The for...else statement’s “iterator” scope persists for the duration of the tag’s execution, and contains the named item variables and the forloop variable. The for...else statement’s “loop” scope is a child scope encapsulated by the “iterator” scope. By this arrangement, the forloop variable and the named item variable(s) are prohibited from being modified inside the “loop” scope.",How does the 'iterator' scope differ from the 'loop' scope in a Blended for...else statement?,"The 'iterator' scope persists for the duration of the tag's execution, while the 'loop' scope is a child scope encapsulated by the 'iterator' scope."
"The for...else statement effectively has three distinct scoping levels: the “iterator” scope, the “loop” scope, and the “else” scope. The for...else statement’s “iterator” scope persists for the duration of the tag’s execution, and contains the named item variables and the forloop variable. The for...else statement’s “loop” scope is a child scope encapsulated by the “iterator” scope. By this arrangement, the forloop variable and the named item variable(s) are prohibited from being modified inside the “loop” scope.",What are the implications of the 'iterator' scope's persistence in a Blended for...else statement?,The 'iterator' scope's persistence allows for the named item variables and the forloop variable to be accessed and used throughout the tag's execution.
"The for...else statement’s “else” scope (which is coincident with the contents of the template segment that follows the else tag, termed the “else segment”) is a sibling of the “iterator” scope, and therefore only shares with it and the “loop” scope whatever variables are defined in the scope that contains the for...else statement itself. It does not have access to the forloop variable nor the named item variables from the “iterator” scope.",What is the scope of the 'else' segment in a Blended for...else statement?,The 'else' segment in a Blended for...else statement is a sibling of the 'iterator' scope and shares with it and the 'loop' scope whatever variables are defined in the scope that contains the for...else statement itself. It does not have access to the 'forloop' variable nor the named item variables from the 'iterator' scope.
"The for...else statement’s “else” scope (which is coincident with the contents of the template segment that follows the else tag, termed the “else segment”) is a sibling of the “iterator” scope, and therefore only shares with it and the “loop” scope whatever variables are defined in the scope that contains the for...else statement itself. It does not have access to the forloop variable nor the named item variables from the “iterator” scope.",Can the 'else' segment access variables defined in the 'iterator' scope?,"No, the 'else' segment does not have access to the variables defined in the 'iterator' scope."
"The for...else statement’s “else” scope (which is coincident with the contents of the template segment that follows the else tag, termed the “else segment”) is a sibling of the “iterator” scope, and therefore only shares with it and the “loop” scope whatever variables are defined in the scope that contains the for...else statement itself. It does not have access to the forloop variable nor the named item variables from the “iterator” scope.",Can the 'else' segment access the 'forloop' variable?,"No, the 'else' segment does not have access to the 'forloop' variable."
"The for...else statement’s “else” scope (which is coincident with the contents of the template segment that follows the else tag, termed the “else segment”) is a sibling of the “iterator” scope, and therefore only shares with it and the “loop” scope whatever variables are defined in the scope that contains the for...else statement itself. It does not have access to the forloop variable nor the named item variables from the “iterator” scope.",Can the 'else' segment access named item variables from the 'iterator' scope?,"No, the 'else' segment does not have access to named item variables from the 'iterator' scope."
"The for...else statement’s “else” scope (which is coincident with the contents of the template segment that follows the else tag, termed the “else segment”) is a sibling of the “iterator” scope, and therefore only shares with it and the “loop” scope whatever variables are defined in the scope that contains the for...else statement itself. It does not have access to the forloop variable nor the named item variables from the “iterator” scope.",What is the relationship between the 'else' segment and the 'iterator' scope in terms of variable access?,The 'else' segment is a sibling of the 'iterator' scope and shares with it and the 'loop' scope whatever variables are defined in the scope that contains the for...else statement itself. It does not have access to the 'forloop' variable nor the named item variables from the 'iterator' scope.
"However, a variable set inside an if...else statement may only be accessed after that statement if the variable is guaranteed to have already been set. If a variable is used after an if...else statement, that variable MUST have been (a) defined before entering the if...else statement, or (b) defined in both the if section and the else section of the if...else statement. If a variable is set only in the if section, or only in the else section, without being defined earlier on within the same scope, then it will not be available after the if...else statement.",What happens if a variable is set inside an if...else statement and then used outside of it?,The variable will not be available after the if...else statement unless it is defined before entering the if...else statement or defined in both the if section and the else section.
"However, a variable set inside an if...else statement may only be accessed after that statement if the variable is guaranteed to have already been set. If a variable is used after an if...else statement, that variable MUST have been (a) defined before entering the if...else statement, or (b) defined in both the if section and the else section of the if...else statement. If a variable is set only in the if section, or only in the else section, without being defined earlier on within the same scope, then it will not be available after the if...else statement.",Can a variable be set inside if section of if...else statement and then used in the else section without being defined before the if section?,"No, the variable will not be available after the if...else statement unless it is defined before entering the if...else statement or defined in both the if section and the else section."
"However, a variable set inside an if...else statement may only be accessed after that statement if the variable is guaranteed to have already been set. If a variable is used after an if...else statement, that variable MUST have been (a) defined before entering the if...else statement, or (b) defined in both the if section and the else section of the if...else statement. If a variable is set only in the if section, or only in the else section, without being defined earlier on within the same scope, then it will not be available after the if...else statement.",What if a variable is set inside an if section and else section of if else statement and used outside if else statement?,"Yes, it is valid since variable presence is guaranteed before usage. "