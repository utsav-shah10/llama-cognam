Show the index and value.
```jinja
{% for i, item in arr | items %}
  {{ i }}: {{ item }}
{% endfor %}
```

a macro that accepts a string parameter and returns it capitalized.
```jinja
{% macro capitalize(text) %}
  {{ text | upper }}
{% endmacro %}
```

a template include with a single object parameter.
```jinja
{% include "header.html" with {"title": "Home"} only %}
```

a nested for loop to create a nested table structure (3x3).
```jinja
{% for i in range(1, 4) %}
  {% for j in range(1, 4) %}
    Position {{ i }}x{{ j }}
  {% endfor %}
{% endfor %}
```

a block that contains a nested block and checks if the nested content exists.
```jinja
{% block main %}
  {% block content %}
    Default content
  {% endblock content %}
{% endblock main %}

{% ifblock content %}
  Custom content
{% endifblock %}
```

a filter chain that processes a string with multiple operations.
```jinja
{% set processed = text | string | upper | safe %}
```

a template that renders a nested object structure.
```jinja
{% set user = {"name": "John", "address": {"city": "New York", "zip": "10001"}} %}
{{ user.address.city }}
```

an if condition that checks multiple object properties.
```jinja
{% if user.isVerified and user.active %}
  User is verified and active
{% endif %}
```

a loop that creates a numbered list based on array length.
```jinja
{% for i in range(1, array.length + 1) %}
  Item {{ i }}: {{ array[i-1] }}
{% endfor %}
```3D

Let me help you generate these code snippets following all the template engine rules:

1. **for loop with index**
```jinja
{% for i, item in arr | items %}
  {{ i }}: {{ item }}
{% endfor %}
```

2. **capitalization macro**
```jinja
{% macro capitalize(text) %}
  {{ text | upper }}
{% endmacro %}
```

3. **include with parameter**
```jinja
{% include "header.html" with {"title": "Home"} only %}
```

4. **nested 3x3 loop**
```jinja
{% for i in