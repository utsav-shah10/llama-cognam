Task: create a block named error and render variable error_message in uppercase, Jinja Template: {% block error %} {{ error_message|upper }} {% endblock %}, Blended Template: 
Task: set variable "access" to "granted" if role == "admin", else "denied", then render it, Jinja Template: {% set access = "granted" if role == "admin" else "denied" %}, Blended Template: 
Task: Write a template to apply floor function to 9.3 and store in variable floored_value then render it, Jinja Template: {% set floored_value = 9.3|floor %} {{ floored_value }}, Blended Template: 
Task: Write a template to get the length of variable menu_items and render Total items: + result, Jinja Template: Total items: {{ menu_items|length }}, Blended Template: 
Task: set variable "encryption" to "on" if secure_mode is true, else "off", then print "Encryption: " + encryption, Jinja Template: {% set encryption = "on" if secure_mode else "off" %} Encryption: {{ encryption }}, Blended Template: 
Task: create a block named loading and print Please wait... if variable is_loading is true, Jinja Template: {% if is_loading %} Please wait... {% endif %}, Blended Template: 
Task: print the string "Error: Not found", Jinja Template: {{ "Error: Not found" }}, Blended Template: 
Task: create a macro named format_currency that takes amount and currency parameters, set symbol to $ if currency is USD else €, return symbol + amount, Jinja Template: {% macro format_currency(amount, currency) %} {% if currency == 'USD' %} ${{ amount }} {% else %} €{{ amount }} {% endif %} {% endmacro %}, Blended Template: 
Task: Write a template to calculate the mean of array variable "scores" and print the result, Jinja Template: {{ mean(scores) }}, Blended Template: 
Task: Write a template to apply floor function to the number 3.7 and print the result, Jinja Template: {{ floor(3.7) }}, Blended Template: 
Task: convert "BACKUP COMPLETED" to title case, then set "status_msg" to result, then print it, Jinja Template: {{ status_msg = "BACKUP COMPLETED".title() }} {{ print(status_msg) }}, Blended Template: 
Task: create a macro named timestamp that takes time parameter and formats with brackets, Jinja Template: {% macro timestamp(time) %} [{{ time }}] {% endmacro %}, Blended Template: 
Task: create a block named title with content Home Page, Jinja Template: {% block title %} Home Page {% endblock %}, Blended Template: 
Task: Write a template to calculate the mean of array variable times and render Average time: + result, Jinja Template: Average time: {{ sum(array_variable_times) / len(array_variable_times) }}, Blended Template: 
Task: render the number 0, Jinja Template: {{ 0 }}, Blended Template: 
Task: concatenate "Version " and "2.0" and print it, Jinja Template: {{ "Version " + "2.0" }}, Blended Template: 
Task: Write a template to get the length of variable "shopping_cart" and store in "item_count", then print "Items: " + item_count, Jinja Template: {% set item_count = shopping_cart|length %} Items: {{ item_count }}, Blended Template: 
Task: create a block named toolbar and print Save | Edit | Delete, Jinja Template: {% block toolbar %} Save | Edit | Delete {% endblock %}, Blended Template: 
Task: create a macro named calculate_discount that takes original_price and percentage parameters, set discount_amount to original_price * percentage / 100, return original_price - discount_amount, Jinja Template: {% macro calculate_discount(original_price, percentage) %} {% set discount_amount = original_price * percentage / 100 %} {{ original_price - discount_amount }} {% endmacro %}, Blended Template: 
Task: Write a template to create a range from 0 to variable limit and assign it to variable 'a'., Jinja Template: {% set a = range(0, limit) %}, Blended Template: 
Task: create a macro named badge that takes text and color parameters and creates colored badge, Jinja Template: {% macro badge(text, color) %} <span style="background-color: {{ color }}; color: white; padding: 5px 10px; border-radius: 5px;">{{ text }}</span> {% endmacro %}, Blended Template: 
Task: set variable "priority" to "high" and render it after converting to upper case, Jinja Template: {{ priority = 'high' }} {{ priority.upper() }}, Blended Template: 
Task: convert the string "world" to uppercase and print it, Jinja Template: {{ "world".upper() }}, Blended Template: 
Task: concatenate "Order #" and variable "order_id", then set "order_label" to result, then print it, Jinja Template: {{ order_label = "Order #" + order_id }} {{ order_label }}, Blended Template: 
Task: convert variable "server_name" to lowercase, then concatenate with ".local" and print "Server: " + result, Jinja Template: {{ 'Server: ' + server_name.lower() + '.local' }}, Blended Template: 
Task: Write a template to calculate the mean of array variable "ratings" and store in "average_rating", then print "Average: " + average_rating, Jinja Template: {% set average_rating = sum(ratings) / len(ratings) %} Average: {{ average_rating }}, Blended Template: 
Task: loop through numbers 1 to 3 and print Step + number + complete, Jinja Template: {% for step in range(1, 4) %} Step {{ step }} + number + complete {% endfor %}, Blended Template: 
Task: Write a template to create a range from 0 to variable "max_count" and assign it to variable 'a'., Jinja Template: {% set a = range(max_count) %}, Blended Template: 
Task: convert variable "task_name" to title case, then set "task_label" to result + " Task", then print it, Jinja Template: {{ task_name|title }} Task, Blended Template: 
Task: set variable "size" to "large" if quantity > 10, else "small", then convert to uppercase and render it, Jinja Template: {{ size = 'large' if quantity > 10 else 'small' }} {{ size.upper() }}, Blended Template: 
Task: create a macro named greet that takes name parameter and prints Hello + name, Jinja Template: {% macro greet(name) %} Hello {{ name }} {% endmacro %}, Blended Template: 
Task: Write a template to calculate the mean of variable ratings and store in mean_rating then print it, Jinja Template: {% set mean_rating = sum(ratings) / len(ratings) %} {{ mean_rating }}, Blended Template: 
Task: Write a template to calculate the mean of variable prices and render it, Jinja Template: {% set prices = [10, 20, 30, 40, 50] %} {% set total = sum(prices) %} {% set count = len(prices) %} {% set mean = total / count %} {{ mean }}, Blended Template: 
Task: convert variable "environment" to lowercase, then set variable "env_name" to result + "_env", then print it, Jinja Template: {{ env_name = environment.lower() + "_env" }} {{ env_name }}, Blended Template: 
Task: render the number 3.14, Jinja Template: {{ 3.14 }}, Blended Template: 
Task: Write a template to apply floor function to variable height and render it, Jinja Template: {{ height | floor }}, Blended Template: 
Task: convert the number 0 to string and store in "zero_str", Jinja Template: {% set zero_str = "0" %}, Blended Template: 
Task: loop through array variable emails and render each email in lowercase, Jinja Template: {% for email in emails %} {{ email|lower }} {% endfor %}, Blended Template: 
Task: create a macro named format_percentage that takes decimal parameter, set percentage to decimal * 100, return percentage with % symbol, Jinja Template: {% macro format_percentage(decimal) %} {{ decimal * 100 }}% {% endmacro %}, Blended Template: 
Task: create a block named alerts and print variable alert_message if it exists, Jinja Template: {% if alert_message %} {{ alert_message }} {% endif %}, Blended Template: 
Task: create a block named banner and print Special Offer Today!, Jinja Template: {% block banner %} Special Offer Today! {% endblock %}, Blended Template: 
Task: Write a template to get the length of array variable "items" and print the result, Jinja Template: {{ len(items) }}, Blended Template: 
Task: create a macro named create_link that takes url and text parameters and creates HTML link, Jinja Template: {% macro create_link(url, text) %} <a href="{{ url }}">{{ text }}</a> {% endmacro %}, Blended Template: 
Task: Write a template to create a range from 1 to 10 and store in variable "numbers", then print the length of numbers, Jinja Template: {% set numbers = range(1, 11) %} {{ numbers | length }}, Blended Template: 
Task: print a variable named "username", Jinja Template: {{ username }}, Blended Template: 
Task: create a macro named format_title that takes word parameter and returns word in title case, Jinja Template: {% macro format_title(word) %} {{ word|title }} {% endmacro %}, Blended Template: 
Task: concatenate variable "first_name" and "last_name" with space, then convert to title case and render it, Jinja Template: {{ first_name|title }} {{ last_name|title }}, Blended Template: 
Task: render the number -5, Jinja Template: -5, Blended Template: 
Task: truncate the number 3.14159 and render it, Jinja Template: {{ 3.14159 | round(2) }}, Blended Template: 
Task: create a block named menu and print variable menu_items joined with |, Jinja Template: {% block menu %} {{ menu_items | join(' | ') }} {% endblock %}, Blended Template: 
Task: Write a template to create a range from variable "start" to variable "end" and store in "sequence", then print "Range created", Jinja Template: {{ sequence = range(start, end) }} Range created, Blended Template: 
Task: concatenate variable "protocol" and "://" and variable "hostname", then print "URL: " + result, Jinja Template: {{ protocol }}://{{ hostname }}, Blended Template: 
Task: create a macro named format_score that takes score parameter and truncates then adds /100, Jinja Template: {% macro format_score(score) %} {{ score | round(2) / 100 }} {% endmacro %}, Blended Template: 
Task: create a macro named button that takes text and action parameters and creates button, Jinja Template: {% macro button(text, action) %} <button onclick="{{ action }}">{{ text }}</button> {% endmacro %}, Blended Template: 
Task: create a block named breadcrumb and render variable breadcrumb_path, Jinja Template: {% block breadcrumb %} <nav aria-label="breadcrumb"> <ol class="breadcrumb"> {% for path in breadcrumb_path %} <li class="breadcrumb-item"><a href="{{ path.url }}">{{ path.name }}</a></li> {% endfor %} </ol> </nav> {% endblock %}, Blended Template: 
Task: set variable "status" to "online" if active is true, else "offline", then convert to uppercase and print it, Jinja Template: {{ 'online' if active else 'offline' | upper }}, Blended Template: 
Task: Write a template to create a range from 5 to variable end_num and assign it to variable 'a'., Jinja Template: {% set a = range(5, end_num) %}, Blended Template: 
Task: Write a template to get the length of variable "config_options" and render"Total options: " + result, Jinja Template: Total options: {{ config_options|length }}, Blended Template: 
Task: concatenate "Session " and variable "session_id", then convert to lowercase and render it, Jinja Template: {{ session_id|lower|concat('Session ') }}, Blended Template: 
Task: loop through variable categories and render each category in title case, Jinja Template: {% for category in categories %} {{ category|title }} {% endfor %}, Blended Template: 
Task: Print list [1,2,3], Jinja Template: {{ [1, 2, 3] }}, Blended Template: 
Task: convert "SYSTEM" to lowercase and print it, Jinja Template: {{ "SYSTEM".lower() }}, Blended Template: 
Task: create a macro named format_user that takes user parameter and renders user.name if user exists else prints Guest, Jinja Template: {% macro format_user(user) %} {% if user %} {{ user.name }} {% else %} Guest {% endif %} {% endmacro %}, Blended Template: 
Task: loop through variable words and print each word in title case with index, Jinja Template: {% for index, word in enumerate(words) %} {{ index }}: {{ word|title }} {% endfor %}, Blended Template: 
Task: loop through variable files and display each filename with extension .txt, Jinja Template: {% for file in variable_files %} {{ file }} {% endfor %}, Blended Template: 
Task: set variable "level" to 1 and render it, Jinja Template: {{ level = 1 }}, Blended Template: 
Task: loop through variable colors and render each color with index, Jinja Template: {% for index, color in enumerate(colors) %} {{ index }}: {{ color }} {% endfor %}, Blended Template: 
Task: print the string "Success!", Jinja Template: {{ "Success!" }}, Blended Template: 
Task: Write a template to apply floor function to 7.8 and render it, Jinja Template: {{ 7.8|floor }}, Blended Template: 
Task: loop through variable messages and print each message in lowercase, Jinja Template: {% for message in messages %} {{ message|lower }} {% endfor %}, Blended Template: 
Task: set variable "priority" to "high" if urgent is true, else "normal", then convert to uppercase and print it, Jinja Template: {{ priority = 'high' if urgent else 'normal' }} {{ priority.upper() }}, Blended Template: 
Task: create a macro named calculate_shipping that takes weight and zone parameters, set base_rate to 5, add extra charges based on weight and zone, return total shipping cost, Jinja Template: {% macro calculate_shipping(weight, zone) %} {% set base_rate = 5 %} {% set extra_charge = weight * 0.1 + zone * 2 %} {{ base_rate + extra_charge }} {% endmacro %}, Blended Template: 
Task: loop through numbers 1 to 3 and render "Item" + number, Jinja Template: {% for number in range(1, 4) %} Item{{ number }} {% endfor %}, Blended Template: 
Task: set variable "message" to "Good morning" and print it, Jinja Template: {{ message = "Good morning" }} {{ message }}, Blended Template: 
Task: loop through tasks and set priority_level to urgent if task.deadline < 7 else normal, set new_status to high_priority if priority_level is urgent else keep original status, print task.name + : + new_status, Jinja Template: {% for task in tasks %} {% set priority_level = 'urgent' if task.deadline < 7 else 'normal' %} {% set new_status = 'high_priority' if priority_level == 'urgent' else task.status %} {{ task.name }}: {{ new_status }} {% endfor %}, Blended Template: 
Task: loop through files and set size_mb by converting bytes to MB, set category to large if size_mb > 100 else small, render file.name + : + category, Jinja Template: {% for file in files %} {{ file.name }}: {{ file.size_mb }}MB {% if file.size_mb > 100 %} large {% else %} small {% endif %} {% endfor %}, Blended Template: 
Task: create a block named navigation with links Home | About | Contact, Jinja Template: {% block navigation %} <ul> <li><a href="/">Home</a></li> <li><a href="/about">About</a></li> <li><a href="/contact">Contact</a></li> </ul> {% endblock %}, Blended Template: 
Task: convert the string "world" to uppercase and print it, Jinja Template: {{ "world".upper() }}, Blended Template: 
Task: Write a template to get the length of object variable "user_data" and render it, Jinja Template: {{ len(user_data) }}, Blended Template: 
Task: loop through surveys and set completion_status to complete if survey.questions_answered equals survey.total_questions else incomplete, render survey.id + : + completion_status, Jinja Template: {% for survey in surveys %} {{ survey.id }}: {{ 'complete' if survey.questions_answered == survey.total_questions else 'incomplete' }} {% endfor %}, Blended Template: 
Task: create a block named main and print Main content area, Jinja Template: {% block main %} Main content area {% endblock %}, Blended Template: 
Task: Write a template to calculate the mean of variable weights and print Mean weight: + result, Jinja Template: {{ mean_weight = sum(weights) / len(weights) }} Mean weight: {{ mean_weight }}, Blended Template: 
Task: loop through numbers 1 to 5 and display Count: + number for odd numbers only, Jinja Template: {% for number in range(1, 6) %} {% if number % 2 != 0 %} Count: + {{ number }} {% endif %} {% endfor %}, Blended Template: 
Task: convert variable "country" to upper case, join with variable "city", and print it., Jinja Template: {{ country.upper() + city }}, Blended Template: 
Task: loop through variable items and render each item, Jinja Template: {% for item in items %} {{ item }} {% endfor %}, Blended Template: 
Task: convert variable "service_name" to title case, then set "display_name" to result + " Service", then print it, Jinja Template: {{ service_name|title }} Service, Blended Template: 
Task: concatenate "Hello " and variable "name", then convert the result to title case and render it, Jinja Template: {{ name|title }}, Blended Template: 
Task: create a macro named show_version that takes version parameter and prints v + version, Jinja Template: {% macro show_version(version) %} v{{ version }} {% endmacro %}, Blended Template: 
Task: set variable "message" to "Welcome back" if returning_user is true, else "Welcome", then print result + "!", Jinja Template: {% set message = "Welcome back" if returning_user else "Welcome" %} {{ message }}!, Blended Template: 
Task: create a block named user_info and render Welcome + variable username, Jinja Template: {% block user_info %} Welcome {{ username }} {% endblock %}, Blended Template: 
Task: print the number 42, Jinja Template: {{ 42 }}, Blended Template: 
Task: create a macro named display_priority that takes priority parameter and shows in uppercase, Jinja Template: {% macro display_priority(priority) %} {{ priority.upper() }} {% endmacro %}, Blended Template: 
Task: convert "system administrator" to title case, then set "role_name" to result, then render it, Jinja Template: {{ system_administrator|title }}|role_name, Blended Template: 
Task: create a macro named show_error that takes message parameter and prints message in uppercase with ERROR:, Jinja Template: {% macro show_error(message) %} ERROR: {{ message.upper() }} {% endmacro %}, Blended Template: 
Task: set variable "backup" to "automatic" if scheduled is true, else "manual", then render "Backup: " + backup, Jinja Template: {% set backup = "automatic" if scheduled else "manual" %} Backup: {{ backup }}, Blended Template: 
Task: Render a boolean value "true", Jinja Template: {{ true }}, Blended Template: 
Task: create a macro named tag_list that takes tags parameter and displays tags with #, Jinja Template: {% macro tag_list(tags) %} {% for tag in tags %} #{{ tag }} {% endfor %} {% endmacro %}, Blended Template: 
Task: create a macro named header_text that takes text parameter and creates h1 element, Jinja Template: {% macro header_text(text) %} <h1>{{ text }}</h1> {% endmacro %}, Blended Template: 
Task: create a block named modal and render variable modal_content, Jinja Template: {% block modal %} {{ modal_content }} {% endblock %}, Blended Template: 
Task: concatenate "Report " and variable "report_id" and " - " and variable "report_date", then render the result, Jinja Template: {{ "Report " + report_id + " - " + report_date }}, Blended Template: 
Task: set variable "max_attempts" to 3 if user_level < 5, else 10, then convert to string and concatenate with " attempts remaining" and print it, Jinja Template: {{ max_attempts = user_level < 5 ? 3 : 10 }} {{ max_attempts_str = str(max_attempts) }} {{ print(max_attempts_str + " attempts remaining") }}, Blended Template: 
Task: convert variable "department_code" to uppercase, then join with ":" and variable "employee_id", then set "badge_number" to result and render it, Jinja Template: {% set badge_number = department_code.upper() + ":" + employee_id %} {{ badge_number }}, Blended Template: 
Task: create a range from variable "start_point" to variable "end_point", assign to "data_range", then loop through and print "Item: " + number for even numbers only, Jinja Template: {% set data_range = range(start_point, end_point + 1) %} {% for number in data_range %} {% if number % 2 == 0 %} Item: {{ number }} {% endif %} {% endfor %}, Blended Template: 
Task: convert "PROCESSING REQUEST" to title case, then concatenate with " - " and variable "request_id", then convert result to lowercase and print it, Jinja Template: {{ PROCESSING_REQUEST|title }} - {{ request_id|lower }}, Blended Template: 
Task: set variable "discount_rate" to 0.15 if total_amount > 100, else 0.05, then convert to string and join with "%" and render "Discount: " + result, Jinja Template: {% set discount_rate = total_amount > 100 ? 0.15 : 0.05 %} {% set result = discount_rate * 100 %} {% set discount_str = result | string %} {% set final_result = "Discount: " + discount_str + "%" %} {{ final_result }}, Blended Template: 
Task: truncate variable "calculated_score" and convert to string, then concatenate with "/100" and set "final_score" to result, then print it, Jinja Template: {{ final_score = calculated_score | string | replace(' ', '') | replace('.', '') | replace(',', '') | replace('-', '') | replace('+', '') | replace('=', '') | replace('!', '') | replace('?', '') | replace('(', '') | replace(')', '') | replace('[', '') | replace(']', '') | replace('{', '') | replace('}', '') | replace('|', '') | replace('&', '') | replace('*', '') | replace('^', '') | replace('%', '') | replace('#', '') | replace('$', '') | replace('@', '') | replace('~', '') | replace('`', '') | replace(';', '') | replace(':', '') | replace('`', '') | replace('\'', '') | replace('\"', '') | replace('\'', '') | replace('\"', '') | replace('\'', '') | replace('\"', '') | replace('\'', '') | replace('\"', '') | replace('\'', '') | replace('\"', '') | replace('\'', '') | replace('\"', '') | replace('\'', '') | replace('\"', '') | replace('\'', '') | replace('\"', '') | replace('\'', '') | replace('\"', '') | replace(', Blended Template: 
Task: convert variable "service_name" to title case, then join with " Service" and variable "version_number", then convert to uppercase and render it, Jinja Template: {{ service_name|title }} Service {{ version_number|upper }}, Blended Template: 
Task: loop through numbers 10 to 20 and display "Processing item " + number + " of 20" for numbers divisible by 3 only, Jinja Template: {% for number in range(10, 21) %} {% if number % 3 == 0 %} Processing item {{ number }} of 20 {% endif %} {% endfor %}, Blended Template: 
Task: convert "user management system" to title case, then set "system_name" to result, then concatenate with " v" and variable "version" and print it, Jinja Template: {{ user_management_system.title() }} v{{ version }}, Blended Template: 
Task: set variable "access_level" to "admin" if user_role == "manager", else "user", then convert to uppercase and render "ACCESS: " + result, Jinja Template: {% set access_level = "admin" if user_role == "manager" else "user" %} {{ access_level.upper() }} ACCESS: {{ access_level }}, Blended Template: 
Task: convert variable "error_message" to lowercase, then replace spaces with underscores and set "log_entry" to result, then print it, Jinja Template: {{ log_entry = error_message.lower().replace(' ', '_') }} {{ log_entry }}, Blended Template: 
Task: join variable "protocol" and "://" and variable "server_name" and ":" and variable "port_number", then set "full_url" to result and render it, Jinja Template: {{ full_url = protocol + "://" + server_name + ":" + port_number }}, Blended Template: 
Task: convert "BACKUP IN PROGRESS" to title case, then concatenate with " - " and truncated variable "progress_percent" and "%" and print it, Jinja Template: {{ "BACKUP IN PROGRESS".title() }} - {{ progress_percent }}%, Blended Template: 
Task: set variable "priority_level" to "urgent" if severity > 8, else "normal", then convert to title case and render "Priority: " + result, Jinja Template: {% set priority_level = "urgent" if severity > 8 else "normal" %} {{ priority_level|title }} Priority: {{ priority_level }}, Blended Template: 
Task: convert variable "category_name" to lowercase, then join with "_" and variable "item_id", then set "reference_key" to result and print it, Jinja Template: {{ reference_key = category_name.lower() + "_" + item_id }} {{ reference_key }}, Blended Template: 
Task: create a range from 1 to variable "max_items", assign to "item_list", then loop and print "Loading item " + number for odd numbers only, Jinja Template: {% set item_list = range(1, max_items + 1) %} {% for item in item_list %} {% if item % 2 != 0 %} Loading item {{ item }} {% endif %} {% endfor %}, Blended Template: 
Task: convert "SYSTEM MAINTENANCE" to title case, then set "maintenance_msg" to result + " scheduled", then convert to lowercase and render it, Jinja Template: {{ "SYSTEM MAINTENANCE".title() + " scheduled".lower() }}, Blended Template: 
Task: join variable "first_name" and variable "middle_initial" and variable "last_name" with spaces, then convert to title case and print "Full Name: " + result, Jinja Template: {{ "Full Name: " + first_name.title() + " " + middle_initial.title() + " " + last_name.title() }}, Blended Template: 
Task: set variable "timeout_value" to 30 if connection_type == "slow", else 10, then convert to string and concatenate with " seconds" and render it, Jinja Template: {{ timeout_value = connection_type == "slow" ? 30 : 10 }} {{ timeout_value = timeout_value | string }} {{ timeout_value = timeout_value + " seconds" }}, Blended Template: 
Task: convert variable "status_code" to string and join with " - " and variable "status_text", then set "response_info" to result and print it, Jinja Template: {{ response_info = status_code | string + " - " + status_text }} {{ response_info }}, Blended Template: 
Task: truncate variable "average_rating" and convert to string, then join with "/5 stars" and render "Rating: " + result, Jinja Template: {{ 'Rating: ' + average_rating | string | truncate(2) + '/5 stars' }}, Blended Template: 
Task: convert "configuration manager" to title case, then set "role_title" to result, then concatenate with " - " and variable "department" and print it, Jinja Template: {{ configuration_manager.title() }} - {{ department }}, Blended Template: 
Task: loop through numbers 5 to 15 and display "Step " + number + " completed" for numbers greater than 10 only, Jinja Template: {% for number in range(5, 16) %} {% if number > 10 %} Step {{ number }} completed {% endif %} {% endfor %}, Blended Template: 
Task: convert variable "command_name" to uppercase, then join with "_" and variable "parameter_count" and set "function_key" to result, then render it, Jinja Template: {{ command_name.upper() }}_{{ parameter_count }}|function_key, Blended Template: 
Task: set variable "memory_usage" to "high" if ram_percent > 80, else "normal", then convert to uppercase and print "MEMORY: " + result, Jinja Template: {% set memory_usage = "high" if ram_percent > 80 else "normal" %} {{ memory_usage.upper() }}: MEMORY, Blended Template: 
Task: convert "DATA SYNCHRONIZATION" to title case, then concatenate with " - " and variable "sync_time" and " ms", then convert to lowercase and render it, Jinja Template: {{ 'DATA SYNCHRONIZATION'.title() }} - {{ sync_time }} ms, Blended Template: 
Task: join variable "country_code" and "-" and variable "region_code" and "-" and variable "city_code", then set "location_id" to result and print it, Jinja Template: {{ location_id = country_code + "-" + region_code + "-" + city_code }} {{ location_id }}, Blended Template: 
Task: convert variable "file_extension" to lowercase, then join with "." and variable "filename", then set "full_filename" to result and render it, Jinja Template: {{ full_filename = filename + "." + file_extension.lower() }}, Blended Template: 
Task: set variable "retry_count" to 5 if error_type == "timeout", else 2, then convert to string and concatenate with " retries" and print it, Jinja Template: {% set retry_count = "5" if error_type == "timeout" else "2" %} {{ retry_count }} retries, Blended Template: 
Task: convert "NETWORK CONNECTION" to title case, then set "connection_status" to result + " established", then convert to uppercase and render it, Jinja Template: {{ "NETWORK CONNECTION" | title }} established | upper, Blended Template: 
Task: truncate variable "completion_percentage" and convert to string, then join with "%" and render "Progress: " + result, Jinja Template: {{ "Progress: " + completion_percentage | string | truncate(2) + "%" }}, Blended Template: 
Task: convert variable "log_level" to uppercase, then join with ": " and variable "log_message", then set "log_entry" to result and print it, Jinja Template: {{ log_entry = log_level.upper() + ": " + log_message }} {{ log_entry }}, Blended Template: 
Task: create a range from variable "min_value" to variable "max_value", assign to "value_range", then loop and print "Value: " + number for even numbers only, Jinja Template: {% set value_range = range(min_value, max_value + 1) %} {% for number in value_range %} {% if number % 2 == 0 %} Value: {{ number }} {% endif %} {% endfor %}, Blended Template: 
Task: convert "user authentication service" to title case, then set "service_title" to result, then concatenate with " " and variable "build_number" and render it, Jinja Template: {{ user_authentication_service|title }} {{ build_number }}, Blended Template: 
Task: set variable "cache_expiry" to 3600 if data_type == "static", else 900, then convert to string and join with " seconds" and print it, Jinja Template: {{ cache_expiry = data_type == "static" and 3600 or 900 }} {{ cache_expiry_str = str(cache_expiry) + " seconds" }} {{ cache_expiry_str }}, Blended Template: 
Task: convert variable "operation_type" to lowercase, then join with "_" and variable "timestamp", then set "operation_id" to result and render it, Jinja Template: {{ operation_id = operation_type.lower() + "_" + timestamp }}, Blended Template: 
Task: join variable "api_version" and "." and variable "minor_version" and "." and variable "patch_version", then set "version_string" to result and print it, Jinja Template: {{ version_string = api_version ~ "." ~ minor_version ~ "." ~ patch_version }} {{ version_string }}, Blended Template: 
Task: convert "RESOURCE ALLOCATION" to title case, then concatenate with " - " and truncated variable "allocation_percent" and "%", then convert to lowercase and render it, Jinja Template: {{ 'RESOURCE ALLOCATION'.title() }} - {{ allocation_percent }}%, Blended Template: 
Task: set variable "thread_count" to 8 if cpu_cores > 4, else 4, then convert to string and concatenate with " threads" and print it, Jinja Template: {{ thread_count = cpu_cores > 4 and 8 or 4 }} {{ thread_count = str(thread_count) }} {{ print(thread_count + " threads") }}, Blended Template: 
Task: convert variable "queue_name" to uppercase, then join with "_" and variable "queue_id", then set "queue_identifier" to result and render it, Jinja Template: {{ queue_identifier = queue_name.upper() + "_" + queue_id }}, Blended Template: 
Task: loop through numbers 2 to 12 and display "Processing batch " + number + " of 12" for numbers divisible by 4 only, Jinja Template: {% for number in range(2, 13) %} {% if number % 4 == 0 %} Processing batch {{ number }} of 12 {% endif %} {% endfor %}, Blended Template: 
Task: convert "session management" to title case, then set "feature_name" to result, then concatenate with " - " and variable "session_timeout" and " min" and print it, Jinja Template: {{ session_management|title }} - {{ session_timeout }} min, Blended Template: 
Task: set variable "compression_level" to "high" if file_size > 1000, else "low", then convert to uppercase and render "COMPRESSION: " + result, Jinja Template: {{ compression_level = 'high' if file_size > 1000 else 'low' }} {{ compression_level = compression_level.upper() }} COMPRESSION: {{ compression_level }}, Blended Template: 
Task: convert variable "database_name" to lowercase, then join with "_" and variable "table_name", then set "full_table_name" to result and print it, Jinja Template: {{ full_table_name = database_name.lower() + "_" + table_name }} {{ print(full_table_name) }}, Blended Template: 
Task: truncate variable "response_time" and convert to string, then join with " ms" and render "Response Time: " + result, Jinja Template: {{ 'Response Time: ' + response_time|truncate(5)|string + ' ms' }}, Blended Template: 
Task: convert "PERMISSION DENIED" to title case, then set "error_title" to result, then concatenate with " - " and variable "resource_name" and render it, Jinja Template: {{ resource_name }} - {{ PERMISSION_DENIED|title }}, Blended Template: 
Task: join variable "scheme" and "://" and variable "host" and "/" and variable "path", then set "complete_url" to result and print it, Jinja Template: {{ complete_url = scheme + "://" + host + "/" + path }} {{ complete_url }}, Blended Template: 
Task: set variable "batch_size" to 1000 if record_count > 10000, else 100, then convert to string and concatenate with " records" and render it, Jinja Template: {% set batch_size = record_count > 10000 ? 1000 : 100 %} {{ batch_size }} records, Blended Template: 
Task: convert variable "notification_type" to title case, then join with " " and variable "notification_id", then set "notification_key" to result and print it, Jinja Template: {{ notification_type|title }} {{ notification_id }} | notification_key = {{ notification_type|title }} {{ notification_id }}, Blended Template: 
Task: create a range from 0 to variable "total_pages", assign to "page_range", then loop and print "Page " + number + " loaded" for odd numbers only, Jinja Template: {% set page_range = range(total_pages) %} {% for number in page_range %} {% if number % 2 != 0 %} Page {{ number }} loaded {% endif %} {% endfor %}, Blended Template: 
Task: convert "SECURITY VALIDATION" to title case, then concatenate with " - " and variable "validation_result", then convert to lowercase and render it, Jinja Template: {{ 'SECURITY VALIDATION'.title() }} - {{ validation_result|lower }}, Blended Template: 
Task: set variable "connection_timeout" to 60 if network_speed == "slow", else 30, then convert to string and join with "s" and print it, Jinja Template: {{ connection_timeout = network_speed == "slow" and 60 or 30 }} {{ connection_timeout_str = str(connection_timeout) }} {{ print(connection_timeout_str + "s") }}, Blended Template: 
Task: convert variable "metric_name" to uppercase, then join with "_" and variable "metric_value", then set "metric_key" to result and render it, Jinja Template: {{ metric_key = metric_name.upper() + "_" + metric_value }}, Blended Template: 
Task: join variable "year" and "-" and variable "month" and "-" and variable "day", then set "date_string" to result and print it, Jinja Template: {{ date_string = year - month - day }} {{ date_string }}, Blended Template: 
Task: convert "load balancer configuration" to title case, then set "config_name" to result, then concatenate with " v" and variable "config_version" and render it, Jinja Template: {{ config_name = "load balancer configuration".title() }} {{ config_name = config_name + " v" + config_version }}, Blended Template: 
Task: truncate variable "cpu_usage" and convert to string, then join with "%" and render "CPU Usage: " + result, Jinja Template: {{ "CPU Usage: " + cpu_usage | string | truncate(5) + "%" }}, Blended Template: 
Task: set variable "pool_size" to 20 if concurrent_users > 100, else 10, then convert to string and concatenate with " connections" and print it, Jinja Template: {% set pool_size = concurrent_users > 100 ? 20 : 10 %} {{ pool_size | string }} connections, Blended Template: 
Task: convert variable "alert_level" to lowercase, then join with "_" and variable "alert_code", then set "alert_identifier" to result and render it, Jinja Template: {{ alert_identifier = alert_level.lower() + "_" + alert_code }}, Blended Template: 
Task: loop through numbers 1 to 10 and display "Initializing component " + number for numbers less than 6 only, Jinja Template: {% for number in range(1, 11) %} {% if number < 6 %} Initializing component {{ number }} {% endif %} {% endfor %}, Blended Template: 
Task: convert "CACHE INVALIDATION" to title case, then set "cache_msg" to result + " complete", then convert to uppercase and render it, Jinja Template: {{ "CACHE INVALIDATION".title() + " complete".upper() }}, Blended Template: 
Task: join variable "username" and "@" and variable "domain", then set "email_address" to result and print it, Jinja Template: {{ email_address = username + "@" + domain }} {{ email_address }}, Blended Template: 
Task: set variable "max_retries" to 10 if operation_type == "critical", else 3, then convert to string and concatenate with " attempts" and render it, Jinja Template: {% set max_retries = operation_type == "critical" | ternary(10, 3) %} {{ max_retries | string }} attempts, Blended Template: 
Task: convert variable "task_name" to title case, then join with " - " and variable "task_id", then set "task_label" to result and print it, Jinja Template: {{ task_label = task_name.title() + ' - ' + task_id }} {{ task_label }}, Blended Template: 
Task: convert "application server" to title case, then set "server_type" to result, then concatenate with " " and variable "server_number" and render it, Jinja Template: {{ application_server|title }} {{ server_type }} {{ server_number }}, Blended Template: 
Task: truncate variable "disk_usage" and convert to string, then join with " GB" and render "Disk Usage: " + result, Jinja Template: {{ "Disk Usage: " + disk_usage|truncate(2)|string + " GB" }}, Blended Template: 
Task: set variable "log_rotation" to "daily" if log_size > 1000, else "weekly", then convert to uppercase and print "ROTATION: " + result, Jinja Template: {% set log_rotation = "daily" if log_size > 1000 else "weekly" %} {% set log_rotation = log_rotation.upper() %} ROTATION: {{ log_rotation }}, Blended Template: 
Task: convert variable "environment_name" to lowercase, then join with "_" and variable "deployment_id", then set "deployment_key" to result and render it, Jinja Template: {% set deployment_key = environment_name.lower() + "_" + deployment_id %} {{ deployment_key }}, Blended Template: 
Task: create a range from variable "start_index" to variable "end_index", assign to "index_range", then loop and print "Index: " + number for even numbers only, Jinja Template: {% set index_range = range(start_index, end_index + 1) %} {% for number in index_range %} {% if number % 2 == 0 %} Index: {{ number }} {% endif %} {% endfor %}, Blended Template: 
Task: convert "TRANSACTION PROCESSING" to title case, then concatenate with " - " and variable "transaction_id", then convert to lowercase and print it, Jinja Template: {{ transaction_id|title }} - {{ transaction_id|lower }}, Blended Template: 
Task: join variable "major_version" and "." and variable "minor_version", then set "software_version" to result and render it, Jinja Template: {{ software_version = major_version ~ "." ~ minor_version }}, Blended Template: 
Task: set variable "buffer_size" to 2048 if data_volume == "large", else 512, then convert to string and concatenate with " bytes" and print it, Jinja Template: {{ buffer_size = data_volume == "large" and 2048 or 512 }} {{ buffer_size_str = str(buffer_size) }} {{ print(buffer_size_str + " bytes") }}, Blended Template: 
Task: convert variable "component_name" to uppercase, then join with "_" and variable "component_version", then set "component_key" to result and render it, Jinja Template: {% set component_key = component_name.upper() + "_" + component_version %} {{ component_key }}, Blended Template: 
Task: convert "service discovery" to title case, then set "discovery_name" to result, then concatenate with " - " and variable "discovery_port" and print it, Jinja Template: {{ discovery_name = service_discovery.title() }} {{ discovery_name }} - {{ discovery_port }}, Blended Template: 
Task: truncate variable "memory_allocated" and convert to string, then join with " MB" and render "Memory: " + result, Jinja Template: {{ 'Memory: ' + memory_allocated | string | truncate(3) + ' MB' }}, Blended Template: 
Task: set variable "heartbeat_interval" to 5 if monitoring_level == "high", else 15, then convert to string and join with "s" and print it, Jinja Template: {{ heartbeat_interval = monitoring_level == "high" and 5 or 15 }} {{ heartbeat_interval = heartbeat_interval | string }} {{ heartbeat_interval = heartbeat_interval + "s" }} {{ heartbeat_interval }}, Blended Template: 
Task: convert variable "routing_table" to lowercase, then join with "_" and variable "route_id", then set "route_key" to result and render it, Jinja Template: {{ route_key = routing_table.lower() + "_" + route_id }}, Blended Template: 
Task: loop through numbers 3 to 13 and display "Validating rule " + number for numbers divisible by 5 only, Jinja Template: {% for number in range(3, 14) %} {% if number % 5 == 0 %} Validating rule {{ number }} {% endif %} {% endfor %}, Blended Template: 
Task: convert "CLUSTER MANAGEMENT" to title case, then set "cluster_title" to result + " active", then convert to uppercase and render it, Jinja Template: {{ cluster_title = cluster_management.title() + " active" | upper }}, Blended Template: 
Task: join variable "cluster_name" and ":" and variable "node_id", then set "node_identifier" to result and print it, Jinja Template: {{ node_identifier = cluster_name + ":" + node_id }} {{ node_identifier }}, Blended Template: 
Task: set variable "sync_frequency" to "realtime" if data_criticality == "high", else "hourly", then convert to title case and render "Sync: " + result, Jinja Template: {% set sync_frequency = "realtime" if data_criticality == "high" else "hourly" %} {% set sync_frequency_title = sync_frequency | title %} Sync: {{ sync_frequency_title }}, Blended Template: 
Task: convert variable "policy_name" to title case, then join with " Policy " and variable "policy_version", then set "policy_title" to result and print it, Jinja Template: {{ policy_title = policy_name.title() + " Policy " + policy_version }} {{ policy_title }}, Blended Template: 
Task: convert "firewall configuration" to title case, then set "firewall_name" to result, then concatenate with " - " and variable "rule_count" and " rules" and render it, Jinja Template: {{ firewall_configuration.title() }} - {{ firewall_name }} - {{ rule_count }} rules, Blended Template: 
Task: truncate variable "throughput_rate" and convert to string, then join with " req/sec" and render "Throughput: " + result, Jinja Template: {{ 'Throughput: ' + throughput_rate|truncate(10)|string + ' req/sec' }}, Blended Template: 
Task: set variable "worker_count" to 16 if processing_load == "heavy", else 4, then convert to string and concatenate with " workers" and print it, Jinja Template: {{ worker_count = processing_load == "heavy" and 16 or 4 }} {{ worker_count = str(worker_count) }} {{ print(worker_count + " workers") }}, Blended Template: 
Task: convert variable "schedule_type" to uppercase, then join with "_" and variable "schedule_id", then set "schedule_key" to result and render it, Jinja Template: {% set schedule_key = schedule_type.upper() + "_" + schedule_id %} {{ schedule_key }}, Blended Template: 
Task: create a range from 1 to variable "task_count", assign to "task_range", then loop and print "Task " + number + " queued" for odd numbers only, Jinja Template: {% set task_range = range(1, task_count + 1) %} {% for number in task_range %} {% if number % 2 != 0 %} Task {{ number }} queued {% endif %} {% endfor %}, Blended Template: 
Task: convert "BACKUP RESTORATION" to title case, then concatenate with " - " and variable "backup_date", then convert to lowercase and render it, Jinja Template: {{ "BACKUP RESTORATION".title() }} - {{ backup_date|lower }}, Blended Template: 
Task: join variable "service_group" and "." and variable "service_name", then set "service_fqdn" to result and print it, Jinja Template: {{ service_fqdn = service_group ~ "." ~ service_name }} {{ service_fqdn }}, Blended Template: 
Task: set variable "idle_timeout" to 300 if session_type == "guest", else 1800, then convert to string and join with " seconds" and render it, Jinja Template: {{ idle_timeout = session_type == "guest" and 300 or 1800 }} {{ idle_timeout = str(idle_timeout) + " seconds" }}, Blended Template: 
Task: convert variable "endpoint_name" to lowercase, then join with "/" and variable "endpoint_version", then set "endpoint_path" to result and print it, Jinja Template: {{ endpoint_path = endpoint_name.lower() + "/" + endpoint_version }} {{ endpoint_path }}, Blended Template: 
Task: convert "monitoring dashboard" to title case, then set "dashboard_name" to result, then concatenate with " - " and variable "dashboard_id" and render it, Jinja Template: {{ dashboard_name = dashboard_name.title() }} {{ dashboard_name = dashboard_name + " - " + dashboard_id }}, Blended Template: 
Task: truncate variable "error_rate" and convert to string, then join with "%" and render "Error Rate: " + result, Jinja Template: {{ "Error Rate: " + error_rate | string | truncate(2) + "%" }}, Blended Template: 
Task: set variable "partition_size" to 1000 if dataset_size > 50000, else 200, then convert to string and concatenate with " items" and print it, Jinja Template: {% set partition_size = dataset_size > 50000 ? 1000 : 200 %} {{ partition_size | string }} items, Blended Template: 
Task: convert variable "widget_type" to uppercase, then join with "_" and variable "widget_id", then set "widget_key" to result and render it, Jinja Template: {{ widget_key = widget_type.upper() + "_" + widget_id }}, Blended Template: 
Task: loop through numbers 0 to 8 and display "Initializing module " + number for numbers greater than 3 only, Jinja Template: {% for number in range(9) %} {% if number > 3 %} Initializing module {{ number }} {% endif %} {% endfor %}, Blended Template: 
Task: convert "HEALTH CHECK" to title case, then set "health_status" to result + " passed", then convert to lowercase and render it, Jinja Template: {{ "HEALTH CHECK".title() + " passed".lower() }}, Blended Template: 
Task: join variable "namespace" and "::" and variable "class_name", then set "class_path" to result and print it, Jinja Template: {{ class_path = namespace ~ "::" ~ class_name }} {{ class_path }}, Blended Template: 
Task: set variable "refresh_rate" to 1 if update_frequency == "fast", else 5, then convert to string and concatenate with " seconds" and render it, Jinja Template: {{ refresh_rate = update_frequency == "fast" | ternary(1, 5) | string }} seconds, Blended Template: 
Task: convert variable "template_name" to title case, then join with " Template " and variable "template_version", then set "template_title" to result and print it, Jinja Template: {{ template_title = template_name.title() + " Template " + template_version }} {{ template_title }}, Blended Template: 
Task: convert "event processing" to title case, then set "processor_name" to result, then concatenate with " - " and variable "event_count" and " events" and render it, Jinja Template: {{ event_processing|title }} - {{ processor_name }} - {{ event_count }} events, Blended Template: 
Task: truncate variable "latency_ms" and convert to string, then join with " ms" and render "Latency: " + result, Jinja Template: {{ 'Latency: ' + latency_ms|float|int|str + ' ms' }}, Blended Template: 
Task: set variable "chunk_size" to 10240 if transfer_mode == "bulk", else 1024, then convert to string and join with " bytes" and print it, Jinja Template: {{ chunk_size = transfer_mode == "bulk" and 10240 or 1024 }} {{ chunk_size_str = chunk_size | string }} {{ print(chunk_size_str + " bytes") }}, Blended Template: 
Task: convert variable "handler_name" to lowercase, then join with "_" and variable "handler_priority", then set "handler_key" to result and render it, Jinja Template: {{ handler_key = handler_name.lower() + "_" + handler_priority }}, Blended Template: 
Task: create a range from variable "min_port" to variable "max_port", assign to "port_range", then loop and print "Port " + number + " available" for even numbers only, Jinja Template: {% set port_range = range(min_port, max_port + 1) %} {% for number in port_range %} {% if number % 2 == 0 %} Port {{ number }} available {% endif %} {% endfor %}, Blended Template: 
Task: convert "LOAD TESTING" to title case, then concatenate with " - " and variable "test_duration" and " minutes", then convert to uppercase and render it, Jinja Template: {{ "LOAD TESTING".title() }} - {{ test_duration }} MINUTES, Blended Template: 
Task: join variable "region" and "-" and variable "zone" and "-" and variable "instance_id", then set "instance_identifier" to result and print it, Jinja Template: {{ instance_identifier = region + "-" + zone + "-" + instance_id }} {{ instance_identifier }}, Blended Template: 
Task: set variable "scale_factor" to 2 if demand_level == "peak", else 1, then convert to string and concatenate with "x scaling" and render it, Jinja Template: {{ scale_factor = demand_level == "peak" and 2 or 1 }} {{ scale_factor_str = scale_factor | string }} {{ scale_factor_str ~ "x scaling" }}, Blended Template: 
Task: convert variable "pipeline_name" to uppercase, then join with "_" and variable "pipeline_stage", then set "pipeline_key" to result and print it, Jinja Template: {{ pipeline_key = pipeline_name.upper() + "_" + pipeline_stage }} {{ pipeline_key }}, Blended Template: 
Task: convert "resource monitoring" to title case, then set "monitor_name" to result, then concatenate with " Agent " and variable "agent_version" and render it, Jinja Template: {{ resource_monitoring|title }} Agent {{ agent_version }}, Blended Template: 
Task: truncate variable "availability_percent" and convert to string, then join with "%" and render "Availability: " + result, Jinja Template: {{ "Availability: " + availability_percent | string | truncate(2) + "%" }}, Blended Template: 
Task: set variable "queue_depth" to 1000 if message_rate > 100, else 100, then convert to string and concatenate with " messages" and print it, Jinja Template: {% set queue_depth = message_rate > 100 ? 1000 : 100 %} {{ queue_depth | string }} messages, Blended Template: 
Task: convert variable "filter_name" to lowercase, then join with "_" and variable "filter_order", then set "filter_key" to result and render it, Jinja Template: {{ filter_key = filter_name.lower() + "_" + filter_order }}, Blended Template: 
Task: loop through numbers 1 to 7 and display "Cleaning up resource " + number for numbers less than 4 only, Jinja Template: {% for number in range(1, 8) %} {% if number < 4 %} Cleaning up resource {{ number }} {% endif %} {% endfor %}, Blended Template: 
Task: convert "DEPLOYMENT PIPELINE" to title case, then set "pipeline_title" to result + " running", then convert to lowercase and render it, Jinja Template: {{ deployment_pipeline|title }} running|lower, Blended Template: 
