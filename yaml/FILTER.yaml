"dependency":
-   "bases":
        "base": |
            <html>
            <body>
            {% block content %}<p>Parent Content</p>{% endblock %}
            </body>
            </html>
        "block_scope": |
            <!DOCTYPE html>
            <html>
                <head>
                    {% block head %}
                        <link rel="stylesheet" href="style.css" />
                        <title>{% block title %}{% endblock %} - My Webpage</title>
                    {% endblock %}
                </head>
                <body>
                    <div id="content">{% block content %}{% endblock %}</div>
                    <div id="footer">
                        {% block footer %}
                            &copy; Copyright 2011 by <a href="http://domain.invalid/">you</a>.
                        {% endblock %}
                    </div>
                </body>
            </html>
        "block_scope2": |
            {% block one %}{% endblock %}
            {% block two %}{% endblock %}
        "block_scoping2": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {% set value=45 %}
            {{ value }}
            {% endblock %}

            {% block second %}
            --second block--
            {% set value=25 %}
            {{value}}
            {% endblock %}

            {% block third %}
            --third block--
            {% set value=35 %}
            {{value}}
            {% endblock %}
        "block_scoping3": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {{ value }}
            {{ variable }}
            {% endblock %}

            {% block second %}
            --second block--
            {% set variable=25 %}
            {% endblock %}

            {% block third %}
            --third block--
            {% set value=35 %}
            {{value}}
            {% set variable=45%}
            {% endblock %}
        "block_scoping3_01": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {{ value }}
            {{ variable }}
            {% endblock %}
        "block_scoping3_02": |
            {% set variable=25 %}
            {% block second %}
            --second block--
            {% endblock %}
        "block_scoping3_03": |
            {% set value=35 %}
            {% block third %}
            --third block--
            {{value}}
            {% endblock %}
        "block_scoping_new": |
            {% set value = "base" %}
            {% block container %}{% endblock %}
        "block_scoping_test": |
            {% set variable=100 %}

            {% block first %}
            {{ variable }}
            {% endblock %}

            {% block second %}
            {% set variable=25 %}
            {% endblock %}

            {% block third %}
            {% set variable=45%}
            {% endblock %}
        "block_scoping_test_01": |
            {% set variable=100 %}

            {% block first %}
            {{ variable }}
            {% endblock %}
        "block_scoping_test_02": |
            {% set variable=100 %}

            {% block second %}
            {% endblock %}
        "block_scoping_test_03": |
            {% set variable=100 %}

            {% block third %}
            {% endblock %}
        "check": |
            <html>
            <body>


            {% block first %}
            {% endblock %}


            </body>
            </html>
        "check_child_scope": |
            <html>
            <body>
            {% block content %}
            {% set greeting = 'Hello !' %}
            {{ greeting }} this is the parent
            {% endblock %}
            </body>
            </html>
        "extend_using_nestedBlock": |
            <html>
            <head>
            {% block content %}
            {{ "This is Root's content" }}
            {% endblock %}
            </head>
            <body>
            {% block inner %}
            {{ "This is from Root's inner" }}
            {% endblock %}
            </body>
            </html>
        "inner": |
            <html>
            {% block content %}
            <body>
            {% block inner%}{% endblock %}
            </body>
            {% endblock %}
            </html>
        "macro": |
            {% macro parent_macro() %}<p>Parent Macro</p>{% endmacro %}
            {% block content %}{% endblock %}
        "main_base": |
            {% block container %}
            base container base
            {% block outer %}
            base outer base
            {% block inner1 %}
            base inner base
            {% endblock %}
            {% endblock %}
            {% endblock %}
        "mid_base1": |
            {% extends "bases/main_base.html" %}
            {% block outer %}
            block outer mid1
            {% block inner2 %}
            block inner2 mid1
            {% parent %}
            {% endblock %}
            {% endblock %}
        "mid_base2": |
            {% extends "bases/main_base.html" %}
            {% block inner1 %}
            block inner1 mid2
            {% endblock %}
        "multiple": |
            {% extends bases.base|template %}
            {% block content %}
            <p>This is content from the template "multiple.html"</p>
            {% endblock %}
        "out": |+
            {% block first_block %}
            {% endblock %}
            {% block second_block %}
            {% set value=200 %}
            {% endblock %}
            {% block third_block %}
            {{ value}}
            {% endblock %}
            {% block variable_block %}
            Hello {{ var }}
            {% endblock %}

        "parent": |
            {% set val=45 %}
            {% block variable_block %}
            {{ val }}
            {% endblock %}
            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent2": |
            {% set val=45 %}
            {% block variable_block %}
            {{ val }}
            {% endblock %}

            {% block new_block %}
            this is parent block
            {% endblock %}
        "parent3": |
            {% set val=45 %}
            {% block variable_block %}
            {% print val %}
            {% endblock %}
            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent4": |
            {% set val=45 %}
            {% block variable_block %}
            {% print val %}
            {% endblock %}

            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent_autoescape2": |
            {% autoescape false %}
            <html>
            {% block test %}{% set parenthtml = "<h1>Parent</h1>" %}{{ parenthtml }}{% endblock %}
            </html>
            {% endautoescape %}
        "parent_template": |
            {% block k %}
            {% set var = 'parent' %}
            {% endblock %}
        "parent_template2": |
            {% set val = 'parent' %}{% block k %}{% set val = 'inner' %}{% endblock %}{{ val }}
        "path": |-
            bases/base.html
        "path2": |
            bases/base.html
        "root": |
            {% set value=15 %}
            {% block new_block %}
            {{ var }}
            {% endblock %}
        "super": |
            {% block variable_block %}
            {{ var }}
            parent block
            {% endblock %}
        "test_bases_eof": "{% block content %}{% endblock %}\r\n"
        "value_set": |
            {% set value = 20 %}
            {% block test %}
            {{ value }}
            {% endblock %}
    "includes":
        "chain": |
            {% include includes.with|template with { "argument" : argument, "value" : 42 } only %}
        "child": |
            {{ upper('string was in lower') }}
        "child2": |
            {% set value = 25 %}
            Included Template
        "colormacro": |4

            {% macro avgcolor(color1, color2) -%}
                {%- set color1 = rgbcolor(color1) -%}
                {%- set color2 = rgbcolor(color2) -%}
                {%- set coloravg = [
                    mean([color1[0], color2[0]]),
                    mean([color1[1], color2[1]]),
                    mean([color1[2], color2[2]])
                ] -%}
                {{ hexcolor(coloravg) }}
            {%- endmacro %}

            {% macro lighten(color, fraction) -%}
                {%- set color = rgbcolor(color) -%}
                {%- set add_white = 255 * fraction -%}
                {%- set new_r = color[0] + add_white -%}
                {%- set new_g = color[1] + add_white -%}
                {%- set new_b = color[2] + add_white -%}
                {%- if new_r > 255 %}{% set new_r = 255 %}{% endif -%}
                {%- if new_g > 255 %}{% set new_g = 255 %}{% endif -%}
                {%- if new_b > 255 %}{% set new_b = 255 %}{% endif -%}
                {{ hexcolor([new_r, new_g, new_b]) }}
            {%- endmacro %}

            {% macro darken(color, fraction) -%}
                {%- set color = rgbcolor(color) -%}
                {%- set darkcolor = [
                    color[0] - (color[0] * fraction),
                    color[1] - (color[1] * fraction),
                    color[2] - (color[2] * fraction),
                ] -%}
                {{ hexcolor(darkcolor) }}
            {%- endmacro %}
        "eof_test": |+
            This included file contains a extra new line at the EOF given by user apart from hidden newline character.

        "eof_test10": |
            this is a new file
            this is a new file
        "eof_test11": |-
            this is a new file
        "eof_test2": |
            This included file contains hidden newline character only at the EOF.
        "eof_test3": "This included file contains a tab given by user apart from a\
            \ hidden newline character at the EOF.\t\n"
        "eof_test4": "This included file contains a Carriage return and newline as\
            \ used in windows os ('\\r\\n') at the EOF.\r\n"
        "eof_test5": "This included file contains a Carriage return as used in Mac\
            \ os ('\\r') at the EOF.\r"
        "eof_test6": "This included file contains multiple Carriage return as used\
            \ in Mac os ('\\r\\r') at the EOF.\r\r"
        "eof_test7": |-
            this included file is created by echo command of linux.
        "eof_test8": |
            this included file is contains comment tags at the EOF.{# #}
        "eof_test9": |
            This included file contains newline character at the EOF.
        "example_file": |-
            path file is created by echo command of linux
        "example_file2": |
            path file is created by Text Editor tool
        "faker": |
            FAKER!
        "forautoescape": |
            <h1>autoescape</h1>
        "has_hello": |
            {% macro hello() %}
            Hello included!
            {% endmacro %}
        "has_macro": |
            {% macro from_inside(var) %}{{var}}{% endmacro %}
            {% print from_inside(42) %}
        "include_path": |-
            include/example_file.html
        "include_path2": |
            include/example_file2.html
        "macro_call": |+
            {% print hello("hello world") %}

        "macro_call2": |
            {% macro test() %}
               "hello this included file macro"
            {% endmacro %}
        "macro_within_macro": |
            {% macro test() %}
            {% print hello() %}
            "this is included macro"
            {% endmacro %}
            {% print test() %}
        "macro_within_macro2": |
            {% macro test() %}
            {% print hello() %}
            "this is included macro"
            {% endmacro %}
        "macro_within_macro3": |
            {% print hello() %}
            {% macro test() %}
            "this is included macro"
            {% endmacro %}
            {% print test() %}
        "module": "{% macro macro1() %}\r\nmacro1 imported!\r\n{% endmacro %}\r\n\
            {% macro macro2() %}\r\nmacro2 imported!\r\n{% endmacro %}\r\n"
        "name_snippet": |+
            {% set greeting = "< in-built filter e is used >" %}
            {{ greeting|e }}
            {% print round(10.6) %}

            {% macro hello() %}
            "this is user functions"
            {% endmacro %}
            {% print hello() %}

        "new_macro_call": |+
            {{ hello("hello world") }}

        "new_macro_within_macro2": |
            {% macro test() %}
            {{ hello() }}
            "this is included macro"
            {% endmacro %}
        "newline_test": |
            This is included File.
        "newline_test2": |
            This is included File.

            {% set var = "Hello World!" %}
            {% print var %} After include Tag new Line goes Here--->
        "scope": |
            {% set defined_outside = "inside" %}
            {% set defined_inside = "inside" %}
        "scope2": |
            {% set value = 24 %}
            {{ variable }}
        "scope_test": |
            These parens contain a variable from external scope: ({{ variable }})
        "string": |
            This text is loaded as a string.
        "template": |
            {% set var = 22 %}
        "value_call": |
            {{ value }}
        "variable": |
            This text is included via the context as a variable.
        "with": |
            There are two values that are added to the context: {{ argument }}, {{ value }}.
"overview": |-
    Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.
"tests":
-   "data": |
        {}
    "desc": |-
        Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.Templates can be introduced through the use of the template filter, which compiles a string into a template object.
    "expected": |+
        This text is included via the context as a variable.

    "name": |-
        test_21_00_template_filter.test
    "template": |
        {% include includes.variable|template %}
    "testname": |-
        template filter
-   "data": |
        {}
    "desc": |-
        Templates can be introduced through the use of the number filter, which compiles a string into a number.
    "expected": |+
        24.5
        45

    "name": |-
        test_21_03_number_filter.test
    "template": |
        {% set num_test = 24.5|number %}
        {% set num_test2 = "45"|number %}
        {{num_test}}
        {{num_test2}}
    "testname": |-
        number filter
-   "data": |
        {}
    "desc": |-
        Pair lists can be introduced by applying the items filter to dictionary objects.
    "expected": |+
        four : 4
        one : 1
        three : 3
        two : 2

    "name": |-
        test_21_04_items_filter.test
    "template": |
        {% set dict = { "one" : 1, "two" : 2, "three": 3, "four": 4 } %}
        {% for key, value in dict|items %}
        {{ key }} : {{ value }}
        {% endfor %}
    "testname": |-
        items filter
-   "data": |
        {}
    "desc": |-
        Templates can be introduced through the use of the string filter, which compiles a number/list into a string.
    "expected": |4

        [0, 5, 9, 20, 20, 45, 60]
        [1, 2, 3, 4, {'a': 'b'}, [123, 20]]
    "name": |-
        test_21_05_convert_list_into_string_using_string_filter.test
    "template": |
        {% set var = concat([0,5,9,20],[20,45,60]) %}

        {% print var|string %}

        {% set string_list = [1,2,3,4,{"a":"b"},[123,20]]|string %}
        {% print string_list %}
    "testname": |-
        string_filter (list to string)
-   "data": |
        {}
    "desc": " Escaped strings are introduced by applying the escape filter (alias\
        \ e) to string objects. "
    "expected": |+
        &lt; we are testing e &gt;
        &lt; we are testing escape &gt;

    "name": |-
        test_23_00_escape_filter.test
    "template": |
        {% set e_test = "< we are testing e >"|e %}
        {% set escape_test = "< we are testing escape >"|escape %}
        {{e_test}}
        {{escape_test}}
    "testname": |-
        escape filter
-   "data": |
        {}
    "desc": |-
        Templates can be introduced through the use of the template filter, which compiles a string into a template object.The output of one filter is applied to the next.
    "expected": |
        3
    "name": |-
        test_48_00_render_filter.test
    "template": |
        {% include '{{ "{{ a + b }}"|template|render({ "a":1, "b":2 }) }}'|template %}
    "testname": |-
        render filter case1
-   "data": |
        {}
    "desc": |-
        Templates can be introduced through the use of the template filter, which compiles a string into a template object.The output of one filter is applied to the next.
    "expected": |+
        1,2

    "name": |-
        test_48_01_render_filter.test
    "template": |
        {% set rendered = "{{a}},{{b}}"|template|render({"a":1, "b":2 }) %}{{ rendered }}
    "testname": |-
        render filter case2
-   "data": |
        {
          "listA": [1,2,3]
        }
    "desc": |-
        Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.Templates can be introduced through the use of the template filter, which compiles a string into a template object or string into a number or number/list into a string.
    "expected": |+
        one(1), two(2), three(3)

    "name": |-
        test_66_00_string_filter_list_string_formatting.test
    "template": |
        {{ listA|string("one(%s), two(%s), three(%s)") }}
    "testname": |-
        list formatting
-   "data": |
        {
          "variableA": 1100.13645
        }
    "desc": |-
        Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.Templates can be introduced through the use of the template filter, which compiles a string into a template object or string into a number or number/list into a string.
    "expected": |+
        1100.14

    "name": |-
        test_66_01_string_filter_number_string_formatting.test
    "template": |
        {{ variableA|string("%.2f") }}
    "testname": |-
        number formatting
-   "data": |
        {
          "listA": [2015, 11, 3, 16, 25, 13]
        }
    "desc": |-
        Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.Templates can be introduced through the use of the template filter, which compiles a string into a template object or string into a number or number/list into a string.The date filter formats a date to a specified format.The date can be a date object, milliseconds, or a datetime string may like ("%Y-%m-%d").
    "expected": |+
        2015-11-03

    "name": |-
        test_66_02_string_filter_datetime_string_formatting.test
    "template": |
        {{ listA|datetime|string("%Y-%m-%d") }}
    "testname": |-
        datetime formatting
-   "data": |
        {
          "listA": [2015, 11, 3, 16, 25, 13]
        }
    "desc": |-
        Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.Templates can be introduced through the use of the template filter, which compiles a string into a template object or string into a number or number/list into a string.The date filter formats a date to a specified format.The date can be a date object, milliseconds, or a datetime string may like ("%Y-%m-%d").
    "expected": |+
        2015-11-03 16:25:13

    "name": |-
        test_66_03_string_filter_datetime_string_formatting.test
    "template": |
        {{ listA|datetime|string("%Y-%m-%d %H:%M:%S") }}
    "testname": |-
        datetime formatting
-   "data": |
        {
          "stringA": "2015-11-03 16:25:13"
        }
    "desc": |-
        Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.Templates can be introduced through the use of the template filter, which compiles a string into a template object or string into a number or number/list into a string.The date filter formats a date to a specified format.The date can be a date object, milliseconds, or a datetime string may like ("%Y-%m-%d").
    "expected": |+
        2015-11-03T16:25:13Z

    "name": |-
        test_66_04_string_filter_datetime_string_formatting.test
    "template": |
        {{ stringA|datetime("%Y-%m-%d %H:%M:%S")|string("%Y-%m-%dT%H:%M:%SZ") }}
    "testname": |-
        datetime formatting
-   "data": |
        {
          "stringA": "2015-11-03 16:25:13"
        }
    "desc": |-
        Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.Templates can be introduced through the use of the template filter, which compiles a string into a template object or string into a number or number/list into a string.The date filter formats a date to a specified format.The date can be a date object, milliseconds, or a datetime string may like ("%Y-%m-%d").
    "expected": |+
        2015-11-03 16:25:13

    "name": |-
        test_66_05_string_filter_datetime_string_formatting.test
    "template": |
        {{ stringA|datetime("%Y-%m-%d %H:%M:%S")|datetime|string("%Y-%m-%d %H:%M:%S") }}
    "testname": |-
        datetime formatting
-   "data": |
        {
          "date": "2015-11-03"
        }
    "desc": |-
        Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.Templates can be introduced through the use of the template filter, which compiles a string into a template object or string into a number or number/list into a string.The date filter formats a date to a specified format.The date can be a date object, milliseconds, or a datetime string may like ("%Y-%m-%d").
    "expected": |+
        2015-11-03 00:00:00

    "name": |-
        test_66_06_string_filter_string_formatting.test
    "template": |
        {{ date|datetime("%Y-%m-%d")|string("%Y-%m-%d %H:%M:%S") }}
    "testname": |-
        string_formatting
-   "data": |
        {
          "listA": [1, 2, 3, null, false, true]
        }
    "desc": |-
        Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.Templates can be introduced through the use of the template filter, which compiles a string into a template object or string into a number or number/list into a string.The date filter formats a date to a specified format.The date can be a date object, milliseconds, or a datetime string may like ("%Y-%m-%d").
    "expected": |+
        [1, 2, 3, null, false, true]

    "name": |-
        test_66_07_string_filter_passing_list.test
    "template": |
        {{ listA|string}}
    "testname": |-
        string filter passing list
-   "data": "{\n  \"date\": \"2010-12-10T16:24:40Z\" \n}\n"
    "desc": |-
        Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.Templates can be introduced through the use of the template filter, which compiles a string into a template object or string into a number or number/list into a string.The date filter formats a date to a specified format.The date can be a date object, milliseconds, or a datetime string may like ("%Y-%m-%d").
    "expected": |+
        Date: 10/December/2010 Time: 16 hours 24 Minutes

    "name": |-
        test_66_08_string_filter_date_to_string.test
    "template": |
        {{ date|datetime|string("Date: %d/%B/%Y Time: %H hours %M Minutes")}}
    "testname": |-
        string filter date to string
-   "data": |
        {}
    "desc": |-
        It produce  an empty value at template.
    "expected": |+
        null

    "name": |-
        test_66_09_string_filter_null.test
    "template": |
        {{ null|string }}
    "testname": |-
        string filter null
-   "data": |
        {}
    "desc": |-
        {{ true|string }} will return true.
    "expected": |+
        true

    "name": |-
        test_66_10_string_filter_true.test
    "template": |
        {{ true|string }}
    "testname": |-
        string filter true
-   "data": |
        {}
    "desc": |-
        {{ false|string }} will return false.
    "expected": |+
        false

    "name": |-
        test_66_11_string_filter_false.test
    "template": |
        {{ false|string }}
    "testname": |-
        string filter false
-   "data": |
        {}
    "desc": |-
        check the output of {{ ''|string }}
    "expected": |4+


    "name": |-
        test_66_12_string_filter_empty_string.test
    "template": |
        {{ ''|string }}
    "testname": |-
        string filter empty string
-   "data": |
        {}
    "desc": |-
        check the behaviour of calling escape filter on an undefine or missing variable
    "expected": |4+

    "name": |-
        test_66_13_escape_filter_undefine_var.test
    "template": |
        {% print nullvar|escape %}{{ nullvar|escape }}{% set var=nullvar|escape %}{{ nullvar }}{% print nullvar %}
    "testname": |-
        escape filter on undefined var
