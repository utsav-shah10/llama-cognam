"dependency":
-   "bases":  
        "base": |
            <html>
            <body>
            {% block content %}<p>Parent Content</p>{% endblock %}
            </body>
            </html>
        "block_scope": |
            <!DOCTYPE html>
            <html>
                <head>
                    {% block head %}
                        <link rel="stylesheet" href="style.css" />
                        <title>{% block title %}{% endblock %} - My Webpage</title>
                    {% endblock %}
                </head>
                <body>
                    <div id="content">{% block content %}{% endblock %}</div>
                    <div id="footer">
                        {% block footer %}
                            &copy; Copyright 2011 by <a href="http://domain.invalid/">you</a>.
                        {% endblock %}
                    </div>
                </body>
            </html>
        "block_scope2": |
            {% block one %}{% endblock %}
            {% block two %}{% endblock %}
        "block_scoping2": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {% set value=45 %}
            {{ value }}
            {% endblock %}

            {% block second %}
            --second block--
            {% set value=25 %}
            {{value}}
            {% endblock %}

            {% block third %}
            --third block--
            {% set value=35 %}
            {{value}}
            {% endblock %}
        "block_scoping3": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {{ value }}
            {{ variable }}
            {% endblock %}

            {% block second %}
            --second block--
            {% set variable=25 %}
            {% endblock %}

            {% block third %}
            --third block--
            {% set value=35 %}
            {{value}}
            {% set variable=45%}
            {% endblock %}
        "block_scoping3_01": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {{ value }}
            {{ variable }}
            {% endblock %}
        "block_scoping3_02": |
            {% set variable=25 %}
            {% block second %}
            --second block--
            {% endblock %}
        "block_scoping3_03": |
            {% set value=35 %}
            {% block third %}
            --third block--
            {{value}}
            {% endblock %}
        "block_scoping_new": |
            {% set value = "base" %}
            {% block container %}{% endblock %}
        "block_scoping_test": |
            {% set variable=100 %}

            {% block first %}
            {{ variable }}
            {% endblock %}

            {% block second %}
            {% set variable=25 %}
            {% endblock %}

            {% block third %}
            {% set variable=45%}
            {% endblock %}
        "block_scoping_test_01": |
            {% set variable=100 %}

            {% block first %}
            {{ variable }}
            {% endblock %}
        "block_scoping_test_02": |
            {% set variable=100 %}

            {% block second %}
            {% endblock %}
        "block_scoping_test_03": |
            {% set variable=100 %}

            {% block third %}
            {% endblock %}
        "check": |
            <html>
            <body>


            {% block first %}
            {% endblock %}


            </body>
            </html>
        "check_child_scope": |
            <html>
            <body>
            {% block content %}
            {% set greeting = 'Hello !' %}
            {{ greeting }} this is the parent
            {% endblock %}
            </body>
            </html>
        "extend_using_nestedBlock": |
            <html>
            <head>
            {% block content %}
            {{ "This is Root's content" }}
            {% endblock %}
            </head>
            <body>
            {% block inner %}
            {{ "This is from Root's inner" }}
            {% endblock %}
            </body>
            </html>
        "inner": |
            <html>
            {% block content %}
            <body>
            {% block inner%}{% endblock %}
            </body>
            {% endblock %}
            </html>
        "macro": |
            {% macro parent_macro() %}<p>Parent Macro</p>{% endmacro %}
            {% block content %}{% endblock %}
        "main_base": |
            {% block container %}
            base container base
            {% block outer %}
            base outer base
            {% block inner1 %}
            base inner base
            {% endblock %}
            {% endblock %}
            {% endblock %}
        "mid_base1": |
            {% extends "bases/main_base.html" %}
            {% block outer %}
            block outer mid1
            {% block inner2 %}
            block inner2 mid1
            {% parent %}
            {% endblock %}
            {% endblock %}
        "mid_base2": |
            {% extends "bases/main_base.html" %}
            {% block inner1 %}
            block inner1 mid2
            {% endblock %}
        "multiple": |
            {% extends bases.base|template %}
            {% block content %}
            <p>This is content from the template "multiple.html"</p>
            {% endblock %}
        "out": |+
            {% block first_block %}
            {% endblock %}
            {% block second_block %}
            {% set value=200 %}
            {% endblock %}
            {% block third_block %}
            {{ value}}
            {% endblock %}
            {% block variable_block %}
            Hello {{ var }}
            {% endblock %}

        "parent": |
            {% set val=45 %}
            {% block variable_block %}
            {{ val }}
            {% endblock %}
            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent2": |
            {% set val=45 %}
            {% block variable_block %}
            {{ val }}
            {% endblock %}

            {% block new_block %}
            this is parent block
            {% endblock %}
        "parent3": |
            {% set val=45 %}
            {% block variable_block %}
            {% print val %}
            {% endblock %}
            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent4": |
            {% set val=45 %}
            {% block variable_block %}
            {% print val %}
            {% endblock %}

            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent_autoescape2": |
            {% autoescape false %}
            <html>
            {% block test %}{% set parenthtml = "<h1>Parent</h1>" %}{{ parenthtml }}{% endblock %}
            </html>
            {% endautoescape %}
        "parent_template": |
            {% block k %}
            {% set var = 'parent' %}
            {% endblock %}
        "parent_template2": |
            {% set val = 'parent' %}{% block k %}{% set val = 'inner' %}{% endblock %}{{ val }}
        "path": |-
            bases/base.html
        "path2": |
            bases/base.html
        "root": |
            {% set value=15 %}
            {% block new_block %}
            {{ var }}
            {% endblock %}
        "super": |
            {% block variable_block %}
            {{ var }}
            parent block
            {% endblock %}
        "test_bases_eof": "{% block content %}{% endblock %}\r\n"
        "value_set": |
            {% set value = 20 %}
            {% block test %}
            {{ value }}
            {% endblock %}
    "includes":
        "chain": |
            {% include includes.with|template with { "argument" : argument, "value" : 42 } only %}
        "child": |
            {{ upper('string was in lower') }}
        "child2": |
            {% set value = 25 %}
            Included Template
        "colormacro": |4

            {% macro avgcolor(color1, color2) -%}
                {%- set color1 = rgbcolor(color1) -%}
                {%- set color2 = rgbcolor(color2) -%}
                {%- set coloravg = [
                    mean([color1[0], color2[0]]),
                    mean([color1[1], color2[1]]),
                    mean([color1[2], color2[2]])
                ] -%}
                {{ hexcolor(coloravg) }}
            {%- endmacro %}

            {% macro lighten(color, fraction) -%}
                {%- set color = rgbcolor(color) -%}
                {%- set add_white = 255 * fraction -%}
                {%- set new_r = color[0] + add_white -%}
                {%- set new_g = color[1] + add_white -%}
                {%- set new_b = color[2] + add_white -%}
                {%- if new_r > 255 %}{% set new_r = 255 %}{% endif -%}
                {%- if new_g > 255 %}{% set new_g = 255 %}{% endif -%}
                {%- if new_b > 255 %}{% set new_b = 255 %}{% endif -%}
                {{ hexcolor([new_r, new_g, new_b]) }}
            {%- endmacro %}

            {% macro darken(color, fraction) -%}
                {%- set color = rgbcolor(color) -%}
                {%- set darkcolor = [
                    color[0] - (color[0] * fraction),
                    color[1] - (color[1] * fraction),
                    color[2] - (color[2] * fraction),
                ] -%}
                {{ hexcolor(darkcolor) }}
            {%- endmacro %}
        "eof_test": |+
            This included file contains a extra new line at the EOF given by user apart from hidden newline character.

        "eof_test10": |
            this is a new file
            this is a new file
        "eof_test11": |-
            this is a new file
        "eof_test2": |
            This included file contains hidden newline character only at the EOF.
        "eof_test3": "This included file contains a tab given by user apart from a\
            \ hidden newline character at the EOF.\t\n"
        "eof_test4": "This included file contains a Carriage return and newline as\
            \ used in windows os ('\\r\\n') at the EOF.\r\n"
        "eof_test5": "This included file contains a Carriage return as used in Mac\
            \ os ('\\r') at the EOF.\r"
        "eof_test6": "This included file contains multiple Carriage return as used\
            \ in Mac os ('\\r\\r') at the EOF.\r\r"
        "eof_test7": |-
            this included file is created by echo command of linux.
        "eof_test8": |
            this included file is contains comment tags at the EOF.{# #}
        "eof_test9": |
            This included file contains newline character at the EOF.
        "example_file": |-
            path file is created by echo command of linux
        "example_file2": |
            path file is created by Text Editor tool
        "faker": |
            FAKER!
        "forautoescape": |
            <h1>autoescape</h1>
        "has_hello": |
            {% macro hello() %}
            Hello included!
            {% endmacro %}
        "has_macro": |
            {% macro from_inside(var) %}{{var}}{% endmacro %}
            {% print from_inside(42) %}
        "include_path": |-
            include/example_file.html
        "include_path2": |
            include/example_file2.html
        "macro_call": |+
            {% print hello("hello world") %}

        "macro_call2": |
            {% macro test() %}
               "hello this included file macro"
            {% endmacro %}
        "macro_within_macro": |
            {% macro test() %}
            {% print hello() %}
            "this is included macro"
            {% endmacro %}
            {% print test() %}
        "macro_within_macro2": |
            {% macro test() %}
            {% print hello() %}
            "this is included macro"
            {% endmacro %}
        "macro_within_macro3": |
            {% print hello() %}
            {% macro test() %}
            "this is included macro"
            {% endmacro %}
            {% print test() %}
        "module": "{% macro macro1() %}\r\nmacro1 imported!\r\n{% endmacro %}\r\n\
            {% macro macro2() %}\r\nmacro2 imported!\r\n{% endmacro %}\r\n"
        "name_snippet": |+
            {% set greeting = "< in-built filter e is used >" %}
            {{ greeting|e }}
            {% print round(10.6) %}

            {% macro hello() %}
            "this is user functions"
            {% endmacro %}
            {% print hello() %}

        "new_macro_call": |+
            {{ hello("hello world") }}

        "new_macro_within_macro2": |
            {% macro test() %}
            {{ hello() }}
            "this is included macro"
            {% endmacro %}
        "newline_test": |
            This is included File.
        "newline_test2": |
            This is included File.

            {% set var = "Hello World!" %}
            {% print var %} After include Tag new Line goes Here--->
        "scope": |
            {% set defined_outside = "inside" %}
            {% set defined_inside = "inside" %}
        "scope2": |
            {% set value = 24 %}
            {{ variable }}
        "scope_test": |
            These parens contain a variable from external scope: ({{ variable }})
        "string": |
            This text is loaded as a string.
        "template": |
            {% set var = 22 %}
        "value_call": |
            {{ value }}
        "variable": |
            This text is included via the context as a variable.
        "with": |
            There are two values that are added to the context: {{ argument }}, {{ value }}.
"overview": |-
    Whether automatic escaping is enabled or not, you can mark a section of a template to be escaped or not by using the autoescape tag. If you want you can activate and deactivate the autoescaping from within the templates.
"tests":
-   "data": |
        {"hello":"<p>hello</p>"}
    "desc": " Escaped strings are introduced by applying the escape filter (alias\
        \ e) to string objects. "
    "expected": "<html>\n<body> \n&lt;p&gt;hello&lt;/p&gt;\n</body>\n</html>\n\n"
    "name": |-
        test_46_00_autoescaping_test.test
    "template": "<html>\n<body> \n{{ hello|escape }}\n</body>\n</html>\n"
    "testname": |-
        autoescaping case1
-   "data": |
        {}
    "desc": " Escaped strings are introduced by applying the escape filter (alias\
        \ e) to string objects. "
    "expected": |+
        &lt;html&gt;testing double escaping&lt;/html&gt;

    "name": |-
        test_46_01_autoescaping_test.test
    "template": |
        {% set value = "<html>testing double escaping</html>"|e|e %}
        {{ value }}
    "testname": |-
        autoescaping case2
-   "data": |
        {"html": "<h1>Title</h1>"}
    "desc": " Escaped strings are introduced by applying the escape filter (alias\
        \ e) to string objects. "
    "expected": |+
        <h1>Title</h1>|<h1>Title</h1>|&lt;h1&gt;Title&lt;/h1&gt;|&lt;h1&gt;Title&lt;/h1&gt;

    "name": |-
        test_46_02_autoescaping_test.test
    "template": |
        {{ html }}|{{ html|safe }}|{{ html|escape }}|{{ html|e }}
    "testname": |-
        autoescaping case3
-   "data": |
        {"html": "<h1>Title</h1>"}
    "desc": " Escaped strings are introduced by applying the escape filter (alias\
        \ e) to string objects. "
    "expected": |+
        &lt;h1&gt;Title&lt;/h1&gt;

    "name": |-
        test_46_04_autoescaping_test.test
    "template": |
        {{ html|escape|escape }}
    "testname": |-
        autoescaping case4
-   "data": |
        {}
    "desc": " Escaped strings are introduced by applying the escape filter (alias\
        \ e) to string objects. "
    "expected": |
        &lt;h1&gt;Title&lt;/h1&gt;
    "name": |-
        test_46_08_autoescaping_test.test
    "template": |
        {% print "<h1>Title</h1>"|escape %}
    "testname": |-
        autoescaping case5
-   "data": |
        {"html": "<h1>Title</h1>"}
    "desc": " Escaped strings are introduced by applying the escape filter (alias\
        \ e) to string objects. "
    "expected": |
        &lt;h1&gt;Title&lt;/h1&gt;
    "name": |-
        test_46_09_autoescaping_test.test
    "template": |
        {% print html|escape %}
    "testname": |-
        autoescaping case6
-   "data": |
        {"html": "<h1>Title</h1>"}
    "desc": " Escaped strings are introduced by applying the escape filter (alias\
        \ e) to string objects. "
    "expected": "&lt;h1&gt;Title&lt;/h1&gt; \n&lt;h1&gt;hello&lt;/h1&gt;\n&lt;h1&gt;hello&lt;/h1&gt;\n"
    "name": |-
        test_46_10_autoescaping_test.test
    "template": "{% print html|escape %}\n{% set var=\"<h1>hello</h1>\"|escape %}\
        \ \n{{ var }}\n{% print var %}\n"
    "testname": |-
        autoescaping case7
-   "data": |
        {"html": "<h1>Title</h1>"}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        <h1>Title</h1>

    "name": |-
        test_46_12_autoescaping_test.test
    "template": |
        {% autoescape true %}
        {{ html|safe }}
        {% endautoescape %}
    "testname": |-
        autoescaping case8
-   "data": |
        {"html": "<h1>Title</h1>"}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        <h1>Title</h1>

    "name": |-
        test_46_13_autoescaping_test.test
    "template": |
        {% autoescape false %}
        {{ html|safe }}
        {% endautoescape %}
    "testname": |-
        autoescaping case9
-   "data": |
        {}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        <html>
        <h2>child</h2></html>

    "name": |-
        test_46_16_autoescaping_inheritence_test.test
    "template": |
        {% extends bases.parent_autoescape2|template %}
        {% block test %}{% set childhtml = "<h2>child</h2>" %}{{ childhtml }}{% endblock %}
    "testname": |-
        autoescaping case10
-   "data": |
        {"hello":"<p>hello</p>"}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        <html>
        <body>
        &lt;p&gt;hello&lt;/p&gt;
        </body>
        </html>

    "name": |-
        test_46_18_autoescaping_test.test
    "template": |
        <html>
        <body>
        {% autoescape true %}
        {{ hello|escape }}
        {% endautoescape %}
        </body>
        </html>
    "testname": |-
        autoescaping case11
-   "data": |
        {"hello":"<p>hello</p>"}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": "<html>\n<body> \n&lt;p&gt;hello&lt;/p&gt;\n</body>\n</html>\n\n"
    "name": |-
        test_46_19_autoescaping_test.test
    "template": "<html>\n<body> \n{% autoescape false %}\n{{ hello|escape }}\n{% endautoescape\
        \ %}\n</body>\n</html>\n"
    "testname": |-
        autoescaping case12
-   "data": |
        {}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        &lt;h1&gt;Title&lt;/h1&gt;

    "name": |-
        test_46_20_autoescaping_test.test
    "template": |
        {% autoescape true %}
        {% print "<h1>Title</h1>"|escape %}

        {% endautoescape %}
    "testname": |-
        autoescaping case13
-   "data": |
        {}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        &lt;h1&gt;Title&lt;/h1&gt;

    "name": |-
        test_46_21_autoescaping_test.test
    "template": |
        {% autoescape false %}
        {% print "<h1>Title</h1>"|escape %}

        {% endautoescape %}
    "testname": |-
        autoescaping case14
-   "data": |
        {"html": "<h1>Title</h1>"}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        &lt;h1&gt;Title&lt;/h1&gt;

    "name": |-
        test_46_22_autoescaping_test.test
    "template": |
        {% autoescape true %}
        {% print html|escape %}

        {% endautoescape %}
    "testname": |-
        autoescaping case15
-   "data": |
        {"html": "<h1>Title</h1>"}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        &lt;h1&gt;Title&lt;/h1&gt;

    "name": |-
        test_46_23_autoescaping_test.test
    "template": |
        {% autoescape false %}
        {% print html|escape %}

        {% endautoescape %}
    "testname": |-
        autoescaping case16
-   "data": |
        {"html": "<h1>Title</h1>"}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": "&lt;h1&gt;Title&lt;/h1&gt; \n&lt;h1&gt;hello&lt;/h1&gt;\n&lt;h1&gt;hello&lt;/h1&gt;\n"
    "name": |-
        test_46_24_autoescaping_test.test
    "template": "{% autoescape true %}\n{% print html|escape %}\n{% set var=\"<h1>hello</h1>\"\
        |escape %} \n{{ var }}\n{% print var %}\n{% endautoescape %}\n"
    "testname": |-
        autoescaping case17
-   "data": |
        {"html": "<h1>Title</h1>"}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": "&lt;h1&gt;Title&lt;/h1&gt; \n&lt;h1&gt;hello&lt;/h1&gt;\n&lt;h1&gt;hello&lt;/h1&gt;\n"
    "name": |-
        test_46_25_autoescaping_test.test
    "template": "{% autoescape false %}\n{% print html|escape %}\n{% set var=\"<h1>hello</h1>\"\
        |escape %} \n{{ var }}\n{% print var %}\n{% endautoescape %}\n"
    "testname": |-
        autoescaping case18
-   "data": |
        {}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        &lt; we are testing e &gt;
        &lt; we are testing escape &gt;

    "name": |-
        test_46_26_autoescaping_test.test
    "template": |
        {% set e_test = "< we are testing e >"|e %}
        {% set escape_test = "< we are testing escape >"|escape %}
        {% autoescape true %}
        {{e_test}}
        {{escape_test}}
        {% endautoescape %}
    "testname": |-
        autoescaping case19
-   "data": |
        {}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        &lt; we are testing e &gt;
        &lt; we are testing escape &gt;

    "name": |-
        test_46_27_autoescaping_test.test
    "template": |
        {% set e_test = "< we are testing e >"|e %}
        {% set escape_test = "< we are testing escape >"|escape %}
        {% autoescape false %}
        {{e_test}}
        {{escape_test}}
        {% endautoescape %}
    "testname": |-
        autoescaping case20
-   "data": |
        {}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        testing e for ampersand is &amp;
        testing escape for ampersand is &amp;

    "name": |-
        test_46_28_autoescaping_test.test
    "template": |
        {% set e_test = "testing e for ampersand is &"|e %}
        {% set escape_test = "testing escape for ampersand is &"|escape %}
        {% autoescape true %}
        {{e_test}}
        {{escape_test}}
        {% endautoescape %}
    "testname": |-
        autoescaping case21
-   "data": |
        {}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        testing e for ampersent is &amp;
        testing escape for ampersent is &amp;

    "name": |-
        test_46_29_autoescaping_test.test
    "template": |
        {% set e_test = "testing e for ampersent is &"|e %}
        {% set escape_test = "testing escape for ampersent is &"|escape %}
        {% autoescape false %}
        {{e_test}}
        {{escape_test}}
        {% endautoescape %}
    "testname": |-
        autoescaping case22
-   "data": |
        {}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        <h1>autoescape</h1>

    "name": |-
        test_46_30_autoescaping_test.test
    "template": |
        {% autoescape true %}
        {% include includes.forautoescape|template %}
        {% endautoescape %}
    "testname": |-
        autoescaping case23
-   "data": |
        {}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        <h1>autoescape</h1>

    "name": |-
        test_46_31_autoescaping_test.test
    "template": |
        {% autoescape false %}
        {% include includes.forautoescape|template %}
        {% endautoescape %}
    "testname": |-
        autoescaping case24
-   "data": |
        {}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |4+

    "name": |-
        test_46_32_autoescaping_test.test
    "template": |
        {% autoescape true %}
        {% set demo = "<h1>Hello</h1>"|template %}
        {% endautoescape %}
    "testname": |-
        autoescaping case25
-   "data": |
        {}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |4+

    "name": |-
        test_46_33_autoescaping_test.test
    "template": |
        {% autoescape true %}
        {% set demo = "<h1>Hello</h1>"|template %}
        {% endautoescape %}
    "testname": |-
        autoescaping case26
-   "data": |
        {}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        <html>


    "name": |-
        test_46_36_autoescaping_test.test
    "template": |
        {% macro html(val) %}
        {{ val }}
        {% endmacro %}
        {% autoescape true %}
        {{ html("<html>") }}
        {% endautoescape %}
    "testname": |-
        autoescaping case27
-   "data": |
        {}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |
        &lt;html&gt;<html>
    "name": |-
        test_46_38_autoescaping_test.test
    "template": |
        {% set tmpl = "{{ html }}" %}{% set html = "<html>" %}
        {% autoescape true %}
        {{ html }}{% include tmpl|template %}
        {% endautoescape %}
    "testname": |-
        autoescaping case28
-   "data": |
        {}
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        <html>

    "name": |-
        test_46_39_autoescaping_test.test
    "template": |
        {% autoescape false %}
        {{ "<html>" }}
        {% endautoescape %}
    "testname": |-
        autoescaping case29
-   "data": |
        { "html" : "<html>"  }
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        &lt;html&gt;

    "name": |-
        test_46_41_autoescaping_test.test
    "template": |
        {% autoescape true %}
        {{ html }}
        {% endautoescape %}
    "testname": |-
        autoescaping case30
-   "data": |
        { "html" : "<html>"  }
    "desc": "Autoescape: Controls the current auto-escaping behavior. This tag takes\
        \ either on or off as an argument and that determines whether auto-escaping\
        \ is in effect inside the block. The block is closed with an endautoescape\
        \ ending tag.When auto-escaping is in effect, all variable content has HTML\
        \ escaping applied to it before placing the result into the output (but after\
        \ any filters have been applied). This is equivalent to manually applying\
        \ the escape filter to each variable. The only exceptions are variables that\
        \ are already marked as \u201Csafe\u201D from escaping, either by the code\
        \ that populated the variable, or because it has had the safe or escape filters\
        \ applied."
    "expected": |+
        <html>

        ||
        <html>


    "name": |-
        test_46_44_autoescaping_test.test
    "template": |
        {% macro m() %}
        <html>
        {% endmacro %}
        {{ m() }}
        {% autoescape true %}||
        {{ m() }}
        {% endautoescape %}
    "testname": |-
        autoescaping case31
