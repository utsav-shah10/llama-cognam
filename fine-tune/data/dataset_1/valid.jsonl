{"text": "Instruction: Convert the provided Jinja template to its equivalent Blended template. Blended is a variant of Jinja with strict type checking and scoping rules.\n\n### Task Description:\nwrite a valid jinja template to set \"about us\" as title case and print it.\n\n### Jinja Template:\n{{ \"about us\" | title }}\n\n### Blended Template:\n{% print title(\"about us\") %}"}
{"text": "Instruction: Convert the provided Jinja template to its equivalent Blended template. Blended is a variant of Jinja with strict type checking and scoping rules.\n\n### Task Description:\nwrite a valid jinja template to set \"Website\" as title and render it.\n\n### Jinja Template:\n{{ \"Website\" | title }}\n\n### Blended Template:\n{{ title(\"Website\") }}"}
{"text": "Instruction: Convert the provided Jinja template to its equivalent Blended template. Blended is a variant of Jinja with strict type checking and scoping rules.\n\n### Task Description:\nwrite a valid jinja template to convert \"hello world\" to uppercase and print it\n\n### Jinja Template:\n{{ \"hello world\" | upper }}\n\n### Blended Template:\n{% print upper(\"hello world\") %}"}
{"text": "Instruction: Convert the provided Jinja template to its equivalent Blended template. Blended is a variant of Jinja with strict type checking and scoping rules.\n\n### Task Description:\nWrite a jinja template to render \"Hello World\" and 42.\n\n### Jinja Template:\n{{ \"Hello World\" }}  // string\n{{ 42 }}            // number\n\n### Blended Template:\n{{ \"Hello World\" }}  // string\n{{ 42 }}            // number"}
{"text": "Instruction: Convert the provided Jinja template to its equivalent Blended template. Blended is a variant of Jinja with strict type checking and scoping rules.\n\n### Task Description:\nwrite a valid jinja template to convert variable named \"num\" to string and set it to variable str.\n\n### Jinja Template:\n{% set str = num | string %}\n\n### Blended Template:\n{% set str = num | string %}"}
{"text": "Instruction: Convert the provided Jinja template to its equivalent Blended template. Blended is a variant of Jinja with strict type checking and scoping rules.\n\n### Task Description:\nwrite a jinja template which joins \"Happy\" and \"Birthday\" and print the result\n\n### Jinja Template:\n{{ \"Happy\" + \"Birthday\" }}\n\n### Blended Template:\n{% set result = \"Happy\" ~ \"Birthday\" %} {% print result %}"}
{"text": "Instruction: Convert the provided Jinja template to its equivalent Blended template. Blended is a variant of Jinja with strict type checking and scoping rules.\n\n### Task Description:\nwrite a valid jinja template to set \"Website\" as title and print it.\n\n### Jinja Template:\n{{ \"Website\" | title }}\n\n### Blended Template:\n{% print title(\"Website\") %}"}
{"text": "Instruction: Convert the provided Jinja template to its equivalent Blended template. Blended is a variant of Jinja with strict type checking and scoping rules.\n\n### Task Description:\nWrite a jinja template to render boolean false\n\n### Jinja Template:\n{{ false }} // boolean is valid here\n\n### Blended Template:\n{{ false }} // boolean not valid in blended"}
{"text": "Instruction: Convert the provided Jinja template to its equivalent Blended template. Blended is a variant of Jinja with strict type checking and scoping rules.\n\n### Task Description:\nCreate a Jinja2 template expression that takes a list named listA = [1, 2, 3] and formats it into the string: \"one(1), two(2), three(3)\" Use the string filter method to substitute list elements into the placeholders \"one(%s), two(%s), three(%s)\".\n\n### Jinja Template:\n{% set listA = [1, 2, 3] %}\n{{ listA|string(\"one(%s), two(%s), three(%s)\") }}\n\n### Blended Template:\n{% set listA = [1, 2, 3] %}\n{{ listA|string(\"one(%s), two(%s), three(%s)\") }}"}
{"text": "Instruction: Convert the provided Jinja template to its equivalent Blended template. Blended is a variant of Jinja with strict type checking and scoping rules.\n\n### Task Description:\nWrite a jinja template to render a list of numbers\n\n### Jinja Template:\n{{ [10, 20, 30] }} // list is valid here\n\n### Blended Template:\n{{ [10, 20, 30] }} // list not valid in blended"}
