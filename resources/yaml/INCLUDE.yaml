"dependency":
-   "bases":
        "base": |
            <html>
            <body>
            {% block content %}<p>Parent Content</p>{% endblock %}
            </body>
            </html>
        "block_scope": |
            <!DOCTYPE html>
            <html>
                <head>
                    {% block head %}
                        <link rel="stylesheet" href="style.css" />
                        <title>{% block title %}{% endblock %} - My Webpage</title>
                    {% endblock %}
                </head>
                <body>
                    <div id="content">{% block content %}{% endblock %}</div>
                    <div id="footer">
                        {% block footer %}
                            &copy; Copyright 2011 by <a href="http://domain.invalid/">you</a>.
                        {% endblock %}
                    </div>
                </body>
            </html>
        "block_scope2": |
            {% block one %}{% endblock %}
            {% block two %}{% endblock %}
        "block_scoping2": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {% set value=45 %}
            {{ value }}
            {% endblock %}

            {% block second %}
            --second block--
            {% set value=25 %}
            {{value}}
            {% endblock %}

            {% block third %}
            --third block--
            {% set value=35 %}
            {{value}}
            {% endblock %}
        "block_scoping3": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {{ value }}
            {{ variable }}
            {% endblock %}

            {% block second %}
            --second block--
            {% set variable=25 %}
            {% endblock %}

            {% block third %}
            --third block--
            {% set value=35 %}
            {{value}}
            {% set variable=45%}
            {% endblock %}
        "block_scoping3_01": |
            {% set value=100 %}

            {% block first %}
            --first block--
            {{ value }}
            {{ variable }}
            {% endblock %}
        "block_scoping3_02": |
            {% set variable=25 %}
            {% block second %}
            --second block--
            {% endblock %}
        "block_scoping3_03": |
            {% set value=35 %}
            {% block third %}
            --third block--
            {{value}}
            {% endblock %}
        "block_scoping_new": |
            {% set value = "base" %}
            {% block container %}{% endblock %}
        "block_scoping_test": |
            {% set variable=100 %}

            {% block first %}
            {{ variable }}
            {% endblock %}

            {% block second %}
            {% set variable=25 %}
            {% endblock %}

            {% block third %}
            {% set variable=45%}
            {% endblock %}
        "block_scoping_test_01": |
            {% set variable=100 %}

            {% block first %}
            {{ variable }}
            {% endblock %}
        "block_scoping_test_02": |
            {% set variable=100 %}

            {% block second %}
            {% endblock %}
        "block_scoping_test_03": |
            {% set variable=100 %}

            {% block third %}
            {% endblock %}
        "check": |
            <html>
            <body>


            {% block first %}
            {% endblock %}


            </body>
            </html>
        "check_child_scope": |
            <html>
            <body>
            {% block content %}
            {% set greeting = 'Hello !' %}
            {{ greeting }} this is the parent
            {% endblock %}
            </body>
            </html>
        "extend_using_nestedBlock": |
            <html>
            <head>
            {% block content %}
            {{ "This is Root's content" }}
            {% endblock %}
            </head>
            <body>
            {% block inner %}
            {{ "This is from Root's inner" }}
            {% endblock %}
            </body>
            </html>
        "inner": |
            <html>
            {% block content %}
            <body>
            {% block inner%}{% endblock %}
            </body>
            {% endblock %}
            </html>
        "macro": |
            {% macro parent_macro() %}<p>Parent Macro</p>{% endmacro %}
            {% block content %}{% endblock %}
        "main_base": |
            {% block container %}
            base container base
            {% block outer %}
            base outer base
            {% block inner1 %}
            base inner base
            {% endblock %}
            {% endblock %}
            {% endblock %}
        "mid_base1": |
            {% extends "bases/main_base.html" %}
            {% block outer %}
            block outer mid1
            {% block inner2 %}
            block inner2 mid1
            {% parent %}
            {% endblock %}
            {% endblock %}
        "mid_base2": |
            {% extends "bases/main_base.html" %}
            {% block inner1 %}
            block inner1 mid2
            {% endblock %}
        "multiple": |
            {% extends bases.base|template %}
            {% block content %}
            <p>This is content from the template "multiple.html"</p>
            {% endblock %}
        "out": |+
            {% block first_block %}
            {% endblock %}
            {% block second_block %}
            {% set value=200 %}
            {% endblock %}
            {% block third_block %}
            {{ value}}
            {% endblock %}
            {% block variable_block %}
            Hello {{ var }}
            {% endblock %}

        "parent": |
            {% set val=45 %}
            {% block variable_block %}
            {{ val }}
            {% endblock %}
            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent2": |
            {% set val=45 %}
            {% block variable_block %}
            {{ val }}
            {% endblock %}

            {% block new_block %}
            this is parent block
            {% endblock %}
        "parent3": |
            {% set val=45 %}
            {% block variable_block %}
            {% print val %}
            {% endblock %}
            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent4": |
            {% set val=45 %}
            {% block variable_block %}
            {% print val %}
            {% endblock %}

            {% block new_block %}

            this is parent block
            {% endblock %}
        "parent_autoescape2": |
            {% autoescape false %}
            <html>
            {% block test %}{% set parenthtml = "<h1>Parent</h1>" %}{{ parenthtml }}{% endblock %}
            </html>
            {% endautoescape %}
        "parent_template": |
            {% block k %}
            {% set var = 'parent' %}
            {% endblock %}
        "parent_template2": |
            {% set val = 'parent' %}{% block k %}{% set val = 'inner' %}{% endblock %}{{ val }}
        "path": |-
            bases/base.html
        "path2": |
            bases/base.html
        "root": |
            {% set value=15 %}
            {% block new_block %}
            {{ var }}
            {% endblock %}
        "super": |
            {% block variable_block %}
            {{ var }}
            parent block
            {% endblock %}
        "test_bases_eof": "{% block content %}{% endblock %}\r\n"
        "value_set": |
            {% set value = 20 %}
            {% block test %}
            {{ value }}
            {% endblock %}
    "includes":
        "chain": |
            {% include includes.with|template with { "argument" : argument, "value" : 42 } only %}
        "child": |
            {{ upper('string was in lower') }}
        "child2": |
            {% set value = 25 %}
            Included Template
        "colormacro": |4

            {% macro avgcolor(color1, color2) -%}
                {%- set color1 = rgbcolor(color1) -%}
                {%- set color2 = rgbcolor(color2) -%}
                {%- set coloravg = [
                    mean([color1[0], color2[0]]),
                    mean([color1[1], color2[1]]),
                    mean([color1[2], color2[2]])
                ] -%}
                {{ hexcolor(coloravg) }}
            {%- endmacro %}

            {% macro lighten(color, fraction) -%}
                {%- set color = rgbcolor(color) -%}
                {%- set add_white = 255 * fraction -%}
                {%- set new_r = color[0] + add_white -%}
                {%- set new_g = color[1] + add_white -%}
                {%- set new_b = color[2] + add_white -%}
                {%- if new_r > 255 %}{% set new_r = 255 %}{% endif -%}
                {%- if new_g > 255 %}{% set new_g = 255 %}{% endif -%}
                {%- if new_b > 255 %}{% set new_b = 255 %}{% endif -%}
                {{ hexcolor([new_r, new_g, new_b]) }}
            {%- endmacro %}

            {% macro darken(color, fraction) -%}
                {%- set color = rgbcolor(color) -%}
                {%- set darkcolor = [
                    color[0] - (color[0] * fraction),
                    color[1] - (color[1] * fraction),
                    color[2] - (color[2] * fraction),
                ] -%}
                {{ hexcolor(darkcolor) }}
            {%- endmacro %}
        "eof_test": |+
            This included file contains a extra new line at the EOF given by user apart from hidden newline character.

        "eof_test10": |
            this is a new file
            this is a new file
        "eof_test11": |-
            this is a new file
        "eof_test2": |
            This included file contains hidden newline character only at the EOF.
        "eof_test3": "This included file contains a tab given by user apart from a\
            \ hidden newline character at the EOF.\t\n"
        "eof_test4": "This included file contains a Carriage return and newline as\
            \ used in windows os ('\\r\\n') at the EOF.\r\n"
        "eof_test5": "This included file contains a Carriage return as used in Mac\
            \ os ('\\r') at the EOF.\r"
        "eof_test6": "This included file contains multiple Carriage return as used\
            \ in Mac os ('\\r\\r') at the EOF.\r\r"
        "eof_test7": |-
            this included file is created by echo command of linux.
        "eof_test8": |
            this included file is contains comment tags at the EOF.{# #}
        "eof_test9": |
            This included file contains newline character at the EOF.
        "example_file": |-
            path file is created by echo command of linux
        "example_file2": |
            path file is created by Text Editor tool
        "faker": |
            FAKER!
        "forautoescape": |
            <h1>autoescape</h1>
        "has_hello": |
            {% macro hello() %}
            Hello included!
            {% endmacro %}
        "has_macro": |
            {% macro from_inside(var) %}{{var}}{% endmacro %}
            {% print from_inside(42) %}
        "include_path": |-
            include/example_file.html
        "include_path2": |
            include/example_file2.html
        "macro_call": |+
            {% print hello("hello world") %}

        "macro_call2": |
            {% macro test() %}
               "hello this included file macro"
            {% endmacro %}
        "macro_within_macro": |
            {% macro test() %}
            {% print hello() %}
            "this is included macro"
            {% endmacro %}
            {% print test() %}
        "macro_within_macro2": |
            {% macro test() %}
            {% print hello() %}
            "this is included macro"
            {% endmacro %}
        "macro_within_macro3": |
            {% print hello() %}
            {% macro test() %}
            "this is included macro"
            {% endmacro %}
            {% print test() %}
        "module": "{% macro macro1() %}\r\nmacro1 imported!\r\n{% endmacro %}\r\n\
            {% macro macro2() %}\r\nmacro2 imported!\r\n{% endmacro %}\r\n"
        "name_snippet": |+
            {% set greeting = "< in-built filter e is used >" %}
            {{ greeting|e }}
            {% print round(10.6) %}

            {% macro hello() %}
            "this is user functions"
            {% endmacro %}
            {% print hello() %}

        "new_macro_call": |+
            {{ hello("hello world") }}

        "new_macro_within_macro2": |
            {% macro test() %}
            {{ hello() }}
            "this is included macro"
            {% endmacro %}
        "newline_test": |
            This is included File.
        "newline_test2": |
            This is included File.

            {% set var = "Hello World!" %}
            {% print var %} After include Tag new Line goes Here--->
        "scope": |
            {% set defined_outside = "inside" %}
            {% set defined_inside = "inside" %}
        "scope2": |
            {% set value = 24 %}
            {{ variable }}
        "scope_test": |
            These parens contain a variable from external scope: ({{ variable }})
        "string": |
            This text is loaded as a string.
        "template": |
            {% set var = 22 %}
        "value_call": |
            {{ value }}
        "variable": |
            This text is included via the context as a variable.
        "with": |
            There are two values that are added to the context: {{ argument }}, {{ value }}.
"overview": |-
    The include statement is useful to include a template and return the rendered contents of that file into the current namespace.
    Included templates have access to the variables of the active context by default.
"tests":
-   "data": |
        {}
    "desc": |-
        The include statement includes a template and returns the rendered content of that file into the current namespace.
    "expected": |+
        This text is loaded as a string.

    "name": |-
        test_08_00_include_string.test
    "template": |
        {% include "include/string.html" %}
    "testname": |-
        include string
-   "data": |
        {}
    "desc": |-
        The include tag allows you to include the content from another file stored in the include folder.
    "expected": |+
        This text is included via the context as a variable.

    "name": |-
        test_08_01_include_variable.test
    "template": |
        {% include includes.variable|template %}
    "testname": |-
        include variable
-   "data": |
        {}
    "desc": |-
        The include tag allows you to include the content from another file stored in the include folder.
    "expected": |+
        These parens contain a variable from external scope: (22)

    "name": |-
        test_08_04_include_default_scope.test
    "template": |
        {% set variable=22 %}
        {% include includes.scope_test|template %}
    "testname": |-
        include default scope
-   "data": |
        {}
    "desc": |-
        you can mark an include with ignore missing; in which case will ignore the statement if the template to be included does not exist
    "expected": |4+

    "name": |-
        test_08_05_include_ignore_missing.test
    "template": |
        {% include "missing.file" ignore missing %}
    "testname": |-
        include ignore missing
-   "data": |
        {}
    "desc": |-
        You can disable access to the context by appending the only keyword:no variables will be accessible
    "expected": |+
        These parens contain a variable from external scope: ()

    "name": |-
        test_08_06_include_only.test
    "template": |
        {% set variable="some value" %}
        {% include includes.scope_test|template only %}
    "testname": |-
        include only
-   "data": |
        {}
    "desc": |-
        The include tag allows you to include the content from another file stored in the include folder. You can create chain by including one another.
    "expected": |+
        There are two values that are added to the context: 22, 42.

    "name": |-
        test_08_07_include_chain.test
    "template": |
        {% include includes.chain|template with { "argument" : 22, "includes" : includes } only %}
    "testname": |-
        include chain
-   "data": |
        {}
    "desc": |-
        The include tag allows you to include the content from another file stored in the include folder. You can create chain by including one another.
    "expected": |+
        outside


    "name": |-
        test_08_08_include_scope.test
    "template": |
        {% set defined_outside = "outside" %}
        {% include includes.scope|template %}
        {{ defined_outside }}
        {{ defined_inside }}
    "testname": |-
        include scope
-   "data": |+
        {}

    "desc": |-
        You can disable access to the context by appending the only keyword:no variables will be accessible
    "expected": |+
        &lt; in-built filter e is used &gt;
        11
        "this is user functions"


    "name": |-
        test_15_00_import_with_only.test
    "template": |
        {% include includes.name_snippet|template only %}
    "testname": |-
        import with only
-   "data": |+
        {}

    "desc": |-
        The include tag allows you to include the content from another file stored in the include folder.
    "expected": |+
        &lt; in-built filter e is used &gt;
        11
        "this is user functions"


    "name": |-
        test_15_03_import_without_with_context.test
    "template": |
        {% include includes.name_snippet|template %}
    "testname": "import without with "
-   "data": |
        {}
    "desc": |-
        The include tag makes no modification to any scope of the master template; it neither adds nor modifies any object.  The include tag simply renders the referenced template in place.you can mark an include with ignore missing; in which case it will ignore the statement if the template to be included does not exist.
    "expected": |4+

        File is not included.

    "name": |-
        test_40_01_include_ignore_missing.test
    "template": |
        {% include "include/missing.html" ignore missing  %}

        File is not included.
    "testname": |-
        include ignore missing
-   "data": |
        {}
    "desc": |-
        The include tag makes no modification to any scope of the master template; it neither adds nor modifies any object.  The include tag simply renders the referenced template in place.you can mark an include with ignore missing; in which case it will ignore the statement if the template to be included does not exist.
    "expected": |+
        This text is included via the context as a variable.


    "name": |-
        test_40_02_include_ignore_missing.test
    "template": |+
        {% include includes.variable|template ignore missing  %}

    "testname": |-
        include ignore missing
-   "data": |
        {}
    "desc": |-
        The include tag makes no modification to any scope of the master template; it neither adds nor modifies any object.  The include tag simply renders the referenced template in place.you can mark an include with ignore missing; in which case it will ignore the statement if the template to be included does not exist.
    "expected": |+
        path file is created by echo command of linux

    "name": |-
        test_40_03_include_multiple_test.test
    "template": |+
        {% include includes.include_path  %}

    "testname": |-
        include multiple
-   "data": |
        {}
    "desc": |-
        The include tag makes no modification to any scope of the master template; it neither adds nor modifies any object.  The include tag simply renders the referenced template in place.you can mark an include with ignore missing; in which case it will ignore the statement if the template to be included does not exist.
    "expected": |+
        <html>
        <body>
        <p>"Path.html" created by Echo command of linux</p>
        </body>
        </html>

    "name": |-
        test_41_04_extend_multiple_test.test
    "template": |+
        {% extends bases.path %}
        {% block content %}
        <p>"Path.html" created by Echo command of linux</p>
        {% endblock %}

    "testname": |-
        extend multiple
-   "data": |
        {"path" : "include/variable.html"}
    "desc": |-
        The include tag makes no modification to any scope of the master template; it neither adds nor modifies any object.  The include tag simply renders the referenced template in place.you can mark an include with ignore missing; in which case it will ignore the statement if the template to be included does not exist.
    "expected": |+
        This text is included via the context as a variable.


    "name": |-
        test_40_05_include_path_test.test
    "template": |+
        {% include path %}

    "testname": |-
        include path
-   "data": |
        {}
    "desc": |-
        The include tag makes no modification to any scope of the master template; it neither adds nor modifies any object.  The include tag simply renders the referenced template in place.you can mark an include with ignore missing; in which case it will ignore the statement if the template to be included does not exist. An inline style may be used to apply a unique style for a single element.
    "expected": |
        1
    "name": |-
        test_44_00_include_inline.test
    "template": |
        {% include '{{a}}'|template with {'a':1} %}
    "testname": |-
        include inline case1
-   "data": |
        {}
    "desc": |-
        The include tag makes no modification to any scope of the master template; it neither adds nor modifies any object.  The include tag simply renders the referenced template in place.you can mark an include with ignore missing; in which case it will ignore the statement if the template to be included does not exist. An inline style may be used to apply a unique style for a single element.
    "expected": |
        2
    "name": |-
        test_44_01_include_inline.test
    "template": |
        {% include '{{a + 1}}'|template with {'a':1} %}
    "testname": |-
        include inline case2
