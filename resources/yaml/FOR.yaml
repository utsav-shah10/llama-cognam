"overview": |-
    A control structure refers to all those things that control the flow of a program - conditionals (i.e. if/elif/else), for-loops, as well as things like macros and blocks. With the default syntax, control structures appear inside {% ... %} blocks.
    Loop over each item in a sequence.
"tests":
-   "data": |
        { "list" : [ 1, 2, 3, 4] }
    "desc": "The for statement lets you repeat a statement or compound statement a\
        \ specified number of times. The body of a for statement is executed zero\
        \ or more times until an optional condition becomes false. "
    "expected": "-----------------------\nindex:     1\nindex0:    0\nrevindex:  4\n\
        revindex0: 3\nfirst?:    YES \nlast?:     NO \nvalue:     1\n-----------------------\n\
        index:     2\nindex0:    1\nrevindex:  3\nrevindex0: 2\nfirst?:    NO \nlast?:\
        \     NO \nvalue:     2\n-----------------------\nindex:     3\nindex0:  \
        \  2\nrevindex:  2\nrevindex0: 1\nfirst?:    NO \nlast?:     NO \nvalue: \
        \    3\n-----------------------\nindex:     4\nindex0:    3\nrevindex:  1\n\
        revindex0: 0\nfirst?:    NO \nlast?:     YES \nvalue:     4\n-----------------------\n\
        \n"
    "name": |
        test_02_00_for_basic.test
    "template": "{% for value in list %}\n-----------------------\nindex:     {{ loop.index\
        \ }}\nindex0:    {{ loop.index0}}\nrevindex:  {{ loop.revindex }}\nrevindex0:\
        \ {{ loop.revindex0 }}\nfirst?:    {% if loop.first %}YES{% else %}NO{% endif\
        \ %} \nlast?:     {% if loop.last %}YES{% else %}NO{% endif %} \nvalue:  \
        \   {{ value }}\n{% endfor %}\n-----------------------\n"
    "testname": |-
        for
-   "data": |
        { "list1" : [ 1, 2, 3, 4] , "list2" : [ "a", "b", "c", "d" ] }
    "desc": |-
        The for statement lets you repeat a statement or compound statement a specified number of times. The body of a for statement is executed zero or more times until an optional condition becomes false. You can use expression within the for statement .
    "expected": |4+
          1
          2
          3
          4
          a
          b
          c
          d

    "name": |
        test_02_01_for_expression.test
    "template": |
        {% for item in concat(list1, list2) %}
          {{ item }}
        {% endfor %}
    "testname": |
        for with expression
-   "data": |
        {
         "list_of_lists" : [
           [ 1, 2, 3, 4, 5 ],
           [ 6, 7, 8, 9, 10 ],
           [ 11, 12, 13, 14, 15 ]
         ]
        }
    "desc": |-
        The for statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence.A loop inside another loop is called a nested loop. Consider a nested loop where the outer loop runs n times and consists of another loop inside it. The inner loop runs m times. Then, the total number of times the inner loop runs during the program execution is n*m.
    "expected": " \n   \n   \n    Item 1 in list 1. \n   \n    Item 2 in list 1. \n\
        \   \n    Item 3 in list 1. \n   \n    Item 4 in list 1. \n   \n    Item 5\
        \ in list 1. \n   \n \n   \n   \n    Item 1 in list 2. \n   \n    Item 2 in\
        \ list 2. \n   \n    Item 3 in list 2. \n   \n    Item 4 in list 2. \n   \n\
        \    Item 5 in list 2. \n   \n \n   \n   \n    Item 1 in list 3. \n   \n \
        \   Item 2 in list 3. \n   \n    Item 3 in list 3. \n   \n    Item 4 in list\
        \ 3. \n   \n    Item 5 in list 3. \n   \n \n\n"
    "name": |
        test_02_03_for_parent_loop.test
    "template": "{% for list in list_of_lists %} \n  {% set parent = loop %} \n  {%\
        \ for item in list %} \n    Item {{ loop.index }} in list {{ parent.index\
        \ }}. \n  {% endfor %} \n{% endfor %} \n"
    "testname": "for with parent \n"
-   "data": |
        {}
    "desc": |-
        An for statement can be followed by an optional else statement, which executes when no iteration took place.
    "expected": |+
        The list is empty.

    "name": |-
        test_02_04_for_else.test
    "template": |
        {% for item in list %}
        List item: {{ item }}
        {% else %}
        The list is empty.
        {% endfor %}
    "testname": |-
        for else
-   "data": |
        { "list" : [ 1, 2, 3, 4] }
    "desc": |-
        A Macro is a group of statements that together perform a task..They are useful to put often used idioms into reusable element to not repeat yourself .
    "expected": |4+
          2
          2
          2
          2
        1

    "name": |-
        test_02_06_for_macro.test
    "template": |
        {% set value = 1 %}
        {% macro for_test(value) %}
        {% set value = value + 1 %}
        {{ value }}
        {% endmacro %}
        {% for item in list %}
          {% print for_test(value) %}
        {% endfor %}
        {{ value }}
    "testname": |-
        for macro
-   "data": |
        {}
    "desc": |4-
         Inside code blocks i.e.( {% set %} ) you can also assign values to variables. Assignments use the set tag and can have multiple targets.
    "expected": "1, 2, 3, 4, a, b, c, \n"
    "name": |-
        test_02_07_for_set.test
    "template": |
        {% set list = [ 1, 2, 3, 4, "a", "b", "c" ] %}
        {% for item in list %}{{ item }}, {% endfor %}
    "testname": |-
        for set
-   "data": |
        {}
    "desc": |-
        a dictionary can be turned into one list, containing (key,value)-tuples or two lists, i.e. one with the keys and one with the values. This transformation can be done reversely as well. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys and it can be used in For loop.
    "expected": |+
        one : 1
        two : 2

    "name": |-
        test_02_08_for_dict.test
    "template": |
        {% set dict = { "one" : 1, "two" : 2 } %}
        {% for key, value in dict|items %}
        {{ key }} : {{ value }}
        {% endfor %}
    "testname": |-
        for dict
-   "data": |
        {}
    "desc": |-
        The for statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence.
    "expected": |
        a:1,b:2,
    "name": |-
        test_43_01_for_test.test
    "template": |
        {% for x,y in {'a':1,'b':2}|items %}{{x}}:{{y}},{% endfor %}
    "testname": |-
        for test
-   "data": |
        {
        "seq": [1, 2, 3]
        }
    "desc": |-
        Loop over each item in a sequence. For example, to display a list of users provided in a variable called users:{% for user in users %}. As variables in templates retain their object properties, it is possible to iterate over containers like dict.
    "expected": |+
        <ul>
        # for item in seq:
            <li></li>
        # endfor
        </ul>

    "name": |-
        test_67_00_for_loop_line_statement.test
    "template": |
        <ul>
        # for item in seq:
            <li>{{ item }}</li>
        # endfor
        </ul>
    "testname": |-
        for with statement
-   "data": |
        {"list" : [1, 2]}
    "desc": |-
        Round function trims a float to a decimal of required precision
    "expected": |+
        1 

    "name": |-
        test_81_01_forloop_first.test
    "template": |
        {% for item in list %}
        {% if loop.first %}
        {{ item }} 
        {% endif %}
        {% endfor %}
    "testname": |-
        test loop.first function

-   "data": |
        {"list" : [1, 2]}
    "desc": |-
        Round function trims a float to a decimal of required precision
    "expected": |+
        2 
        
    "name": |-
        test_81_02_forloop_last.test
    "template": |
        {% for item in list %}
        {% if loop.last %}
        {{ item }} 
        {% endif %}
        {% endfor %}
    "testname": |-
        test loop.last function

